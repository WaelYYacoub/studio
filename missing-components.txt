
========================================

FILE: src\components\forms\pass-preview-dialog.tsx

========================================


import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogDescription,
  DialogFooter,
} from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import type { Pass } from "@/types";
import { format } from "date-fns";
import QrCodeDisplay from "../ui/qr-code";
import { Share2, Download, Printer } from "lucide-react";
import { useToast } from "@/hooks/use-toast";
import { useRef, useCallback } from "react";
import { toPng } from 'html-to-image';

interface PassPreviewDialogProps {
  pass: Pass;
  open: boolean;
  onOpenChange: (open: boolean) => void;
}

export default function PassPreviewDialog({ pass, open, onOpenChange }: PassPreviewDialogProps) {
  const { toast } = useToast();
  const printRef = useRef<HTMLDivElement>(null);
  const cardRef = useRef<HTMLDivElement>(null);

  const handlePrint = () => {
    const printContent = document.getElementById('print-area-dialog');
    const windowUrl = 'about:blank';
    const uniqueName = new Date().getTime();
    const windowName = 'Print' + uniqueName;
    const printWindow = window.open(windowUrl, windowName, 'left=50000,top=50000,width=0,height=0');

    if (printWindow && printContent) {
        printWindow.document.write(`<html><head><title>Print Pass</title>
        <link rel="preconnect" href="https://fonts.googleapis.com" />
        <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
        <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&family=Space+Grotesk:wght@500;700&display=swap" rel="stylesheet" />
        `);
        printWindow.document.write('<style>body { font-family: "Inter", sans-serif; -webkit-print-color-adjust: exact !important; print-color-adjust: exact !important; } .print-card { border: 1px solid #e5e7eb; border-radius: 0.5rem; padding: 1rem; max-width: 400px; margin: 20px auto; text-align: center; background-color: #fff; } h2 { font-family: "Space Grotesk", sans-serif; font-size: 1.5rem; font-weight: 700; text-align: center; margin-bottom: 1rem; color: #111827; } .details { display: grid; grid-template-columns: 120px 1fr; gap: 0.5rem 1rem; text-align: left; font-size: 0.875rem; } .details-label { font-weight: 600; color: #6b7280; } .details-value { text-transform: capitalize; } .details-value.status-active { color: #16a34a; font-weight: 700; } .qr-container { margin-top: 1.5rem; display: inline-flex; flex-direction: column; align-items: center; gap: 0.5rem; border-radius: 0.5rem; border: 1px solid #f3f4f6; padding: 1rem; } .qr-plate { font-size: 0.75rem; color: #6b7280; } img { max-width: 150px; margin: auto; border-radius: 0.5rem; } </style>');
        printWindow.document.write('</head><body>');
        printWindow.document.write(printContent.innerHTML);
        printWindow.document.write('</body></html>');
        printWindow.document.close();
        printWindow.focus();
        printWindow.print();
        printWindow.close();
    }
  };

  const exportCard = useCallback(async (): Promise<string | null> => {
    if (!cardRef.current) return null;
    try {
      return await toPng(cardRef.current, {
        cacheBust: true,
        skipFonts: true,
        pixelRatio: 2,
        style: {
          background: "white",
          fontFamily: "sans-serif",
        },
        filter: (node) => {
          if (node.tagName === "STYLE" || node.tagName === "LINK") {
            return false;
          }
          return true;
        },
      });
    } catch (err) {
      console.error("Failed to export card:", err);
      toast({ variant: "destructive", title: "Error", description: "Could not export pass card." });
      return null;
    }
  }, [cardRef, toast]);

  const handleDownload = useCallback(async () => {
    const dataUrl = await exportCard();
    if (!dataUrl) return;

    const link = document.createElement('a');
    link.download = `qr-pass-${pass.plateAlpha}-${pass.plateNum}.png`;
    link.href = dataUrl;
    link.click();
    toast({ title: "Success", description: "QR code card downloaded." });
  }, [exportCard, pass, toast]);

  const handleShare = async () => {
    const dataUrl = await exportCard();
    if (!dataUrl) return;

    try {
      const blob = await(await fetch(dataUrl)).blob();
      const file = new File([blob], `qr-pass-${pass.plateAlpha}-${pass.plateNum}.png`, { type: blob.type });

      if (navigator.share && navigator.canShare({ files: [file] })) {
          await navigator.share({
              title: 'Gate Pass',
              files: [file],
          });
          toast({ title: "Shared", description: "Pass details shared successfully." });
      } else {
        const win = window.open();
        if (win) {
            win.document.write(`<img src="${dataUrl}" alt="Pass QR Code" />`);
        } else {
            toast({ variant: "destructive", title: "Not Supported", description: "Web Share API for files is not supported in your browser." });
        }
      }
    } catch (error) {
        console.error('Share failed', error);
        toast({ variant: "destructive", title: "Error", description: "Could not share pass." });
    }
  };

  const getPassDate = (date: any): Date => {
    if (date.toDate) {
      return date.toDate();
    }
    return new Date(date);
  }

  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent className="sm:max-w-[425px]">
        <DialogHeader>
          <DialogTitle>Pass Generated Successfully</DialogTitle>
          <DialogDescription>
            Review the pass details below. You can print, share, or download the pass.
          </DialogDescription>
        </DialogHeader>

        <div id="print-area-dialog" ref={printRef} className="py-4">
             <div className="print-card text-center">
                 <h2 className="text-2xl font-bold font-headline text-center mb-4">
                    {pass.plateAlpha} {pass.plateNum}
                </h2>
                <div className="details grid grid-cols-[120px_1fr] gap-x-4 gap-y-2 text-sm text-left">
                    <span className="details-label font-semibold text-muted-foreground">Status:</span>
                    <span className="details-value status-active font-bold text-green-600 capitalize">{pass.status}</span>

                    <span className="details-label font-semibold text-muted-foreground">Type:</span>
                    <span className="details-value capitalize">{pass.type}</span>

                    {pass.type === "standard" && (
                        <>
                            <span className="details-label font-semibold text-muted-foreground">Owner:</span>
                            <span className="details-value">{pass.ownerName}</span>
                            <span className="details-label font-semibold text-muted-foreground">Company:</span>
                            <span className="details-value">{pass.ownerCompany}</span>
                        </>
                    )}

                    {pass.type === "visitor" && (
                         <>
                            <span className="details-label font-semibold text-muted-foreground">Visitor:</span>
                            <span className="details-value">{pass.visitorName}</span>
                            <span className="details-label font-semibold text-muted-foreground">Purpose:</span>
                            <span className="details-value">{pass.purpose}</span>
                        </>
                    )}

                    <span className="details-label font-semibold text-muted-foreground">Expires:</span>
                    <span className="details-value" style={{textTransform: 'none'}}>{format(getPassDate(pass.expiresAt), "PPP, p")}</span>
                </div>

                <div ref={cardRef} className="mt-6 flex justify-center p-2">
                    <QrCodeDisplay payload={pass.qrPayload} />
                </div>
            </div>
        </div>

        <DialogFooter className="sm:justify-between">
          <div className="flex items-center gap-2">
             <Button variant="outline" size="icon" onClick={handleShare}>
                <Share2 className="h-4 w-4" />
                <span className="sr-only">Share</span>
            </Button>
            <Button variant="outline" size="icon" onClick={handleDownload}>
                <Download className="h-4 w-4" />
                 <span className="sr-only">Download</span>
            </Button>
          </div>
          <div className="flex items-center gap-2 mt-4 sm:mt-0">
             <Button variant="outline" onClick={() => onOpenChange(false)}>Close</Button>
             <Button onClick={handlePrint}><Printer className="mr-2 h-4 w-4" />Print</Button>
          </div>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  );
}

========================================

FILE: src\components\forms\generate-batch-form.tsx

========================================


"use client";

import { useState, useRef } from "react";
import { Button } from "@/components/ui/button";
import { useToast } from "@/hooks/use-toast";
import { UploadCloud, FileText, Download, FileUp, Loader2 } from 'lucide-react';
import { useAuth } from "@/hooks/use-auth";
import { format } from "date-fns";
import { collection, writeBatch, doc } from "firebase/firestore";
import { db } from "@/lib/firestore";
import { buildQrPayload } from "@/lib/qr";
import type { Pass } from "@/types";

export default function GenerateBatchForm() {
  const [file, setFile] = useState<File | null>(null);
  const [isProcessing, setIsProcessing] = useState(false);
  const { toast } = useToast();
  const fileInputRef = useRef<HTMLInputElement>(null);
  const { user } = useAuth();

  const handleFileChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    if (event.target.files) {
      const selectedFile = event.target.files[0];
      if (selectedFile && selectedFile.type === "text/csv") {
        setFile(selectedFile);
      } else {
        toast({
          variant: "destructive",
          title: "Invalid File Type",
          description: "Please select a valid .csv file.",
        });
        setFile(null);
      }
    }
  };
  
  const handleDownloadSample = () => {
    if (!user) {
      toast({
        variant: "destructive",
        title: "User not found",
        description: "You must be logged in to download the sample.",
      });
      return;
    }
    
    const locations = ["SEC 01", "SEC 02", "SEC 03", "SEC 04", "SEC 05", "SEC 06", "SEC 07", "SEC 08", "SEC 09", "SEC 10", "LD 01", "LD 02", "LD 03", "LD 04", "LD 05", "LD 06", "Pump Station"];

    const header = "type,plateAlpha,plateNum,ownerName,serial,ownerCompany,location,expiresAt,status,createdAt,createdBy,createdByName,createdByCompany\n";
    
    const comments = [
      `# Field 'type': Use 'standard' or 'visitor'`,
      `# Field 'status': Use 'active', 'expired', or 'revoked'`,
      `# Field 'location': Choose from: ${locations.join(', ')}`,
      `# Fields 'createdAt', 'createdBy', 'createdByName', 'createdByCompany' will be pre-filled from your session if left blank.`,
      `# Date format for 'expiresAt' and 'createdAt' should be YYYY-MM-DD`,
    ].join('\n') + '\n';
      
    const now = new Date();
    const expiryDate = new Date();
    expiryDate.setFullYear(expiryDate.getFullYear() + 1);

    const sampleRow1 = [
      'standard', 'ABC', '1234', 'John Doe', 'SN-12345', 'Acme Inc.', 'SEC 01', format(expiryDate, 'yyyy-MM-dd'), 'active', format(now, 'yyyy-MM-dd'), user.uid, user.fullName, user.company
    ].join(',');

    const sampleRow2 = [
        'visitor', 'XYZ', '9876', 'Jane Smith (Visitor)', ''/*serial*/, ''/*ownerCompany*/, 'SEC 02', format(now, 'yyyy-MM-dd'), 'active', format(now, 'yyyy-MM-dd'), user.uid, user.fullName, user.company
    ].join(',');
    
    const csvContent = comments + header + sampleRow1 + '\n' + sampleRow2 + '\n';

    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
    const link = document.createElement("a");
    const url = URL.createObjectURL(blob);
    link.setAttribute("href", url);
    link.setAttribute("download", "sample-batch.csv");
    link.style.visibility = 'hidden';
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
  };


  const handleSubmit = async (event: React.FormEvent) => {
    event.preventDefault();
    if (!file || !user) {
      toast({
        variant: "destructive",
        title: "Upload Failed",
        description: "Please select a .csv file and ensure you are logged in.",
      });
      return;
    }
    setIsProcessing(true);
    
    const reader = new FileReader();
    reader.onload = async (e) => {
        const text = e.target?.result;
        if (typeof text !== 'string') {
            toast({ variant: "destructive", title: "Error", description: "Could not read the file." });
            setIsProcessing(false);
            return;
        }

        const lines = text.split('\n').filter(line => line.trim() && !line.trim().startsWith('#'));
        const header = lines.shift()?.trim().split(',') || [];
        const passesRef = collection(db, "passes");
        const batch = writeBatch(db);

        let successCount = 0;
        let errorCount = 0;

        for (const line of lines) {
            const values = line.trim().split(',');
            if (values.length !== header.length) {
                errorCount++;
                continue;
            }

            const entry = header.reduce((obj, key, index) => {
                obj[key.trim()] = values[index].trim();
                return obj;
            }, {} as Record<string, string>);

            try {
                const passType = entry.type?.toLowerCase();
                if (passType !== 'standard' && passType !== 'visitor') {
                  errorCount++;
                  continue;
                }

                const expiryDate = new Date(entry.expiresAt);
                
                // Create new document reference with auto-generated ID
                const newDocRef = doc(passesRef);
                
                // Build qrPayload using the generated document ID
                const qrPayload = buildQrPayload(
                  newDocRef.id, 
                  entry.plateAlpha.toUpperCase(), 
                  entry.plateNum, 
                  expiryDate
                );

                const newPass: Partial<Pass> = {
                    type: passType,
                    plateAlpha: entry.plateAlpha.toUpperCase(),
                    plateNum: entry.plateNum,
                    location: entry.location,
                    expiresAt: expiryDate,
                    status: entry.status as any,
                    createdAt: entry.createdAt ? new Date(entry.createdAt) : new Date(),
                    createdBy: entry.createdBy || user.uid,
                    createdByName: entry.createdByName || user.fullName,
                    createdByCompany: entry.createdByCompany || user.company,
                    qrPayload: qrPayload, // FIX: Add qrPayload to each pass
                };

                if (passType === 'standard') {
                    (newPass as any).ownerName = entry.ownerName;
                    (newPass as any).serial = entry.serial;
                    (newPass as any).ownerCompany = entry.ownerCompany;
                } else { // visitor
                    (newPass as any).visitorName = entry.ownerName; // Using ownerName for visitor name as per sample
                    (newPass as any).personToVisit = 'N/A'; // Placeholder as not in CSV
                    (newPass as any).purpose = 'N/A'; // Placeholder as not in CSV
                }
                
                batch.set(newDocRef, newPass);
                successCount++;

            } catch (parseError) {
                console.error("Error parsing line:", line, parseError);
                errorCount++;
            }
        }

        if (successCount > 0) {
            await batch.commit();
        }

        toast({
            title: "Batch Processing Complete",
            description: `${successCount} passes created successfully. ${errorCount} rows failed.`,
        });

        setIsProcessing(false);
        setFile(null);
        if(fileInputRef.current) {
            fileInputRef.current.value = "";
        }
    };

    reader.onerror = () => {
        toast({ variant: "destructive", title: "Error", description: "Failed to read the file."});
        setIsProcessing(false);
    }
    
    reader.readAsText(file);
  };

  return (
    <div className="space-y-6">
        <div className="rounded-lg border-2 border-dashed border-muted-foreground/30 p-8 text-center">
            <UploadCloud className="mx-auto h-12 w-12 text-muted-foreground" />
            <h3 className="mt-4 text-lg font-semibold text-foreground">Upload Batch File</h3>
            <p className="mt-2 text-sm text-muted-foreground">
                Download the sample .csv file to see the required format and columns.
            </p>
            <div className="mt-6 flex flex-col sm:flex-row items-center justify-center gap-4">
                 <Button type="button" variant="outline" onClick={handleDownloadSample}>
                    <Download className="mr-2 h-4 w-4" />
                    Download Sample .csv
                </Button>
                <Button type="button" onClick={() => fileInputRef.current?.click()}>
                    <FileUp className="mr-2 h-4 w-4" />
                    Choose File
                </Button>
                 <input 
                    ref={fileInputRef}
                    type="file"
                    className="hidden"
                    accept=".csv,text/csv"
                    onChange={handleFileChange}
                 />
            </div>
            {file && (
                <div className="mt-4 flex items-center justify-center gap-2 text-sm font-medium text-foreground">
                    <FileText className="h-4 w-4" />
                    <span>{file.name}</span>
                </div>
            )}
        </div>

        <Button onClick={handleSubmit} type="submit" disabled={!file || isProcessing} className="w-full text-base py-6">
            {isProcessing ? <Loader2 className="mr-2 h-5 w-5 animate-spin" /> : <FileUp className="mr-2 h-5 w-5" />}
            {isProcessing ? "Processing Batch File..." : "Process Batch File"}
        </Button>
    </div>
  );
}

========================================

FILE: src\components\tables\users-table.tsx

========================================


"use client";

import type { AppUser, Role } from "@/types";
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import { Badge } from "@/components/ui/badge";
import { UsersTableActions } from "./users-table-actions";
import { useAuth } from "@/hooks/use-auth";
import { Loader2 } from "lucide-react";
import { useData } from "@/context/data-provider";

export function UsersTable() {
  const { users, loading } = useData();
  const { user: currentUser } = useAuth();

  const getRoleBadgeClass = (role: Role) => {
    switch (role) {
      case "pending":
        return "bg-red-100 text-red-800 border-red-300 dark:bg-red-900 dark:text-red-200";
      case "user":
        return "bg-green-100 text-green-800 border-green-300 dark:bg-green-900 dark:text-green-200";
      case "admin":
        return "bg-blue-100 text-blue-800 border-blue-300 dark:bg-blue-900 dark:text-blue-200";
      case "owner":
        return "bg-purple-100 text-purple-800 border-purple-300 dark:bg-purple-900 dark:text-purple-200";
      case "rejected":
        return "bg-gray-100 text-gray-800 border-gray-300 dark:bg-gray-900 dark:text-gray-200";
      default:
        return "bg-gray-100 text-gray-800 border-gray-300";
    }
  };

  const displayUsers = users.filter(user => user.role !== 'owner');

  return (
    <div className="rounded-md border">
      <Table>
        <TableHeader>
          <TableRow>
            <TableHead>Full Name</TableHead>
            <TableHead>Email</TableHead>
            <TableHead>Company</TableHead>
            <TableHead>Role</TableHead>
            <TableHead>
              <span className="sr-only">Actions</span>
            </TableHead>
          </TableRow>
        </TableHeader>
        <TableBody>
          {loading ? (
            <TableRow>
              <TableCell colSpan={5} className="h-24 text-center">
                <Loader2 className="mx-auto h-6 w-6 animate-spin text-primary" />
              </TableCell>
            </TableRow>
          ) : displayUsers.length > 0 ? (
            displayUsers.map((user) => (
              <TableRow key={user.uid}>
                <TableCell className="font-medium">{user.fullName}</TableCell>
                <TableCell>{user.email}</TableCell>
                <TableCell>{user.company}</TableCell>
                <TableCell>
                  <Badge className={`capitalize ${getRoleBadgeClass(user.role)}`}>
                    {user.role}
                  </Badge>
                </TableCell>
                <TableCell>
                  {currentUser?.uid !== user.uid && user.role !== 'owner' && (
                    <UsersTableActions user={user} />
                  )}
                </TableCell>
              </TableRow>
            ))
          ) : (
            <TableRow>
              <TableCell colSpan={5} className="h-24 text-center">
                No users found.
              </TableCell>
            </TableRow>
          )}
        </TableBody>
      </Table>
    </div>
  );
}

========================================

FILE: src\components\tables\users-table-actions.tsx

========================================


"use client";

import { MoreHorizontal, Check, X, Shield, User, Mail } from "lucide-react";
import { Button } from "@/components/ui/button";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuSub,
  DropdownMenuSubContent,
  DropdownMenuSubTrigger,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import { doc, updateDoc, serverTimestamp } from "firebase/firestore";
import { db } from "@/lib/firestore";
import type { AppUser, Role } from "@/types";
import { useToast } from "@/hooks/use-toast";
import { useAuth } from "@/hooks/use-auth";
import { sendApprovalEmail } from "@/lib/email";

interface UsersTableActionsProps {
  user: AppUser;
}

export function UsersTableActions({ user: targetUser }: UsersTableActionsProps) {
  const { toast } = useToast();
  const { user: currentUser } = useAuth();
  
  const handleRoleChange = async (newRole: Role) => {
    if (currentUser?.uid === targetUser.uid) {
        toast({ 
          variant: "destructive", 
          title: "Error", 
          description: "You cannot change your own role."
        });
        return;
    }
    
    try {
      const userRef = doc(db, "users", targetUser.uid);
      
      // Update user role with approval metadata
      await updateDoc(userRef, { 
        role: newRole, 
        approvedBy: currentUser?.uid, 
        approvedAt: serverTimestamp() 
      });
      
      // Send email notification if user was approved from pending status
      if (targetUser.role === 'pending' && (newRole === 'user' || newRole === 'admin')) {
        // Send email asynchronously - don't wait for it
        sendApprovalEmail(
          targetUser.email,
          targetUser.fullName,
          newRole
        ).then((emailSent) => {
          if (emailSent) {
            console.log('✅ Approval email sent to:', targetUser.email);
          }
        }).catch((error) => {
          console.error('Email sending failed (non-critical):', error);
        });
      }
      
      // Show success message with different text based on action
      if (newRole === 'rejected') {
        toast({
          variant: "destructive",
          title: "User Rejected",
          description: `${targetUser.fullName}'s account has been rejected.`,
        });
      } else if (targetUser.role === 'pending') {
        toast({
          title: "✅ User Approved!",
          description: `${targetUser.fullName} has been approved as ${newRole}. They will receive an email notification.`,
          duration: 5000,
        });
      } else {
        toast({
          title: "Role Updated",
          description: `${targetUser.fullName}'s role has been changed to ${newRole}.`,
        });
      }
      
    } catch (error) {
      console.error("Error updating user role:", error);
      toast({
        variant: "destructive",
        title: "Error",
        description: "Failed to update user role. Please try again.",
      });
    }
  };

  return (
    <DropdownMenu>
      <DropdownMenuTrigger asChild>
        <Button variant="ghost" className="h-8 w-8 p-0">
          <span className="sr-only">Open menu</span>
          <MoreHorizontal className="h-4 w-4" />
        </Button>
      </DropdownMenuTrigger>
      <DropdownMenuContent align="end">
        <DropdownMenuLabel>Manage User</DropdownMenuLabel>
        <DropdownMenuSeparator />
        {targetUser.role === "pending" && (
            <>
                <DropdownMenuItem onClick={() => handleRoleChange('user')}>
                    <Check className="mr-2 h-4 w-4" />
                    Approve as User
                </DropdownMenuItem>
                <DropdownMenuItem onClick={() => handleRoleChange('admin')}>
                    <Shield className="mr-2 h-4 w-4" />
                    Approve as Admin
                </DropdownMenuItem>
                <DropdownMenuSeparator />
                <DropdownMenuItem 
                  onClick={() => handleRoleChange('rejected')} 
                  className="text-destructive focus:text-destructive"
                >
                    <X className="mr-2 h-4 w-4" />
                    Reject
                </DropdownMenuItem>
            </>
        )}
        {targetUser.role !== 'pending' && targetUser.role !== 'owner' && (
             <DropdownMenuSub>
                <DropdownMenuSubTrigger>
                    {targetUser.role === 'admin' ? <Shield className="mr-2 h-4 w-4" /> : <User className="mr-2 h-4 w-4" />}
                    <span>Change Role</span>
                </DropdownMenuSubTrigger>
                <DropdownMenuSubContent>
                    <DropdownMenuItem 
                      onClick={() => handleRoleChange('user')} 
                      disabled={targetUser.role === 'user'}
                    >
                        <User className="mr-2 h-4 w-4" />
                        User
                    </DropdownMenuItem>
                    <DropdownMenuItem 
                      onClick={() => handleRoleChange('admin')} 
                      disabled={targetUser.role === 'admin'}
                    >
                        <Shield className="mr-2 h-4 w-4" />
                        Admin
                    </DropdownMenuItem>
                    <DropdownMenuSeparator />
                    <DropdownMenuItem 
                      onClick={() => handleRoleChange('rejected')}
                      className="text-destructive focus:text-destructive"
                    >
                        <X className="mr-2 h-4 w-4" />
                        Revoke Access
                    </DropdownMenuItem>
                </DropdownMenuSubContent>
             </DropdownMenuSub>
        )}
      </DropdownMenuContent>
    </DropdownMenu>
  );
}

========================================

FILE: src\components\tables\records-table.tsx

========================================


"use client";

import { useState, useMemo } from "react";
import type { Pass, PassStatus } from "@/types";
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import { Button } from "@/components/ui/button";
import { format } from "date-fns";
import { Badge } from "@/components/ui/badge";
import { RecordsTableActions } from "./records-table-actions";
import { Input } from "../ui/input";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "../ui/select";
import { Popover, PopoverContent, PopoverTrigger } from "../ui/popover";
import { Calendar } from "../ui/calendar";
import { CalendarIcon, Loader2 } from "lucide-react";
import { cn } from "@/lib/utils";
import { useData } from "@/context/data-provider";
import { Checkbox } from "@/components/ui/checkbox";

const PAGE_SIZE = 10;

export function RecordsTable() {
  const { passes: allPasses, users, loading: dataLoading } = useData();
  const [currentPage, setCurrentPage] = useState(1);
  const [rowSelection, setRowSelection] = useState<Record<string, boolean>>({});
  const [filters, setFilters] = useState({
    company: "",
    status: "all",
    createdAt: undefined as Date | undefined,
    expiresAt: undefined as Date | undefined,
  });

  const filteredPasses = useMemo(() => {
    return allPasses.filter(pass => {
      if (filters.status !== 'all' && pass.status !== filters.status) return false;
      
      const companyMatch = pass.type === 'standard' ? pass.ownerCompany : pass.createdByCompany;
      if (filters.company && !companyMatch?.toLowerCase().includes(filters.company.toLowerCase())) return false;
      
      if (filters.createdAt && pass.createdAt.toDate() < filters.createdAt) return false;
      if (filters.expiresAt && pass.expiresAt.toDate() > filters.expiresAt) return false;

      return true;
    })
  }, [allPasses, filters]);

  const paginatedPasses = useMemo(() => {
    const start = (currentPage - 1) * PAGE_SIZE;
    const end = start + PAGE_SIZE;
    return filteredPasses.slice(start, end);
  }, [filteredPasses, currentPage]);
  
  const hasMore = useMemo(() => {
    return currentPage * PAGE_SIZE < filteredPasses.length;
  }, [currentPage, filteredPasses]);


  const handleFilterChange = (key: keyof typeof filters, value: any) => {
      setCurrentPage(1);
      setFilters(prev => ({...prev, [key]: value}));
  }
  
  const handleSelectAll = (checked: boolean | 'indeterminate') => {
    const newSelection: Record<string, boolean> = {};
    if (checked === true) {
      paginatedPasses.forEach(pass => {
        newSelection[pass.id] = true;
      });
    }
    setRowSelection(newSelection);
  };

  const handleRowSelect = (passId: string, checked: boolean | 'indeterminate') => {
    setRowSelection(prev => ({
      ...prev,
      [passId]: checked === true,
    }));
  };

  const isAllVisibleSelected = paginatedPasses.length > 0 && paginatedPasses.every(pass => rowSelection[pass.id]);

  const getStatusVariant = (status: PassStatus) => {
    switch (status) {
      case "active":
        return "default";
      case "expired":
        return "secondary";
      case "revoked":
        return "destructive";
      default:
        return "outline";
    }
  };

  return (
    <div className="space-y-4">
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
            <Input 
                placeholder="Filter by company..."
                value={filters.company}
                onChange={(e) => handleFilterChange('company', e.target.value)}
            />
            <Select value={filters.status} onValueChange={(value) => handleFilterChange('status', value)}>
                <SelectTrigger>
                    <SelectValue placeholder="Filter by status..." />
                </SelectTrigger>
                <SelectContent>
                    <SelectItem value="all">All Statuses</SelectItem>
                    <SelectItem value="active">Active</SelectItem>
                    <SelectItem value="expired">Expired</SelectItem>
                    <SelectItem value="revoked">Revoked</SelectItem>
                </SelectContent>
            </Select>
            <Popover>
                <PopoverTrigger asChild>
                <Button variant={"outline"} className={cn("justify-start text-left font-normal", !filters.createdAt && "text-muted-foreground")}>
                    <CalendarIcon className="mr-2 h-4 w-4" />
                    {filters.createdAt ? format(filters.createdAt, "PPP") : <span>Created after...</span>}
                </Button>
                </PopoverTrigger>
                <PopoverContent className="w-auto p-0">
                <Calendar mode="single" selected={filters.createdAt} onSelect={(d) => handleFilterChange('createdAt', d)} initialFocus />
                </PopoverContent>
            </Popover>
            <Popover>
                <PopoverTrigger asChild>
                <Button variant={"outline"} className={cn("justify-start text-left font-normal", !filters.expiresAt && "text-muted-foreground")}>
                    <CalendarIcon className="mr-2 h-4 w-4" />
                    {filters.expiresAt ? format(filters.expiresAt, "PPP") : <span>Expires before...</span>}
                </Button>
                </PopoverTrigger>
                <PopoverContent className="w-auto p-0">
                <Calendar mode="single" selected={filters.expiresAt} onSelect={(d) => handleFilterChange('expiresAt', d)} initialFocus />
                </PopoverContent>
            </Popover>
        </div>
      <div className="rounded-md border">
        <Table>
          <TableHeader>
            <TableRow>
              <TableHead className="w-[40px]">
                <Checkbox
                  checked={isAllVisibleSelected}
                  onCheckedChange={handleSelectAll}
                  aria-label="Select all"
                />
              </TableHead>
              <TableHead>Plate</TableHead>
              <TableHead>Owner / Visitor</TableHead>
              <TableHead>Company</TableHead>
              <TableHead>Status</TableHead>
              <TableHead>Expires At</TableHead>
              <TableHead>Created By</TableHead>
              <TableHead>
                <span className="sr-only">Actions</span>
              </TableHead>
            </TableRow>
          </TableHeader>
          <TableBody>
            {dataLoading ? (
              <TableRow>
                <TableCell colSpan={8} className="h-24 text-center">
                  <Loader2 className="mx-auto h-6 w-6 animate-spin text-primary" />
                </TableCell>
              </TableRow>
            ) : paginatedPasses.length > 0 ? (
              paginatedPasses.map((pass) => {
                const creator = users.find(u => u.uid === pass.createdBy);
                return (
                  <TableRow key={pass.id} data-state={rowSelection[pass.id] && 'selected'}>
                    <TableCell>
                      <Checkbox
                        checked={rowSelection[pass.id] || false}
                        onCheckedChange={(checked) => handleRowSelect(pass.id, checked)}
                        aria-label="Select row"
                      />
                    </TableCell>
                    <TableCell className="font-medium">
                      {pass.plateAlpha}-{pass.plateNum}
                    </TableCell>
                    <TableCell>
                      {pass.type === "standard" ? pass.ownerName : pass.visitorName}
                    </TableCell>
                    <TableCell>
                      {pass.type === "standard" ? pass.ownerCompany : pass.createdByCompany}
                    </TableCell>
                    <TableCell>
                      <Badge variant={getStatusVariant(pass.status)}>{pass.status}</Badge>
                    </TableCell>
                    <TableCell>
                      {format(pass.expiresAt.toDate(), "PP")}
                    </TableCell>
                    <TableCell>
                      {creator?.fullName || "N/A"}
                    </TableCell>
                    <TableCell>
                      <RecordsTableActions pass={pass} />
                    </TableCell>
                  </TableRow>
                )
              })
            ) : (
              <TableRow>
                <TableCell colSpan={8} className="h-24 text-center">
                  No passes found.
                </TableCell>
              </TableRow>
            )}
          </TableBody>
        </Table>
      </div>
      {hasMore && (
        <div className="text-center">
          <Button onClick={() => setCurrentPage(p => p + 1)} >
            Load More
          </Button>
        </div>
      )}
    </div>
  );
}

========================================

FILE: src\components\verifier\manual-search.tsx

========================================


"use client";

import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import * as z from "zod";
import { useState } from "react";
import { collection, query, where, limit, getDocs } from "firebase/firestore";
import { db, passConverter } from "@/lib/firestore";
import type { Pass } from "@/types";
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { Loader2, Search } from "lucide-react";
import PassDetails from "./pass-details";
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from "@/components/ui/dialog";

const formSchema = z.object({
  plateAlpha: z.string().min(1, "Required").max(4, "Max 4 chars").regex(/^[a-zA-Z]+$/, "Only letters allowed"),
  plateNum: z.string().min(1, "Required").max(5, "Max 5 digits").regex(/^\d+$/, "Only numbers"),
});

interface ManualSearchProps {
    isAdminSearch?: boolean;
}

export default function ManualSearch({ isAdminSearch = false }: ManualSearchProps) {
  const [isLoading, setIsLoading] = useState(false);
  const [passResult, setPassResult] = useState<Pass | "not_found" | null>(null);

  const form = useForm<z.infer<typeof formSchema>>({
    resolver: zodResolver(formSchema),
    defaultValues: { plateAlpha: "", plateNum: "" },
  });

  async function onSubmit(values: z.infer<typeof formSchema>) {
    setIsLoading(true);
    setPassResult(null);

    try {
      const q = query(
        collection(db, "passes"),
        where("plateAlpha", "==", values.plateAlpha.toUpperCase()),
        where("plateNum", "==", values.plateNum),
        ...(!isAdminSearch ? [where("status", "==", "active")] : []),
        limit(1)
      ).withConverter(passConverter);

      const querySnapshot = await getDocs(q);

      if (querySnapshot.empty) {
        setPassResult("not_found");
      } else {
        const pass = querySnapshot.docs[0].data();
        setPassResult(pass);
      }
    } catch (error) {
      console.error("Error searching for pass:", error);
      setPassResult("not_found");
    } finally {
      setIsLoading(false);
    }
  }

  const handleReset = () => {
    form.reset();
    setPassResult(null);
  }

  return (
    <div className="space-y-6">
      <Form {...form}>
        <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4">
          <div className="grid grid-cols-2 gap-4">
            <FormField
              control={form.control}
              name="plateAlpha"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Plate Alpha</FormLabel>
                  <FormControl>
                    <Input placeholder="ABC" {...field} style={{textTransform: 'uppercase'}} />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            <FormField
              control={form.control}
              name="plateNum"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Plate Number</FormLabel>
                  <FormControl>
                    <Input placeholder="1234" {...field} />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
          </div>
          <div className="flex gap-2">
            <Button type="submit" disabled={isLoading} className="flex-1">
              {isLoading ? (
                <Loader2 className="mr-2 h-4 w-4 animate-spin" />
              ) : (
                <Search className="mr-2 h-4 w-4" />
              )}
              Search
            </Button>
            <Button type="button" variant="destructive" onClick={handleReset} className="flex-1">
                Reset
            </Button>
          </div>
        </form>
      </Form>
      
      {isLoading && (
          <div className="flex justify-center p-8">
              <Loader2 className="h-8 w-8 animate-spin text-primary"/>
          </div>
      )}

      <Dialog open={!!passResult} onOpenChange={(open) => !open && setPassResult(null)}>
        <DialogContent>
          <DialogHeader>
            <DialogTitle>Verification Result</DialogTitle>
            <DialogDescription>
              The access status for the scanned pass is shown below.
            </DialogDescription>
          </DialogHeader>
          {passResult && <PassDetails pass={passResult} isAdminSearch={isAdminSearch} />}
        </DialogContent>
      </Dialog>
    </div>
  );
}

========================================

FILE: src\components\verifier\qr-scanner.tsx

========================================


"use client";

import { useEffect, useRef, useState } from "react";
import { Html5Qrcode } from "html5-qrcode";

interface QrScannerProps {
  onScanSuccess: (decodedText: string) => void;
  onScanError?: (error: string) => void;
}

export default function QrScanner({ onScanSuccess, onScanError }: QrScannerProps) {
  const [isScanning, setIsScanning] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const scannerRef = useRef<Html5Qrcode | null>(null);
  const qrCodeRegionId = "qr-reader";

  useEffect(() => {
    const startScanner = async () => {
      try {
        setIsScanning(true);
        setError(null);

        // Initialize scanner
        scannerRef.current = new Html5Qrcode(qrCodeRegionId);

        // Start scanning
        await scannerRef.current.start(
          { facingMode: "environment" }, // Use back camera
          {
            fps: 10,
            qrbox: { width: 250, height: 250 },
          },
          (decodedText) => {
            console.log("QR Code scanned:", decodedText);
            onScanSuccess(decodedText);
          },
          (errorMessage) => {
            // Ignore continuous scan errors
          }
        );
      } catch (err: any) {
        const errorMsg = err?.message || "Failed to access camera";
        console.error("Scanner error:", errorMsg);
        setError(errorMsg);
        if (onScanError) onScanError(errorMsg);
      }
    };

    startScanner();

    // Cleanup on unmount
    return () => {
      if (scannerRef.current) {
        scannerRef.current.stop().catch(console.error);
      }
    };
  }, [onScanSuccess, onScanError]);

  return (
    <div className="space-y-4">
      <div id={qrCodeRegionId} className="w-full" />
      
      {error && (
        <div className="bg-red-50 text-red-600 p-4 rounded-lg">
          <p className="font-semibold">Camera Error</p>
          <p className="text-sm">{error}</p>
          <p className="text-sm mt-2">Please allow camera access in your browser settings.</p>
        </div>
      )}

      {isScanning && !error && (
        <p className="text-center text-sm text-gray-600">
          Point your camera at the QR code
        </p>
      )}
    </div>
  );
}

========================================

FILE: src\components\verifier\pass-details.tsx

========================================



"use client";

import { Card, CardContent, CardHeader, CardTitle, CardDescription } from "@/components/ui/card";
import { CheckCircle2, XCircle, Clock, ShieldQuestion } from "lucide-react";
import type { Pass } from "@/types";
import { format } from "date-fns";
import Image from "next/image";
import { useEffect } from "react";

interface PassDetailsProps {
  pass: Pass | "not_found";
  isAdminSearch?: boolean;
}

export default function PassDetails({ pass, isAdminSearch = false }: PassDetailsProps) {
  const isPassObject = pass !== "not_found";
  const isExpired = isPassObject && pass.expiresAt.toDate() < new Date();
  const isAllowed = isPassObject && pass.status === "active" && !isExpired;

useEffect(() => {
  if (isAdminSearch) return;

  let audio: HTMLAudioElement | null = null;
  let isCleaningUp = false;

  if (isPassObject) {
    audio = new Audio(isAllowed ? '/success.mp3' : '/denied.mp3');
    
    const playPromise = audio.play();
    if (playPromise !== undefined) {
      playPromise
        .then(() => {
          // Audio started playing successfully
        })
        .catch(error => {
          // Silently handle autoplay restrictions
          if (error.name !== 'AbortError') {
            console.log("Audio playback blocked by browser");
          }
        });
    }
  }

  return () => {
    isCleaningUp = true;
    if (audio) {
      audio.pause();
      audio.src = ''; // Release resources
      audio = null;
    }
  };
}, [pass, isAllowed, isAdminSearch, isPassObject]);

  if (pass === "not_found") {
    return (
       <Card className="border-red-500 bg-red-50 dark:bg-red-950/50">
        <CardHeader>
            <div className="flex items-center justify-between gap-3">
                <div>
                    <CardTitle className="text-red-700 dark:text-red-400">Pass Not Found</CardTitle>
                    <CardDescription className="text-red-600 dark:text-red-400/80">
                        No active pass found for this plate number. Please check the details and try again.
                    </CardDescription>
                </div>
                {!isAdminSearch && <Image src="/Closing Gate.gif" alt="Access Denied" width={96} height={96} unoptimized />}
            </div>
        </CardHeader>
      </Card>
    );
  }
  
  if (!isAdminSearch && !isAllowed) {
     return (
       <Card className="border-red-500 bg-red-50 dark:bg-red-950/50">
        <CardHeader>
            <div className="flex items-center justify-between gap-3">
                <div>
                    <CardTitle className="text-red-700 dark:text-red-400">Access Denied</CardTitle>
                    <CardDescription className="text-red-600 dark:text-red-400/80">
                        This pass is not currently active or has expired.
                    </CardDescription>
                </div>
                {!isAdminSearch && <Image src="/Closing Gate.gif" alt="Access Denied" width={96} height={96} unoptimized />}
            </div>
        </CardHeader>
      </Card>
    );
  }

  const getStatusInfo = () => {
    if (isAllowed) {
        return { variant: "default", icon: CheckCircle2, title: "Access Granted", message: "This pass is valid for entry." };
    }
    if (isExpired) {
        return { variant: "destructive", icon: Clock, title: "Access Denied: Expired", message: "This pass has expired." };
    }
    if (pass.status === "revoked") {
        return { variant: "destructive", icon: XCircle, title: "Access Denied: Revoked", message: "This pass has been revoked." };
    }
    return { variant: "destructive", icon: ShieldQuestion, title: "Status Unknown", message: "Pass status could not be determined." };
  }

  const statusInfo = getStatusInfo();

  return (
    <Card className={isAllowed ? "border-green-500 bg-green-50 dark:bg-green-950/50" : "border-red-500 bg-red-50 dark:bg-red-950/50"}>
       <CardHeader>
        <div className="flex items-center justify-between gap-3">
            <div>
                 <CardTitle className={isAllowed ? 'text-green-700 dark:text-green-400' : 'text-red-700 dark:text-red-400'}>{statusInfo.title}</CardTitle>
                 <CardDescription className={isAllowed ? 'text-green-600 dark:text-green-400/80' : 'text-red-600 dark:text-red-400/80'}>{statusInfo.message}</CardDescription>
            </div>
            {!isAdminSearch && isAllowed && (
                <Image src="/Opening Gate.gif" alt="Access Granted" width={96} height={96} unoptimized />
            )}
            {!isAdminSearch && !isAllowed && (
                <Image src="/Closing Gate.gif" alt="Access Denied" width={96} height={96} unoptimized />
            )}
        </div>
      </CardHeader>
      <CardContent className="space-y-4">
        <div className="space-y-2 text-sm">
            <div className="flex justify-between">
                <span className="font-semibold text-muted-foreground">Plate:</span>
                <span className="font-mono font-bold">{pass.plateAlpha}-{pass.plateNum}</span>
            </div>
             <div className="flex justify-between">
                <span className="font-semibold text-muted-foreground">Type:</span>
                <span className="capitalize">{pass.type}</span>
            </div>
            {pass.type === "standard" && (
                <>
                    <div className="flex justify-between">
                        <span className="font-semibold text-muted-foreground">Owner:</span>
                        <span>{pass.ownerName}</span>
                    </div>
                     <div className="flex justify-between">
                        <span className="font-semibold text-muted-foreground">Company:</span>
                        <span>{pass.ownerCompany}</span>
                    </div>
                </>
            )}
            {pass.type === "visitor" && (
                <>
                     <div className="flex justify-between">
                        <span className="font-semibold text-muted-foreground">Visitor:</span>
                        <span>{pass.visitorName}</span>
                    </div>
                     <div className="flex justify-between">
                        <span className="font-semibold text-muted-foreground">Purpose:</span>
                        <span>{pass.purpose}</span>
                    </div>
                </>
            )}
             <div className="flex justify-between">
                <span className="font-semibold text-muted-foreground">Location:</span>
                <span>{pass.location}</span>
            </div>
             <div className="flex justify-between">
                <span className="font-semibold text-muted-foreground">Expires At:</span>
                <span>{format(pass.expiresAt.toDate(), "PPP p")}</span>
            </div>
        </div>
      </CardContent>
    </Card>
  );
}

========================================

FILE: src\components\dashboard\sidebar-nav.tsx

========================================


"use client";

import Link from "next/link";
import { usePathname } from "next/navigation";
import {
  ListOrdered,
  PlusCircle,
  Search,
  BarChart2,
  Users,
  ShieldCheck,
  LogOut,
  ChevronDown,
  LayoutDashboard,
  ShieldAlert,
} from "lucide-react";
import { useAuth } from "@/hooks/use-auth";
import { Button } from "../ui/button";
import RoleGate from "../auth/role-gate";
import { Collapsible, CollapsibleContent, CollapsibleTrigger } from "@/components/ui/collapsible";
import { useState } from "react";
import { cn } from "@/lib/utils";
import { Avatar, AvatarFallback } from "../ui/avatar";

const navItems = [
  { href: "/admin/dashboard/generate", label: "Generate Pass", icon: PlusCircle },
  { href: "/admin/dashboard/records", label: "All Pass Records", icon: ListOrdered },
  { href: "/admin/dashboard/search", label: "Pass Search", icon: Search },
  { href: "/admin/dashboard/statistics", label: "Pass Statistics", icon: BarChart2 },
  {
    href: "/admin/dashboard/users",
    label: "Manage Users",
    icon: Users,
    roles: ["admin", "owner"],
  },
];

export default function SidebarNav() {
  const pathname = usePathname();
  const { user, handleSignOut } = useAuth();
  const [isOpen, setIsOpen] = useState(true);
  
  const getInitials = (name: string) => {
    const names = name.split(' ');
    if (names.length > 1) {
        return `${names[0][0]}${names[names.length - 1][0]}`.toUpperCase();
    }
    return name.substring(0, 2).toUpperCase();
  }

  return (
    <div className="flex flex-col h-full">
      <div className="border-b p-4">
        <div className="flex items-center gap-2">
            <ShieldCheck className="w-8 h-8 text-primary" />
            <div>
                <p className="font-headline text-lg font-semibold">Guardian</p>
            </div>
        </div>
      </div>
      <div className="p-4 border-b">
         <p className="text-sm text-muted-foreground">Welcome, {user?.fullName}</p>
      </div>
      <nav className="flex-1 space-y-1 p-4">
        <Link href="/verifier">
          <button
            className={`w-full text-left rounded-md px-3 py-2 transition-colors flex items-center gap-3 font-medium text-muted-foreground hover:text-foreground hover:bg-muted`}
          >
            <ShieldAlert className="h-4 w-4" />
            <span>Verifier</span>
          </button>
        </Link>

        <Collapsible open={isOpen} onOpenChange={setIsOpen} className="space-y-2">
          <CollapsibleTrigger asChild>
             <Button variant="ghost" className="w-full justify-between">
                <div className="flex items-center gap-3">
                    <LayoutDashboard className="h-4 w-4" />
                    <span>Admin Dashboard</span>
                </div>
                <ChevronDown className={cn("h-4 w-4 transition-transform", isOpen && "rotate-180")} />
            </Button>
          </CollapsibleTrigger>
          <CollapsibleContent className="space-y-1 pl-4">
            {navItems.map((item) => {
                const isActive = pathname.startsWith(item.href);
                const linkContent = (
                   <Link key={item.href} href={item.href}>
                    <button
                      className={`w-full text-left rounded-md px-3 py-2 transition-colors flex items-center gap-3 ${
                        isActive
                          ? "bg-primary text-primary-foreground"
                          : "hover:bg-muted"
                      }`}
                    >
                      <item.icon className="h-4 w-4" />
                      <span>{item.label}</span>
                    </button>
                  </Link>
                );

                if (item.roles) {
                  return <RoleGate key={item.href} allowedRoles={item.roles as any}>{linkContent}</RoleGate>;
                }
                return linkContent;
            })}
          </CollapsibleContent>
        </Collapsible>
      </nav>
      <div className="p-4 border-t mt-auto">
          <Button variant="ghost" onClick={handleSignOut} className="w-full justify-start">
            {user && (
                <Avatar className="h-6 w-6 mr-2">
                    <AvatarFallback className="text-xs">{getInitials(user.fullName)}</AvatarFallback>
                </Avatar>
            )}
            <LogOut className="mr-2 h-4 w-4" />
            Logout
          </Button>
      </div>
    </div>
  );
}

========================================

FILE: src\components\dashboard\header.tsx

========================================


"use client";

import { UserNav } from "./user-nav";
import Link from "next/link";
import { ShieldAlert } from "lucide-react";
import RoleGate from "../auth/role-gate";

export function Header() {
  return (
    <header className="sticky top-0 z-10 flex h-16 items-center gap-4 border-b bg-background/80 px-4 backdrop-blur-sm md:px-6">
       <div className="flex items-center gap-2">
         
       </div>
      <div className="ml-auto flex items-center gap-4">
        <UserNav />
      </div>
    </header>
  );
}

========================================

FILE: src\components\dashboard\user-nav.tsx

========================================


"use client";

import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { Button } from "@/components/ui/button";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuGroup,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import { useAuth } from "@/hooks/use-auth";
import { LogOut, User as UserIcon } from "lucide-react";

export function UserNav() {
  const { user, handleSignOut } = useAuth();

  if (!user) return null;

  const getInitials = (name: string) => {
    const names = name.split(' ');
    if (names.length > 1) {
        return `${names[0][0]}${names[names.length - 1][0]}`.toUpperCase();
    }
    return name.substring(0, 2).toUpperCase();
  }

  return (
    <DropdownMenu>
      <DropdownMenuTrigger asChild>
        <Button variant="ghost" className="relative h-8 w-8 rounded-full">
          <Avatar className="h-8 w-8">
            <AvatarFallback>{getInitials(user.fullName)}</AvatarFallback>
          </Avatar>
        </Button>
      </DropdownMenuTrigger>
      <DropdownMenuContent className="w-56" align="end" forceMount>
        <DropdownMenuLabel className="font-normal">
          <div className="flex flex-col space-y-1">
            <p className="text-sm font-medium leading-none">{user.fullName}</p>
            <p className="text-xs leading-none text-muted-foreground">
              {user.email}
            </p>
          </div>
        </DropdownMenuLabel>
        <DropdownMenuSeparator />
        <DropdownMenuGroup>
          <DropdownMenuItem>
            <UserIcon className="mr-2 h-4 w-4" />
            <span>Profile</span>
          </DropdownMenuItem>
        </DropdownMenuGroup>
        <DropdownMenuSeparator />
        <DropdownMenuItem onClick={handleSignOut}>
          <LogOut className="mr-2 h-4 w-4" />
          <span>Log out</span>
        </DropdownMenuItem>
      </DropdownMenuContent>
    </DropdownMenu>
  );
}

========================================

FILE: src\app\admin\layout.tsx

========================================


import type { ReactNode } from "react";
import AuthGate from "@/components/auth/auth-gate";
import { AuthProvider } from "@/context/auth-provider";
import { Toaster } from "@/components/ui/toaster";
import { DataProvider } from "@/context/data-provider";
import SidebarNav from "@/components/dashboard/sidebar-nav";
import { Header } from "@/components/dashboard/header";

export default function AdminLayout({ children }: { children: ReactNode }) {
  return (
    <AuthProvider>
      <AuthGate>
        <DataProvider>
          <div className="flex h-screen bg-background">
            <aside className="w-72 border-r bg-background flex flex-col">
              <SidebarNav />
            </aside>
            <div className="flex flex-col flex-1">
              <Header />
              <main className="flex-1 overflow-y-auto p-4 sm:p-6 lg:p-8">
                {children}
              </main>
            </div>
          </div>
        </DataProvider>
      </AuthGate>
      <Toaster />
    </AuthProvider>
  );
}

========================================

FILE: src\app\admin\dashboard\statistics\page.tsx

========================================


import { Suspense } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { PassesByMonthChart } from '@/components/charts/passes-by-month-chart';
import { PassesStatusPieChart } from '@/components/charts/passes-status-pie-chart';
import { PassesByLocationChart } from '@/components/charts/passes-by-location-chart';
import { PassesByCompanyChart } from '@/components/charts/passes-by-company-chart';
import { BarChart, PieChart, Building, MapPin } from 'lucide-react';
import { UsageInsights } from '@/components/charts/usage-insights';

export default function StatisticsPage() {
  return (
    <div className="space-y-6">
      <div>
        <h1 className="font-headline text-3xl font-bold">Pass Statistics</h1>
        <p className="text-muted-foreground">
          Visualize pass data and gain insights into usage patterns.
        </p>
      </div>

      <Suspense fallback={<p>Loading insights...</p>}>
        <UsageInsights />
      </Suspense>

      <div className="grid gap-6 md:grid-cols-2 lg:grid-cols-2 xl:grid-cols-4">
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center justify-between text-lg">
              Passes by Month <BarChart className="h-5 w-5 text-muted-foreground" />
            </CardTitle>
          </CardHeader>
          <CardContent>
            <Suspense fallback={<div className="h-[250px] w-full animate-pulse rounded-md bg-muted" />}>
              <PassesByMonthChart />
            </Suspense>
          </CardContent>
        </Card>
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center justify-between text-lg">
              Pass Status <PieChart className="h-5 w-5 text-muted-foreground" />
            </CardTitle>
          </CardHeader>
          <CardContent>
            <Suspense fallback={<div className="h-[250px] w-full animate-pulse rounded-md bg-muted" />}>
              <PassesStatusPieChart />
            </Suspense>
          </CardContent>
        </Card>
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center justify-between text-lg">
              Passes by Company <Building className="h-5 w-5 text-muted-foreground" />
            </CardTitle>
          </CardHeader>
          <CardContent>
             <Suspense fallback={<div className="h-[250px] w-full animate-pulse rounded-md bg-muted" />}>
              <PassesByCompanyChart />
            </Suspense>
          </CardContent>
        </Card>
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center justify-between text-lg">
              Passes by Location <MapPin className="h-5 w-5 text-muted-foreground" />
            </CardTitle>
          </CardHeader>
          <CardContent>
             <Suspense fallback={<div className="h-[250px] w-full animate-pulse rounded-md bg-muted" />}>
              <PassesByLocationChart />
            </Suspense>
          </CardContent>
        </Card>
      </div>
    </div>
  );
}

========================================

FILE: src\app\admin\dashboard\search\page.tsx

========================================


import ManualSearch from "@/components/verifier/manual-search";

export default function SearchPage() {
  return (
    <div className="space-y-6">
       <div>
        <h1 className="font-headline text-3xl font-bold">Pass Search</h1>
        <p className="text-muted-foreground">
          Quickly find a pass by its plate number.
        </p>
      </div>
      <ManualSearch isAdminSearch={true} />
    </div>
  );
}

========================================

FILE: src\app\admin\dashboard\records\page.tsx

========================================


import { RecordsTable } from "@/components/tables/records-table";

export default function RecordsPage() {
  return (
    <div className="space-y-6">
      <div>
        <h1 className="font-headline text-3xl font-bold">All Pass Records</h1>
        <p className="text-muted-foreground">
          Browse, search, and manage all existing gate passes.
        </p>
      </div>
      <RecordsTable />
    </div>
  );
}
