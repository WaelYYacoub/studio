====================================================================================================
FILE: ai\dev.ts
SIZE: 0.1 KB
====================================================================================================
import { config } from 'dotenv';
config();

import '@/ai/flows/generate-pass-usage-insights.ts';




====================================================================================================
FILE: ai\genkit.ts
SIZE: 0.17 KB
====================================================================================================
import {genkit} from 'genkit';
import {googleAI} from '@genkit-ai/googleai';

export const ai = genkit({
  plugins: [googleAI()],
  model: 'googleai/gemini-2.5-flash',
});




====================================================================================================
FILE: ai\flows\generate-pass-usage-insights.ts
SIZE: 2.42 KB
====================================================================================================
'use server';
/**
 * @fileOverview An AI agent for generating insights on pass usage data.
 *
 * - generatePassUsageInsights - A function that generates insights on pass usage data.
 * - GeneratePassUsageInsightsInput - The input type for the generatePassUsageInsights function.
 * - GeneratePassUsageInsightsOutput - The return type for the generatePassUsageInsights function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const GeneratePassUsageInsightsInputSchema = z.object({
  passData: z.string().describe('JSON string array of pass data for analysis.'),
});
export type GeneratePassUsageInsightsInput = z.infer<typeof GeneratePassUsageInsightsInputSchema>;

const GeneratePassUsageInsightsOutputSchema = z.object({
  insights: z.string().describe('Insights on pass usage data including peak times, common visitors, and potential security risks.'),
});
export type GeneratePassUsageInsightsOutput = z.infer<typeof GeneratePassUsageInsightsOutputSchema>;

export async function generatePassUsageInsights(input: GeneratePassUsageInsightsInput): Promise<GeneratePassUsageInsightsOutput> {
  return generatePassUsageInsightsFlow(input);
}

const prompt = ai.definePrompt({
  name: 'generatePassUsageInsightsPrompt',
  input: {schema: GeneratePassUsageInsightsInputSchema},
  output: {schema: GeneratePassUsageInsightsOutputSchema},
  prompt: `You are an AI assistant specialized in analyzing gate pass data to identify usage patterns, peak times, common visitors, and potential security risks.

  Analyze the following pass data and generate insights that can help optimize resource allocation and improve overall security measures. The pass data will be provided as a stringified JSON array.

  Pass Data: {{{passData}}}

  Provide a detailed analysis covering:
  - Peak usage times and days of the week.
  - Most frequent visitors or visitor types (if visitor data is available).
  - Potential security risks based on the data, such as unusual access patterns or expired passes still in use.

  Focus on actionable insights that can be implemented to enhance security and efficiency.`, 
});

const generatePassUsageInsightsFlow = ai.defineFlow(
  {
    name: 'generatePassUsageInsightsFlow',
    inputSchema: GeneratePassUsageInsightsInputSchema,
    outputSchema: GeneratePassUsageInsightsOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);




====================================================================================================
FILE: app\globals.css
SIZE: 1.99 KB
====================================================================================================
@tailwind base;
@tailwind components;
@tailwind utilities;

body {
  font-family: Arial, Helvetica, sans-serif;
}

@layer base {
  :root {
    --background: 262 80% 98%;
    --foreground: 262 25% 15%;
    --card: 262 80% 98%;
    --card-foreground: 262 25% 15%;
    --popover: 262 80% 98%;
    --popover-foreground: 262 25% 15%;
    --primary: 262 52% 47%;
    --primary-foreground: 0 0% 100%;
    --secondary: 261 35% 89%;
    --secondary-foreground: 262 35% 30%;
    --muted: 262 60% 94%;
    --muted-foreground: 262 25% 45%;
    --accent: 231 48% 51%;
    --accent-foreground: 0 0% 100%;
    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 0 0% 98%;
    --border: 262 40% 85%;
    --input: 262 60% 94%;
    --ring: 262 52% 47%;
    --chart-1: 262 52% 47%;
    --chart-2: 231 48% 51%;
    --chart-3: 262 40% 67%;
    --chart-4: 231 38% 71%;
    --chart-5: 262 30% 57%;
    --radius: 0.5rem;
  }
  .dark {
    --background: 262 20% 10%;
    --foreground: 262 40% 95%;
    --card: 262 20% 10%;
    --card-foreground: 262 40% 95%;
    --popover: 262 20% 10%;
    --popover-foreground: 262 40% 95%;
    --primary: 262 62% 57%;
    --primary-foreground: 262 20% 10%;
    --secondary: 262 20% 20%;
    --secondary-foreground: 262 40% 95%;
    --muted: 262 20% 15%;
    --muted-foreground: 262 40% 60%;
    --accent: 231 58% 61%;
    --accent-foreground: 231 20% 10%;
    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 0 0% 98%;
    --border: 262 20% 25%;
    --input: 262 20% 20%;
    --ring: 262 62% 57%;
    --chart-1: 262 62% 57%;
    --chart-2: 231 58% 61%;
    --chart-3: 262 50% 77%;
    --chart-4: 231 48% 81%;
    --chart-5: 262 40% 67%;
  }
}

@layer base {
  * {
    @apply border-border;
  }
  body {
    @apply bg-background text-foreground;
  }
}

@layer utilities {
  @keyframes scan-y {
    0%, 100% { top: 0%; }
    50% { top: 100%; }
  }
  .animate-scan-y {
    animation: scan-y 2.5s ease-in-out infinite;
  }
}




====================================================================================================
FILE: app\layout.tsx
SIZE: 1.06 KB
====================================================================================================
import type { Metadata } from 'next';
import { AuthProvider } from '@/context/auth-provider';
import { DataProvider } from '@/context/data-provider';
import { Toaster } from '@/components/ui/toaster';
import './globals.css';

export const metadata: Metadata = {
  title: 'Guardian Gate',
  description: 'Secure Access Management by Gate Pass Guardian',
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en" suppressHydrationWarning>
      <head>
        <link rel="preconnect" href="https://fonts.googleapis.com" />
        <link rel="preconnect" href="https://fonts.gstatic.com" crossOrigin="anonymous" />
        <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&family=Space+Grotesk:wght@500;700&display=swap" rel="stylesheet" />
      </head>
      <body className="font-body antialiased">
        <AuthProvider>
          <DataProvider>
            {children}
            <Toaster />
          </DataProvider>
        </AuthProvider>
      </body>
    </html>
  );
}





====================================================================================================
FILE: app\page.tsx
SIZE: 0.45 KB
====================================================================================================
"use client";

import { useEffect } from "react";
import { useRouter } from "next/navigation";
import { Loader2 } from "lucide-react";

export default function HomePage() {
  const router = useRouter();
  
  useEffect(() => {
    router.replace("/verifier");
  }, [router]);
  
  return (
    <div className="flex min-h-screen items-center justify-center">
      <Loader2 className="h-8 w-8 animate-spin text-primary" />
    </div>
  );
}



====================================================================================================
FILE: app\(auth)\layout.tsx
SIZE: 1.17 KB
====================================================================================================
import type { ReactNode } from 'react';
import Image from 'next/image';
import { ShieldCheck, ShieldAlert } from 'lucide-react';
import Link from 'next/link';

export default function AuthLayout({ children }: { children: ReactNode }) {
  return (
    <div className="flex min-h-screen w-full items-center justify-center bg-secondary/50 p-4">
      <div className="w-full max-w-md">
        <div className="mb-6 flex flex-col items-center text-center">
            <div className="mb-4 rounded-full bg-primary p-3 text-primary-foreground">
                <ShieldCheck className="h-8 w-8" />
            </div>
            <h1 className="font-headline text-4xl font-bold tracking-tight text-primary">Guardian Gate</h1>
            <p className="mt-1 text-muted-foreground">Secure Access Management</p>
        </div>
        {children}
         <div className="mt-6 text-center">
          <Link href="/verifier" className="inline-flex items-center gap-2 text-sm font-medium text-muted-foreground hover:text-primary">
            <ShieldAlert className="h-5 w-5" />
            <span>Pass Verifier</span>
          </Link>
        </div>
      </div>
    </div>
  );
}





====================================================================================================
FILE: app\admin\layout.tsx
SIZE: 8.1 KB
====================================================================================================
"use client";

import { type ReactNode, useState } from "react";
import Link from "next/link";
import { usePathname } from "next/navigation";
import { cn } from "@/lib/utils";
import { Button } from "@/components/ui/button";
import { ShieldCheck, LogOut, Menu, X, ChevronDown, Share2 } from "lucide-react";
import { NAV_LINKS } from "@/lib/constants";
import { useAuth } from "@/hooks/use-auth";
import AuthGate from "@/components/auth/auth-gate";
import RoleGate from "@/components/auth/role-gate";
import { useToast } from "@/hooks/use-toast";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import { Avatar, AvatarFallback } from "@/components/ui/avatar";

export default function AdminLayout({ children }: { children: ReactNode }) {
  const pathname = usePathname();
  const { user, handleSignOut, role } = useAuth();
  const [sidebarOpen, setSidebarOpen] = useState(false);
  const [dashboardOpen, setDashboardOpen] = useState(true);
  const { toast } = useToast();

  const visibleNavLinks = NAV_LINKS.filter(link => {
    if (link.href === "/admin/dashboard/users") {
      return role === "owner" || role === "admin";
    }
    return true;
  });

  const handleShare = async () => {
    const shareUrl = `${window.location.origin}/gate-guard`;
    if (navigator.share) {
      try {
        await navigator.share({
          title: 'Guardian Gate Guard',
          text: 'Access the gate guard verification page.',
          url: shareUrl,
        });
      } catch (error) {
        console.error('Error sharing:', error);
      }
    } else {
      navigator.clipboard.writeText(shareUrl).then(() => {
        toast({
          title: "Link Copied!",
          description: "The Gate Guard page link has been copied to your clipboard.",
        });
      });
    }
  };

  return (
    <AuthGate>
      <RoleGate allowedRoles={["owner", "admin", "user"]}>
        <div className="flex h-screen overflow-hidden">
          <aside className={cn("border-r bg-card transition-all duration-300 ease-in-out", sidebarOpen ? "w-64" : "w-0")}>
            <div className={cn("flex h-full flex-col overflow-hidden transition-opacity duration-300", sidebarOpen ? "opacity-100" : "opacity-0")}>
              <div className="flex h-16 items-center gap-2 border-b px-6">
                <ShieldCheck className="h-6 w-6 text-primary flex-shrink-0" />
                <span className="font-headline text-lg font-bold whitespace-nowrap">Guardian Gate</span>
              </div>

              <nav className="flex-1 space-y-1 overflow-y-auto p-4">
                {visibleNavLinks.map((link) => {
                  const Icon = link.icon;

                  if (link.href === '/gate-guard') {
                    return (
                      <Button
                        key={link.label}
                        variant="ghost"
                        className="w-full justify-start"
                        onClick={handleShare}
                      >
                        <Share2 className="mr-2 h-4 w-4 flex-shrink-0" />
                        <span className="whitespace-nowrap">{link.label}</span>
                      </Button>
                    );
                  }

                  if (link.submenu) {
                    const isAnySubmenuActive = link.submenu.some(sub => pathname === sub.href);

                    return (
                      <div key={link.label}>
                        <Button
                          variant={isAnySubmenuActive ? "secondary" : "ghost"}
                          className={cn("w-full justify-start", isAnySubmenuActive && "bg-secondary")}
                          onClick={() => setDashboardOpen(!dashboardOpen)}
                        >
                          <Icon className="mr-2 h-4 w-4 flex-shrink-0" />
                          <span className="whitespace-nowrap flex-1 text-left">{link.label}</span>
                          <ChevronDown className={cn("h-4 w-4 transition-transform", dashboardOpen && "rotate-180")} />
                        </Button>

                        {dashboardOpen && (
                          <div className="ml-6 mt-1 space-y-1">
                            {link.submenu.map((sublink) => {
                              const SubIcon = sublink.icon;
                              const isActive = pathname === sublink.href;

                              return (
                                <Link key={sublink.href} href={sublink.href}>
                                  <Button
                                    variant={isActive ? "secondary" : "ghost"}
                                    size="sm"
                                    className={cn("w-full justify-start", isActive && "bg-secondary")}
                                  >
                                    <SubIcon className="mr-2 h-3 w-3 flex-shrink-0" />
                                    <span className="whitespace-nowrap text-xs">{sublink.label}</span>
                                  </Button>
                                </Link>
                              );
                            })}
                          </div>
                        )}
                      </div>
                    );
                  }

                  const isActive = pathname === link.href;

                  return (
                    <Link key={link.href} href={link.href}>
                      <Button
                        variant={isActive ? "secondary" : "ghost"}
                        className={cn("w-full justify-start", isActive && "bg-secondary")}
                      >
                        <Icon className="mr-2 h-4 w-4 flex-shrink-0" />
                        <span className="whitespace-nowrap">{link.label}</span>
                      </Button>
                    </Link>
                  );
                })}
              </nav>
            </div>
          </aside>

          <div className="flex flex-1 flex-col overflow-hidden">
            <header className="flex h-16 items-center justify-between border-b bg-background px-6">
              <div className="flex items-center gap-4">
                <Button variant="ghost" size="icon" onClick={() => setSidebarOpen(!sidebarOpen)} className="flex-shrink-0">
                  {sidebarOpen ? <X className="h-5 w-5" /> : <Menu className="h-5 w-5" />}
                </Button>
                <div className="flex flex-col">
                  <span className="text-xs text-muted-foreground uppercase tracking-wide">Welcome, {user?.fullName || "User"}</span>
                  <h2 className="text-lg font-semibold">Dashboard</h2>
                </div>
              </div>

              <DropdownMenu>
                <DropdownMenuTrigger asChild>
                  <Button variant="ghost" className="relative h-10 w-10 rounded-full">
                    <Avatar>
                      <AvatarFallback className="bg-primary text-primary-foreground">
                        {user?.fullName?.charAt(0).toUpperCase() || "U"}
                      </AvatarFallback>
                    </Avatar>
                  </Button>
                </DropdownMenuTrigger>
                <DropdownMenuContent align="end" className="w-56">
                  <DropdownMenuLabel>
                    <div className="flex flex-col space-y-1">
                      <p className="text-sm font-medium">{user?.fullName}</p>
                      <p className="text-xs text-muted-foreground">{user?.email}</p>
                      <p className="text-xs text-muted-foreground capitalize">Role: {user?.role}</p>
                    </div>
                  </DropdownMenuLabel>
                  <DropdownMenuSeparator />
                  <DropdownMenuItem onClick={handleSignOut} className="text-destructive">
                    <LogOut className="mr-2 h-4 w-4" />
                    Sign Out
                  </DropdownMenuItem>
                </DropdownMenuContent>
              </DropdownMenu>
            </header>

            <main className="flex-1 overflow-y-auto bg-secondary/30 p-6">{children}</main>
          </div>
        </div>
      </RoleGate>
    </AuthGate>
  );
}




====================================================================================================
FILE: app\admin\dashboard\page.tsx
SIZE: 0.13 KB
====================================================================================================
import { redirect } from 'next/navigation';

export default function DashboardHome() {
  redirect('/admin/dashboard/records');
}




====================================================================================================
FILE: app\admin\dashboard\generate\page.tsx
SIZE: 2.49 KB
====================================================================================================
"use client";

import { useState } from "react";
import GenerateStandardForm from "@/components/forms/generate-standard-form";
import GenerateVisitorForm from "@/components/forms/generate-visitor-form";
import GenerateBatchForm from "@/components/forms/generate-batch-form";
import { Car, User, FileUp } from "lucide-react";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";

const passTypes = [
    { id: 'standard', label: 'Standard', icon: Car },
    { id: 'visitor', label: 'Visitor', icon: User },
    { id: 'batch', label: 'Batch Upload', icon: FileUp },
]

export default function GeneratePassPage() {
  const [passType, setPassType] = useState("standard");

  const renderForm = () => {
    switch (passType) {
      case "standard":
        return <GenerateStandardForm />;
      case "visitor":
        return <GenerateVisitorForm />;
      case "batch":
        return <GenerateBatchForm />;
      default:
        return <GenerateStandardForm />;
    }
  };

  return (
    <div className="space-y-6 mx-auto max-w-2xl">
      <div className="text-center md:text-left">
        <h1 className="font-headline text-3xl font-bold">Create New Gate Pass</h1>
        <p className="text-muted-foreground">
          Fill in the details to generate a new pass.
        </p>
      </div>

      <Card>
        <CardContent className="pt-6">
            <div className="space-y-2 mb-6">
                 <label className="text-sm font-medium">Pass Type</label>
                <Select value={passType} onValueChange={setPassType}>
                    <SelectTrigger className="w-full">
                        <SelectValue placeholder="Select pass type..." />
                    </SelectTrigger>
                    <SelectContent>
                        {passTypes.map((item) => (
                            <SelectItem key={item.id} value={item.id}>
                                <div className="flex items-center gap-2">
                                    <item.icon className="h-4 w-4" />
                                    <span>{item.label}</span>
                                </div>
                            </SelectItem>
                        ))}
                    </SelectContent>
                </Select>
            </div>
            {renderForm()}
        </CardContent>
      </Card>
    </div>
  );
}




====================================================================================================
FILE: app\admin\dashboard\records\page.tsx
SIZE: 0.42 KB
====================================================================================================
import { RecordsTable } from "@/components/tables/records-table";

export default function RecordsPage() {
  return (
    <div className="space-y-6">
      <div>
        <h1 className="font-headline text-3xl font-bold">All Pass Records</h1>
        <p className="text-muted-foreground">
          Browse, search, and manage all existing gate passes.
        </p>
      </div>
      <RecordsTable />
    </div>
  );
}




====================================================================================================
FILE: app\admin\dashboard\search\page.tsx
SIZE: 0.42 KB
====================================================================================================
import ManualSearch from "@/components/verifier/manual-search";

export default function SearchPage() {
  return (
    <div className="space-y-6">
       <div>
        <h1 className="font-headline text-3xl font-bold">Pass Search</h1>
        <p className="text-muted-foreground">
          Quickly find a pass by its plate number.
        </p>
      </div>
      <ManualSearch isAdminSearch={true} />
    </div>
  );
}




====================================================================================================
FILE: app\admin\dashboard\statistics\page.tsx
SIZE: 5.12 KB
====================================================================================================
"use client";

import { Suspense } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { PassesByMonthChart } from '@/components/charts/passes-by-month-chart';
import { PassesStatusPieChart } from '@/components/charts/passes-status-pie-chart';
import { PassesByLocationChart } from '@/components/charts/passes-by-location-chart';
import { PassesByCompanyChart } from '@/components/charts/passes-by-company-chart';
import { BarChart, PieChart, Building, MapPin, Printer, Share2 } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { useToast } from '@/hooks/use-toast';

export default function StatisticsPage() {
  const { toast } = useToast();

  const handlePrint = () => {
    window.print();
  };

  const handleShare = async () => {
    const url = window.location.href;
    const title = "Pass Statistics - Guardian Gate";
    const text = "Check out these pass statistics";

    if (navigator.share) {
      try {
        await navigator.share({ title, text, url });
        toast({
          title: "Shared successfully",
          description: "Statistics page shared"
        });
      } catch (error) {
        if ((error as Error).name !== 'AbortError') {
          copyToClipboard(url);
        }
      }
    } else {
      copyToClipboard(url);
    }
  };

  const copyToClipboard = (text: string) => {
    navigator.clipboard.writeText(text);
    toast({
      title: "Link copied",
      description: "Statistics page link copied to clipboard"
    });
  };

  return (
    <>
      <style jsx global>{`
        @media print {
          body {
            print-color-adjust: exact;
            -webkit-print-color-adjust: exact;
          }
          
          @page {
            size: A4 landscape;
            margin: 1cm;
          }
          
          .print\\:hidden {
            display: none !important;
          }
          
          nav, aside, header {
            display: none !important;
          }
          
          main {
            margin: 0 !important;
            padding: 0 !important;
          }
        }
      `}</style>
      
      <div className="space-y-6">
        <div className="flex items-center justify-between">
          <div>
            <h1 className="font-headline text-3xl font-bold">Pass Statistics</h1>
            <p className="text-muted-foreground">
              Visualize pass data and gain insights into usage patterns.
            </p>
          </div>
          <div className="flex gap-2 print:hidden">
            <Button onClick={handlePrint} variant="outline" size="sm">
              <Printer className="h-4 w-4 mr-2" />
              Print
            </Button>
            <Button onClick={handleShare} variant="outline" size="sm">
              <Share2 className="h-4 w-4 mr-2" />
              Share
            </Button>
          </div>
        </div>

        <div className="grid gap-6 md:grid-cols-2 lg:grid-cols-2 xl:grid-cols-4 print:grid-cols-2">
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center justify-between text-lg">
                Passes by Month <BarChart className="h-5 w-5 text-muted-foreground" />
              </CardTitle>
            </CardHeader>
            <CardContent>
              <Suspense fallback={<div className="h-[350px] w-full animate-pulse rounded-md bg-muted" />}>
                <PassesByMonthChart />
              </Suspense>
            </CardContent>
          </Card>
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center justify-between text-lg">
                Pass Status <PieChart className="h-5 w-5 text-muted-foreground" />
              </CardTitle>
            </CardHeader>
            <CardContent>
              <Suspense fallback={<div className="h-[300px] w-full animate-pulse rounded-md bg-muted" />}>
                <PassesStatusPieChart />
              </Suspense>
            </CardContent>
          </Card>
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center justify-between text-lg">
                Passes by Company <Building className="h-5 w-5 text-muted-foreground" />
              </CardTitle>
            </CardHeader>
            <CardContent>
               <Suspense fallback={<div className="h-[350px] w-full animate-pulse rounded-md bg-muted" />}>
                <PassesByCompanyChart />
              </Suspense>
            </CardContent>
          </Card>
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center justify-between text-lg">
                Passes by Location <MapPin className="h-5 w-5 text-muted-foreground" />
              </CardTitle>
            </CardHeader>
            <CardContent>
               <Suspense fallback={<div className="h-[350px] w-full animate-pulse rounded-md bg-muted" />}>
                <PassesByLocationChart />
              </Suspense>
            </CardContent>
          </Card>
        </div>
      </div>
    </>
  );
}




====================================================================================================
FILE: app\admin\dashboard\users\page.tsx
SIZE: 0.68 KB
====================================================================================================
import { UsersTable } from '@/components/tables/users-table';
import RoleGate from '@/components/auth/role-gate';
import { Suspense } from 'react';

export default function UsersPage() {
  return (
    <RoleGate allowedRoles={["owner", "admin"]}>
      <div className="space-y-6">
        <div>
          <h1 className="font-headline text-3xl font-bold">Manage Users</h1>
          <p className="text-muted-foreground">
            Approve new users and manage existing user roles.
          </p>
        </div>
        <Suspense fallback={<div className="h-96 w-full animate-pulse rounded-lg bg-muted" />}>
          <UsersTable />
        </Suspense>
      </div>
    </RoleGate>
  );
}




====================================================================================================
FILE: app\gate-guard\layout.tsx
SIZE: 0.98 KB
====================================================================================================
import type { Metadata } from 'next';
import { Inter } from 'next/font/google';
import '../globals.css';

const inter = Inter({ subsets: ['latin'] });

export const metadata: Metadata = {
  title: 'Guardian Gate - Gate Guard',
  description: 'Verify vehicle passes offline',
  manifest: '/manifest.json',
  themeColor: '#22c55e',
  appleWebApp: {
    capable: true,
    statusBarStyle: 'default',
    title: 'Gate Guard',
  },
};

export default function GateGuardLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  return (
    <html lang="en">
      <head>
        <link rel="manifest" href="/manifest.json" />
        <meta name="theme-color" content="#22c55e" />
        <meta name="apple-mobile-web-app-capable" content="yes" />
        <meta name="apple-mobile-web-app-status-bar-style" content="default" />
        <meta name="apple-mobile-web-app-title" content="Gate Guard" />
      </head>
      <body className={inter.className}>
        {children}
      </body>
    </html>
  );
}



====================================================================================================
FILE: app\gate-guard\page.tsx
SIZE: 9.27 KB
====================================================================================================
"use client";
import { ErrorBoundary } from '@/components/error-boundary/error-boundary';
import { ShieldCheck, QrCode, Download, WifiOff, Wifi, RefreshCw } from 'lucide-react';
import ManualSearch from '@/components/verifier/manual-search-offline';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import QrScanner from '@/components/verifier/qr-scanner';
import { Button } from '@/components/ui/button';
import PassDetails from '@/components/verifier/pass-details';
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogDescription,
  DialogTrigger,
} from "@/components/ui/dialog";
import { useState, useEffect } from 'react';
import { getPassById } from '@/lib/local-db';
import { initializeSyncManager, syncPassesFromFirebase, hasLocalData } from '@/lib/sync-manager';

export default function GateGuardPage() {
  return (
    <ErrorBoundary>
      <GateGuardContent />
    </ErrorBoundary>
  );
}

function GateGuardContent() {
  const [isScannerOpen, setIsScannerOpen] = useState(false);
  const [scannedPass, setScannedPass] = useState<any>(null);
  const [isValidating, setIsValidating] = useState(false);
  const [deferredPrompt, setDeferredPrompt] = useState<any>(null);
  const [showInstallButton, setShowInstallButton] = useState(false);

  const [isOnline, setIsOnline] = useState(true);
  const [isSyncing, setIsSyncing] = useState(false);
  const [lastSyncCount, setLastSyncCount] = useState(0);
  const [hasData, setHasData] = useState(false);

  useEffect(() => {
    hasLocalData().then(hasData => {
      setHasData(hasData);
      if (!hasData && navigator.onLine) {
        handleManualSync();
      }
    });

    initializeSyncManager((result) => {
      if (result.success) {
        setLastSyncCount(result.passCount);
        setHasData(true);
      }
      setIsSyncing(false);
    });

    setIsOnline(navigator.onLine);
    const handleOnline = () => setIsOnline(true);
    const handleOffline = () => setIsOnline(false);

    window.addEventListener('online', handleOnline);
    window.addEventListener('offline', handleOffline);

    return () => {
      window.removeEventListener('online', handleOnline);
      window.removeEventListener('offline', handleOffline);
    };
  }, []);

  useEffect(() => {
    if ('serviceWorker' in navigator) {
      window.addEventListener('load', () => {
        navigator.serviceWorker.register('/sw.js')
          .then((registration) => console.log('Service Worker registered:', registration))
          .catch((error) => console.log('Service Worker registration failed:', error));
      });
    }

    const handleBeforeInstallPrompt = (e: Event) => {
      e.preventDefault();
      setDeferredPrompt(e);
      setShowInstallButton(true);
    };

    window.addEventListener('beforeinstallprompt', handleBeforeInstallPrompt);
    return () => window.removeEventListener('beforeinstallprompt', handleBeforeInstallPrompt);
  }, []);

  const handleInstallClick = async () => {
    if (!deferredPrompt) return;
    deferredPrompt.prompt();
    const { outcome } = await deferredPrompt.userChoice;
    if (outcome === 'accepted') console.log('User accepted the install prompt');
    setDeferredPrompt(null);
    setShowInstallButton(false);
  };

  const handleManualSync = async () => {
    if (!navigator.onLine) {
      alert('Cannot sync while offline. Please connect to the internet and try again.');
      return;
    }
    setIsSyncing(true);
    const result = await syncPassesFromFirebase();
    if (result.success) {
      setLastSyncCount(result.passCount);
      setHasData(true);
      alert(`Successfully synced ${result.passCount} passes from the server.`);
    } else {
      alert(`Sync failed: ${result.error}`);
    }
    setIsSyncing(false);
  };

  const handleScanSuccess = async (decodedText: string) => {
    if (isValidating || scannedPass) return;
    console.log("Processing scanned QR:", decodedText);
    setIsValidating(true);
    setIsScannerOpen(false);

    try {
      const qrData = JSON.parse(decodedText);
      console.log("Parsed QR data:", qrData);
      if (!qrData.pid || !qrData.v) throw new Error("Invalid QR code format");
      
      console.log("Searching local database for pass:", qrData.pid);
      const passData = await getPassById(qrData.pid);
      if (!passData) throw new Error("Pass not found in local database");

      const now = Date.now() / 1000;
      if (qrData.exp && qrData.exp < now) passData.expired = true;
      setScannedPass({ id: qrData.pid, ...passData });
    } catch (error: any) {
      console.error("Validation error:", error);
      alert(`Scan failed: ${error.message}`);
    } finally {
      setIsValidating(false);
    }
  };

  return (
    <div className="bg-secondary/30 min-h-screen">
      <header className="bg-background/80 backdrop-blur-sm border-b sticky top-0">
        <div className="container mx-auto flex h-16 items-center justify-between px-4">
          <div className="flex items-center gap-2">
            <ShieldCheck className="h-7 w-7 text-primary" />
            <span className="font-headline text-xl font-bold">Guardian Gate Guard</span>
          </div>
          <div className="flex items-center gap-2">
            {isOnline ? (
              <div className="flex items-center gap-1 text-green-600 text-sm">
                <Wifi className="h-4 w-4" />
                <span className="hidden sm:inline">Online</span>
              </div>
            ) : (
              <div className="flex items-center gap-1 text-orange-600 text-sm">
                <WifiOff className="h-4 w-4" />
                <span className="hidden sm:inline">Offline</span>
              </div>
            )}
            {isOnline && (
              <Button onClick={handleManualSync} size="sm" variant="outline" disabled={isSyncing}>
                <RefreshCw className={`h-4 w-4 mr-2 ${isSyncing ? 'animate-spin' : ''}`} />
                <span className="hidden sm:inline">Sync</span>
              </Button>
            )}
            {showInstallButton && (
              <Button onClick={handleInstallClick} size="sm" variant="outline">
                <Download className="h-4 w-4 mr-2" />
                <span className="hidden sm:inline">Install</span>
              </Button>
            )}
          </div>
        </div>
      </header>
      <main className="container mx-auto p-4 md:p-8">
        <div className="mx-auto max-w-2xl space-y-8">
          <div className="text-center">
            <h1 className="text-3xl font-bold font-headline tracking-tight">Pass Verifier</h1>
            <p className="text-muted-foreground mt-2">
              Enter a vehicle's plate number or scan a QR code to verify its access status.
            </p>
            {!hasData && (
              <p className="text-orange-600 mt-2 text-sm">
                No passes stored locally. {isOnline ? 'Click Sync to download pass database.' : 'Connect to internet to download pass database.'}
              </p>
            )}
            {hasData && lastSyncCount > 0 && (
              <p className="text-green-600 mt-2 text-sm">{lastSyncCount} passes available offline</p>
            )}
          </div>
          <Dialog open={!!scannedPass} onOpenChange={(open) => !open && setScannedPass(null)}>
            <DialogContent className="sm:max-w-[500px]">
              <DialogHeader>
                <DialogTitle>Verification Result</DialogTitle>
                <DialogDescription>Pass validation complete</DialogDescription>
              </DialogHeader>
              {scannedPass && <PassDetails pass={scannedPass} />}
            </DialogContent>
          </Dialog>
          <Card>
            <CardHeader>
              <CardTitle>Manual Plate Search</CardTitle>
              <CardDescription>Enter the plate letters and numbers separately.</CardDescription>
            </CardHeader>
            <CardContent>
              <ManualSearch />
            </CardContent>
          </Card>
          <div className="relative">
            <div className="absolute inset-0 flex items-center">
              <span className="w-full border-t" />
            </div>
            <div className="relative flex justify-center text-xs uppercase">
              <span className="bg-secondary/30 px-2 text-muted-foreground">Or</span>
            </div>
          </div>
          <Dialog open={isScannerOpen} onOpenChange={setIsScannerOpen}>
            <DialogTrigger asChild>
              <Button size="lg" className="w-full">
                <QrCode className="mr-2 h-5 w-5" />
                Scan QR Code
              </Button>
            </DialogTrigger>
            <DialogContent className="sm:max-w-[425px]">
              <DialogHeader>
                <DialogTitle className="flex items-center gap-2">
                  <QrCode className="h-5 w-5" /> Scan QR Code
                </DialogTitle>
                <DialogDescription>Use your device's camera to scan the pass QR code.</DialogDescription>
              </DialogHeader>
              {isValidating ? (
                <div className="text-center py-8">Validating pass...</div>
              ) : (
                <QrScanner
                  onScanSuccess={handleScanSuccess}
                  onScanError={(error) => console.error("Scanner error:", error)}
                />
              )}
            </DialogContent>
          </Dialog>
        </div>
      </main>
    </div>
  );
}



====================================================================================================
FILE: app\login\page.tsx
SIZE: 1.42 KB
====================================================================================================
"use client";

import { useSearchParams } from "next/navigation";
import { LoginForm } from "@/components/forms/login-form";
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Clock, Mail } from "lucide-react";
import { Suspense } from "react";

function LoginContent() {
  const searchParams = useSearchParams();
  const isPending = searchParams.get("pending") === "1";

  return (
    <div className="container flex h-screen w-screen flex-col items-center justify-center">
      <div className="mx-auto flex w-full flex-col justify-center space-y-6 sm:w-[400px]">
        {isPending && (
          <Alert className="border-yellow-500 bg-yellow-50">
            <Clock className="h-4 w-4 text-yellow-600" />
            <AlertTitle className="text-yellow-800">Account Pending Approval</AlertTitle>
            <AlertDescription className="text-yellow-700">
              Your account has been created successfully and is awaiting administrator approval. 
              You will receive an email notification once your account is activated.
            </AlertDescription>
          </Alert>
        )}
        <LoginForm />
      </div>
    </div>
  );
}

export default function LoginPage() {
  return (
    <Suspense fallback={<div className="container flex h-screen w-screen flex-col items-center justify-center">Loading...</div>}>
      <LoginContent />
    </Suspense>
  );
}



====================================================================================================
FILE: app\share\page.tsx
SIZE: 5.02 KB
====================================================================================================
"use client";

import { ShieldCheck, QrCode } from 'lucide-react';
import ManualSearch from '@/components/verifier/manual-search';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import QrScanner from '@/components/verifier/qr-scanner';
import { Button } from '@/components/ui/button';
import PassDetails from '@/components/verifier/pass-details';
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogDescription,
  DialogTrigger,
} from "@/components/ui/dialog";
import { useState } from 'react';
import { doc, getDoc } from 'firebase/firestore';
import { db } from '@/lib/firestore';

export default function ShareVerifierPage() {
  const [isScannerOpen, setIsScannerOpen] = useState(false);
  const [scannedPass, setScannedPass] = useState<any>(null);
  const [isValidating, setIsValidating] = useState(false);

  const handleScanSuccess = async (decodedText: string) => {
    if (isValidating || scannedPass) return;

    console.log("Processing scanned QR:", decodedText);
    setIsValidating(true);
    setIsScannerOpen(false);

    try {
      const qrData = JSON.parse(decodedText);
      console.log("Parsed QR data:", qrData);

      if (!qrData.pid || !qrData.v) {
        throw new Error("Invalid QR code format");
      }

      const passRef = doc(db, 'passes', qrData.pid);
      const passSnap = await getDoc(passRef);

      if (!passSnap.exists()) {
        throw new Error("Pass not found");
      }

      const passData = passSnap.data();
      console.log("Pass data from Firestore:", passData);

      const now = Date.now() / 1000;
      if (qrData.exp && qrData.exp < now) {
        passData.expired = true;
      }

      setScannedPass({ id: passSnap.id, ...passData });
    } catch (error: any) {
      console.error("Validation error:", error);
      alert(`Scan failed: ${error.message}`);
    } finally {
      setIsValidating(false);
    }
  };

  return (
    <div className="bg-secondary/30 min-h-screen">
      <header className="bg-background/80 backdrop-blur-sm border-b sticky top-0">
        <div className="container mx-auto flex h-16 items-center px-4">
          <div className="flex items-center gap-2">
            <ShieldCheck className="h-7 w-7 text-primary" />
            <span className="font-headline text-xl font-bold">Guardian Gate Verifier</span>
          </div>
        </div>
      </header>

      <main className="container mx-auto p-4 md:p-8">
        <div className="mx-auto max-w-2xl space-y-8">
          <div className="text-center">
            <h1 className="text-3xl font-bold font-headline tracking-tight">Pass Verifier</h1>
            <p className="text-muted-foreground mt-2">
              Enter a vehicle's plate number or scan a QR code to verify its access status.
            </p>
          </div>

          <Dialog open={!!scannedPass} onOpenChange={(open) => !open && setScannedPass(null)}>
            <DialogContent className="sm:max-w-[500px]">
              <DialogHeader>
                <DialogTitle>Verification Result</DialogTitle>
                <DialogDescription>Pass validation complete</DialogDescription>
              </DialogHeader>
              {scannedPass && <PassDetails pass={scannedPass} />}
            </DialogContent>
          </Dialog>

          <Card>
            <CardHeader>
              <CardTitle>Manual Plate Search</CardTitle>
              <CardDescription>Enter the plate letters and numbers separately.</CardDescription>
            </CardHeader>
            <CardContent>
              <ManualSearch />
            </CardContent>
          </Card>

          <div className="relative">
            <div className="absolute inset-0 flex items-center">
              <span className="w-full border-t" />
            </div>
            <div className="relative flex justify-center text-xs uppercase">
              <span className="bg-secondary/30 px-2 text-muted-foreground">Or</span>
            </div>
          </div>

          <Dialog open={isScannerOpen} onOpenChange={setIsScannerOpen}>
            <DialogTrigger asChild>
              <Button size="lg" className="w-full">
                <QrCode className="mr-2 h-5 w-5" />
                Scan QR Code
              </Button>
            </DialogTrigger>
            <DialogContent className="sm:max-w-[425px]">
              <DialogHeader>
                <DialogTitle className="flex items-center gap-2">
                  <QrCode className="h-5 w-5" /> Scan QR Code
                </DialogTitle>
                <DialogDescription>
                  Use your device's camera to scan the pass QR code.
                </DialogDescription>
              </DialogHeader>
              {isValidating ? (
                <div className="text-center py-8">Validating pass...</div>
              ) : (
                <QrScanner
                  onScanSuccess={handleScanSuccess}
                  onScanError={(error) => console.error("Scanner error:", error)}
                />
              )}
            </DialogContent>
          </Dialog>
        </div>
      </main>
    </div>
  );
}




====================================================================================================
FILE: app\signup\page.tsx
SIZE: 0.13 KB
====================================================================================================
import { SignupForm } from '@/components/forms/signup-form';

export default function SignupPage() {
    return <SignupForm />;
}




====================================================================================================
FILE: app\verifier\page.tsx
SIZE: 5.75 KB
====================================================================================================
"use client";

import { ShieldCheck, QrCode, LayoutDashboard } from 'lucide-react';
import ManualSearch from '@/components/verifier/manual-search';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import QrScanner from '@/components/verifier/qr-scanner';
import { Button } from '@/components/ui/button';
import Link from 'next/link';
import PassDetails from '@/components/verifier/pass-details';
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogDescription,
  DialogTrigger,
} from "@/components/ui/dialog";
import { useState } from 'react';
import { doc, getDoc } from 'firebase/firestore';
import { db } from '@/lib/firestore';
import { useAuth } from '@/hooks/use-auth';

export default function VerifierPage() {
  const { user } = useAuth();
  const [isScannerOpen, setIsScannerOpen] = useState(false);
  const [scannedPass, setScannedPass] = useState<any>(null);
  const [isValidating, setIsValidating] = useState(false);

  const handleScanSuccess = async (decodedText: string) => {
    // Prevent duplicate scans
    if (isValidating || scannedPass) return;

    console.log("Processing scanned QR:", decodedText);
    setIsValidating(true);
    setIsScannerOpen(false); // Close scanner immediately

    try {
      // Parse QR data
      const qrData = JSON.parse(decodedText);
      console.log("Parsed QR data:", qrData);

      // Validate QR structure
      if (!qrData.pid || !qrData.v) {
        throw new Error("Invalid QR code format");
      }

      // Fetch pass from Firestore using the pass ID
      const passRef = doc(db, 'passes', qrData.pid);
      const passSnap = await getDoc(passRef);

      if (!passSnap.exists()) {
        throw new Error("Pass not found");
      }

      const passData = passSnap.data();
      console.log("Pass data from Firestore:", passData);

      // Check expiry
      const now = Date.now() / 1000;
      if (qrData.exp && qrData.exp < now) {
        passData.expired = true;
      }

      // Show result
      setScannedPass({ id: passSnap.id, ...passData });
    } catch (error: any) {
      console.error("Validation error:", error);
      alert(`Scan failed: ${error.message}`);
    } finally {
      setIsValidating(false);
    }
  };

  return (
    <div className="bg-secondary/30 min-h-screen">
      <header className="bg-background/80 backdrop-blur-sm border-b sticky top-0">
        <div className="container mx-auto flex h-16 items-center justify-between px-4">
          <div className="flex items-center gap-2">
            <ShieldCheck className="h-7 w-7 text-primary" />
            <span className="font-headline text-xl font-bold">Guardian Gate Verifier</span>
          </div>
          {user ? (
            <Button asChild>
              <Link href="/admin/dashboard">
                <LayoutDashboard className="mr-2 h-4 w-4" />
                Dashboard
              </Link>
            </Button>
          ) : (
            <Button asChild>
              <Link href="/login">Sign In</Link>
            </Button>
          )}
        </div>
      </header>

      <main className="container mx-auto p-4 md:p-8">
        <div className="mx-auto max-w-2xl space-y-8">
          <div className="text-center">
            <h1 className="text-3xl font-bold font-headline tracking-tight">Pass Verifier</h1>
            <p className="text-muted-foreground mt-2">
              Enter a vehicle's plate number or scan a QR code to verify its access status.
            </p>
          </div>

          {/* Show scan result in dialog */}
          <Dialog open={!!scannedPass} onOpenChange={(open) => !open && setScannedPass(null)}>
            <DialogContent className="sm:max-w-[500px]">
              <DialogHeader>
                <DialogTitle>Verification Result</DialogTitle>
                <DialogDescription>Pass validation complete</DialogDescription>
              </DialogHeader>
              {scannedPass && <PassDetails pass={scannedPass} />}
            </DialogContent>
          </Dialog>

          <Card>
            <CardHeader>
              <CardTitle>Manual Plate Search</CardTitle>
              <CardDescription>Enter the plate letters and numbers separately.</CardDescription>
            </CardHeader>
            <CardContent>
              <ManualSearch />
            </CardContent>
          </Card>

          <div className="relative">
            <div className="absolute inset-0 flex items-center">
              <span className="w-full border-t" />
            </div>
            <div className="relative flex justify-center text-xs uppercase">
              <span className="bg-secondary/30 px-2 text-muted-foreground">Or</span>
            </div>
          </div>

          <Dialog open={isScannerOpen} onOpenChange={setIsScannerOpen}>
            <DialogTrigger asChild>
              <Button size="lg" className="w-full">
                <QrCode className="mr-2 h-5 w-5" />
                Scan QR Code
              </Button>
            </DialogTrigger>
            <DialogContent className="sm:max-w-[425px]">
              <DialogHeader>
                <DialogTitle className="flex items-center gap-2">
                  <QrCode className="h-5 w-5" /> Scan QR Code
                </DialogTitle>
                <DialogDescription>
                  Use your device's camera to scan the pass QR code.
                </DialogDescription>
              </DialogHeader>
              {isValidating ? (
                <div className="text-center py-8">Validating pass...</div>
              ) : (
                <QrScanner
                  onScanSuccess={handleScanSuccess}
                  onScanError={(error) => console.error("Scanner error:", error)}
                />
              )}
            </DialogContent>
          </Dialog>
        </div>
      </main>
    </div>
  );
}




====================================================================================================
FILE: components\auth\auth-gate.tsx
SIZE: 0.88 KB
====================================================================================================
"use client";

import { useEffect, type ReactNode } from "react";
import { useRouter } from "next/navigation";
import { useAuth } from "@/hooks/use-auth";
import { Loader2 } from "lucide-react";

export default function AuthGate({ children }: { children: ReactNode }) {
  const { user, loading, role } = useAuth();
  const router = useRouter();

  useEffect(() => {
    if (!loading) {
      if (!user) {
        router.replace("/login");
      } else if (role === "pending" || role === "rejected") {
        router.replace("/login?pending=1");
      }
    }
  }, [user, loading, role, router]);

  if (loading || !user || !role || role === 'pending' || role === 'rejected') {
    return (
      <div className="flex h-screen items-center justify-center">
        <Loader2 className="h-8 w-8 animate-spin text-primary" />
      </div>
    );
  }

  return <>{children}</>;
}




====================================================================================================
FILE: components\auth\role-gate.tsx
SIZE: 0.43 KB
====================================================================================================
"use client";

import type { ReactNode } from "react";
import { useAuth } from "@/hooks/use-auth";
import type { Role } from "@/types";

interface RoleGateProps {
  children: ReactNode;
  allowedRoles: Role[];
}

export default function RoleGate({ children, allowedRoles }: RoleGateProps) {
  const { role } = useAuth();

  if (!role || !allowedRoles.includes(role)) {
    return null;
  }

  return <>{children}</>;
}




====================================================================================================
FILE: components\charts\passes-by-company-chart.tsx
SIZE: 4.53 KB
====================================================================================================
"use client";

import { useEffect, useRef, useMemo } from "react";
import { CardDescription } from "../ui/card";
import { useData } from "@/context/data-provider";
import { Chart, ChartConfiguration, registerables } from 'chart.js';

if (typeof window !== 'undefined') {
  Chart.register(...registerables);
}

export function PassesByCompanyChart() {
  const { passes, loading } = useData();
  const chartRef = useRef<HTMLCanvasElement>(null);
  const chartInstance = useRef<Chart | null>(null);

  const chartData = useMemo(() => {
    if (!passes.length) return { labels: [], data: [] };
    
    const counts = passes.reduce((acc, pass) => {
      const company = pass.type === 'standard' ? pass.ownerCompany : pass.createdByCompany || 'N/A';
      acc[company] = (acc[company] || 0) + 1;
      return acc;
    }, {} as Record<string, number>);

    const sortedData = Object.entries(counts)
      .map(([company, count]) => ({ name: company, count }))
      .sort((a, b) => b.count - a.count)
      .slice(0, 10);

    return {
      labels: sortedData.map(d => d.name),
      data: sortedData.map(d => d.count)
    };
  }, [passes]);

  useEffect(() => {
    if (!chartRef.current || loading) return;

    if (chartInstance.current) {
      chartInstance.current.destroy();
    }

    const ctx = chartRef.current.getContext('2d');
    if (!ctx) return;

    const config: ChartConfiguration = {
      type: 'bar',
      data: {
        labels: chartData.labels,
        datasets: [{
          label: 'Passes',
          data: chartData.data,
          backgroundColor: '#22c55e',
          borderColor: '#16a34a',
          borderWidth: 2,
          borderRadius: 6,
          barThickness: 25
        }]
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        layout: {
          padding: {
            top: 30
          }
        },
        plugins: {
          legend: { display: false },
          tooltip: {
            callbacks: {
              label: function(context) {
                return `${context.parsed.y} passes`;
              }
            }
          }
        },
        scales: {
          x: {
            grid: { display: false },
            ticks: {
              font: { size: 10 },
              maxRotation: 45,
              minRotation: 45
            }
          },
          y: {
            beginAtZero: true,
            grid: { color: '#f1f1f1' },
            ticks: {
              font: { size: 11 },
              stepSize: 1
            }
          }
        }
      },
      plugins: [{
        id: 'datalabels',
        afterDatasetsDraw(chart) {
          const ctx = chart.ctx;
          chart.data.datasets.forEach((dataset, i) => {
            const meta = chart.getDatasetMeta(i);
            meta.data.forEach((bar: any, index) => {
              const data = dataset.data[index] as number;
              if (data > 0) {
                // Add shadow for visibility
                ctx.shadowColor = 'rgba(0, 0, 0, 0.5)';
                ctx.shadowBlur = 2;
                ctx.shadowOffsetX = 1;
                ctx.shadowOffsetY = 1;
                
                ctx.fillStyle = '#ffffff'; // Force white
                ctx.font = 'bold 14px sans-serif';
                ctx.textAlign = 'center';
                ctx.textBaseline = 'middle';
                
                // Draw inside bar
                const barHeight = bar.base - bar.y;
                if (barHeight > 20) {
                  ctx.fillText(data.toString(), bar.x, bar.y + (barHeight / 2));
                }
                
                ctx.shadowColor = 'transparent';
                ctx.shadowBlur = 0;
              }
            });
          });
        }
      }]
    };

    chartInstance.current = new Chart(ctx, config);

    return () => {
      if (chartInstance.current) {
        chartInstance.current.destroy();
      }
    };
  }, [chartData, loading]);

  if (loading) {
    return <div className="h-[350px] w-full flex items-center justify-center text-muted-foreground">Loading chart data...</div>;
  }

  if (!chartData.labels.length) {
    return <div className="h-[350px] w-full flex items-center justify-center text-muted-foreground">No pass data available.</div>;
  }

  return (
    <>
      <CardDescription>Top 10 companies by passes issued</CardDescription>
      <div className="h-[350px] w-full relative">
        <canvas ref={chartRef} />
      </div>
    </>
  );
}




====================================================================================================
FILE: components\charts\passes-by-location-chart.tsx
SIZE: 4.42 KB
====================================================================================================
"use client";

import { useEffect, useRef, useMemo } from "react";
import { CardDescription } from "../ui/card";
import { useData } from "@/context/data-provider";
import { Chart, ChartConfiguration, registerables } from 'chart.js';

if (typeof window !== 'undefined') {
  Chart.register(...registerables);
}

export function PassesByLocationChart() {
  const { passes, loading } = useData();
  const chartRef = useRef<HTMLCanvasElement>(null);
  const chartInstance = useRef<Chart | null>(null);

  const chartData = useMemo(() => {
    if (!passes.length) return { labels: [], data: [] };
    
    const counts = passes.reduce((acc, pass) => {
      acc[pass.location] = (acc[pass.location] || 0) + 1;
      return acc;
    }, {} as Record<string, number>);

    const sortedData = Object.entries(counts)
      .map(([location, count]) => ({ name: location, count }))
      .sort((a, b) => b.count - a.count);

    return {
      labels: sortedData.map(d => d.name),
      data: sortedData.map(d => d.count)
    };
  }, [passes]);

  useEffect(() => {
    if (!chartRef.current || loading) return;

    if (chartInstance.current) {
      chartInstance.current.destroy();
    }

    const ctx = chartRef.current.getContext('2d');
    if (!ctx) return;

    const config: ChartConfiguration = {
      type: 'bar',
      data: {
        labels: chartData.labels,
        datasets: [{
          label: 'Passes',
          data: chartData.data,
          backgroundColor: '#22c55e',
          borderColor: '#16a34a',
          borderWidth: 2,
          borderRadius: 6,
          barThickness: 25
        }]
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        layout: {
          padding: {
            top: 30
          }
        },
        plugins: {
          legend: { display: false },
          tooltip: {
            callbacks: {
              label: function(context) {
                return `${context.parsed.y} passes`;
              }
            }
          }
        },
        scales: {
          x: {
            grid: { display: false },
            ticks: {
              font: { size: 10 },
              maxRotation: 45,
              minRotation: 45
            }
          },
          y: {
            beginAtZero: true,
            grid: { color: '#f1f1f1' },
            ticks: {
              font: { size: 11 },
              stepSize: 1
            }
          }
        }
      },
      plugins: [{
        id: 'datalabels',
        afterDatasetsDraw(chart) {
          const ctx = chart.ctx;
          chart.data.datasets.forEach((dataset, i) => {
            const meta = chart.getDatasetMeta(i);
            meta.data.forEach((bar: any, index) => {
              const data = dataset.data[index] as number;
              if (data > 0) {
                // Add shadow for visibility
                ctx.shadowColor = 'rgba(0, 0, 0, 0.5)';
                ctx.shadowBlur = 2;
                ctx.shadowOffsetX = 1;
                ctx.shadowOffsetY = 1;
                
                ctx.fillStyle = '#ffffff'; // Force white
                ctx.font = 'bold 14px sans-serif';
                ctx.textAlign = 'center';
                ctx.textBaseline = 'middle';
                
                // Draw inside bar
                const barHeight = bar.base - bar.y;
                if (barHeight > 20) {
                  ctx.fillText(data.toString(), bar.x, bar.y + (barHeight / 2));
                }
                
                ctx.shadowColor = 'transparent';
                ctx.shadowBlur = 0;
              }
            });
          });
        }
      }]
    };

    chartInstance.current = new Chart(ctx, config);

    return () => {
      if (chartInstance.current) {
        chartInstance.current.destroy();
      }
    };
  }, [chartData, loading]);

  if (loading) {
    return <div className="h-[350px] w-full flex items-center justify-center text-muted-foreground">Loading chart data...</div>;
  }

  if (!chartData.labels.length) {
    return <div className="h-[350px] w-full flex items-center justify-center text-muted-foreground">No pass data available.</div>;
  }

  return (
    <>
      <CardDescription>Pass distribution by work location</CardDescription>
      <div className="h-[350px] w-full relative">
        <canvas ref={chartRef} />
      </div>
    </>
  );
}




====================================================================================================
FILE: components\charts\passes-by-month-chart.tsx
SIZE: 2.42 KB
====================================================================================================
"use client";

import { Bar, BarChart, CartesianGrid, XAxis, YAxis, Tooltip, Legend, ResponsiveContainer, LabelList } from "recharts";
import { useMemo } from "react";
import { format, getMonth, isThisYear } from "date-fns";
import { CardDescription } from "../ui/card";
import { useData } from "@/context/data-provider";

export function PassesByMonthChart() {
  const { passes, loading } = useData();

  const chartData = useMemo(() => {
    const now = new Date();
    const monthlyData = Array.from({ length: 12 }, (_, i) => ({
      month: format(new Date(0, i), "MMM"),
      Active: 0,
      Expired: 0,
      Revoked: 0
    }));

    passes.forEach((pass) => {
      const createdAtDate = pass.createdAt.toDate();
      if (isThisYear(createdAtDate)) {
        const monthIndex = getMonth(createdAtDate);
        
        if (pass.status === "revoked") {
          monthlyData[monthIndex].Revoked += 1;
        } else if (pass.expiresAt.toDate() < now) {
          monthlyData[monthIndex].Expired += 1;
        } else {
          monthlyData[monthIndex].Active += 1;
        }
      }
    });

    return monthlyData;
  }, [passes]);

  if (loading) {
    return <div className="h-[350px] w-full flex items-center justify-center text-muted-foreground">Loading...</div>;
  }

  return (
    <>
      <CardDescription>Active vs. Expired passes this year</CardDescription>
      <ResponsiveContainer width="100%" height={350}>
        <BarChart data={chartData} margin={{ top: 20 }}>
          <CartesianGrid strokeDasharray="3 3" vertical={false} />
          <XAxis dataKey="month" tick={{ fontSize: 11 }} />
          <YAxis tick={{ fontSize: 11 }} />
          <Tooltip />
          <Legend />
          <Bar dataKey="Active" stackId="stack" fill="#22c55e" radius={[0, 0, 0, 0]}>
            <LabelList dataKey="Active" position="center" fill="#fff" fontWeight="bold" formatter={(value: number) => value || ''} />
          </Bar>
          <Bar dataKey="Expired" stackId="stack" fill="#ef4444" radius={[0, 0, 0, 0]}>
            <LabelList dataKey="Expired" position="center" fill="#fff" fontWeight="bold" formatter={(value: number) => value || ''} />
          </Bar>
          <Bar dataKey="Revoked" stackId="stack" fill="#eab308" radius={[4, 4, 0, 0]}>
            <LabelList dataKey="Revoked" position="center" fill="#fff" fontWeight="bold" formatter={(value: number) => value || ''} />
          </Bar>
        </BarChart>
      </ResponsiveContainer>
    </>
  );
}




====================================================================================================
FILE: components\charts\passes-status-pie-chart.tsx
SIZE: 4.06 KB
====================================================================================================
"use client";

import { useEffect, useRef, useMemo } from "react";
import { CardDescription } from "../ui/card";
import { useData } from "@/context/data-provider";
import { Chart, ChartConfiguration, registerables } from 'chart.js';
import ChartDataLabels from 'chartjs-plugin-datalabels';

if (typeof window !== 'undefined') {
  Chart.register(...registerables, ChartDataLabels);
}

export function PassesStatusPieChart() {
  const { passes, loading } = useData();
  const chartRef = useRef<HTMLCanvasElement>(null);
  const chartInstance = useRef<Chart | null>(null);

  const { chartData, totalPasses } = useMemo(() => {
    if (!passes.length) return { chartData: { data: [], labels: [] }, totalPasses: 0 };
    
    const now = new Date();
    
    const counts = passes.reduce(
      (acc, pass) => {
        let actualStatus: string;
        if (pass.status === "revoked") {
          actualStatus = "revoked";
        } else if (pass.expiresAt.toDate() < now) {
          actualStatus = "expired";
        } else {
          actualStatus = "active";
        }
        
        acc[actualStatus] = (acc[actualStatus] || 0) + 1;
        return acc;
      },
      {} as Record<string, number>
    );

    return {
      chartData: {
        data: [counts.active || 0, counts.expired || 0, counts.revoked || 0],
        labels: ["Active", "Expired", "Revoked"]
      },
      totalPasses: passes.length
    };
  }, [passes]);

  useEffect(() => {
    if (!chartRef.current || loading) return;

    if (chartInstance.current) {
      chartInstance.current.destroy();
    }

    const ctx = chartRef.current.getContext('2d');
    if (!ctx) return;

    const config: ChartConfiguration = {
      type: 'pie',
      data: {
        labels: chartData.labels,
        datasets: [{
          data: chartData.data,
          backgroundColor: ['#22c55e', '#ef4444', '#eab308'], // Green, Red, Yellow
          borderColor: '#ffffff',
          borderWidth: 3,
          hoverOffset: 15
        }]
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        plugins: {
          legend: {
            position: 'bottom',
            labels: {
              padding: 15,
              font: { size: 13 },
              usePointStyle: true,
              pointStyle: 'circle'
            }
          },
          tooltip: {
            callbacks: {
              label: function(context) {
                const label = context.label || '';
                const value = context.parsed || 0;
                const total = context.dataset.data.reduce((a: number, b: number) => a + b, 0);
                const percentage = ((value / total) * 100).toFixed(0);
                return `${label}: ${value} (${percentage}%)`;
              }
            }
          },
          datalabels: {
            color: '#fff',
            font: {
              weight: 'bold',
              size: 16
            },
            formatter: (value: number, context: any) => {
              const total = context.dataset.data.reduce((a: number, b: number) => a + b, 0);
              const percentage = ((value / total) * 100).toFixed(0);
              return percentage + '%';
            }
          }
        }
      }
    };

    chartInstance.current = new Chart(ctx, config);

    return () => {
      if (chartInstance.current) {
        chartInstance.current.destroy();
      }
    };
  }, [chartData, loading]);

  if (loading) {
    return <div className="h-[300px] w-full flex items-center justify-center text-muted-foreground">Loading chart data...</div>;
  }

  if (!chartData.data.length || chartData.data.every(d => d === 0)) {
    return <div className="h-[300px] w-full flex items-center justify-center text-muted-foreground">No pass data available.</div>;
  }

  return (
    <>
      <CardDescription>
        Total of {totalPasses} passes in the system
      </CardDescription>
      <div className="h-[300px] w-full relative">
        <canvas ref={chartRef} />
      </div>
    </>
  );
}




====================================================================================================
FILE: components\charts\usage-insights.tsx
SIZE: 2.79 KB
====================================================================================================
"use client";

import { useEffect, useState } from "react";
import { generatePassUsageInsights } from "@/ai/flows/generate-pass-usage-insights";
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Lightbulb, Loader2, AlertCircle } from "lucide-react";
import { useData } from "@/context/data-provider";

export function UsageInsights() {
  const { passes, loading: dataLoading } = useData();
  const [insights, setInsights] = useState("");
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState("");

  useEffect(() => {
    async function getInsights() {
      if (dataLoading) return;

      try {
        setLoading(true);
        setError("");
        
        if (passes.length === 0) {
          setInsights("Not enough data to generate insights. Please create more passes.");
          setLoading(false);
          return;
        }

        // Use a sample for performance if there are many passes
        const passesForAnalysis = passes.length > 100 ? passes.slice(0, 100) : passes;

        const passDataString = JSON.stringify(passesForAnalysis.map(p => ({
            ...p,
            createdAt: p.createdAt.toDate().toISOString(),
            expiresAt: p.expiresAt.toDate().toISOString(),
        })));

        const result = await generatePassUsageInsights({ passData: passDataString });
        setInsights(result.insights);
      } catch (e) {
        console.error("Error generating insights:", e);
        // Set a user-friendly error message instead of crashing
        setError("AI insights are temporarily unavailable. The statistics charts below are still working.");
      } finally {
        setLoading(false);
      }
    }
    getInsights();
  }, [passes, dataLoading]);

  // Don't show anything while data is loading
  if (dataLoading) {
    return null;
  }

  // Show error state without crashing the page
  if (error) {
    return (
      <Alert variant="default">
        <AlertCircle className="h-4 w-4" />
        <AlertTitle className="font-headline">AI Insights Unavailable</AlertTitle>
        <AlertDescription>
          <p className="text-muted-foreground">{error}</p>
        </AlertDescription>
      </Alert>
    );
  }

  return (
    <Alert>
      <Lightbulb className="h-4 w-4" />
      <AlertTitle className="font-headline">AI-Powered Insights</AlertTitle>
      <AlertDescription>
        {loading && (
          <div className="flex items-center gap-2">
            <Loader2 className="h-4 w-4 animate-spin" />
            <span>Generating analysis of recent pass activity...</span>
          </div>
        )}
        {!loading && insights && (
            <div className="prose prose-sm dark:prose-invert" dangerouslySetInnerHTML={{ __html: insights.replace(/\n/g, '<br />') }} />
        )}
      </AlertDescription>
    </Alert>
  );
}




====================================================================================================
FILE: components\dashboard\header.tsx
SIZE: 0.53 KB
====================================================================================================
"use client";

import { UserNav } from "./user-nav";
import Link from "next/link";
import { ShieldAlert } from "lucide-react";
import RoleGate from "../auth/role-gate";

export function Header() {
  return (
    <header className="sticky top-0 z-10 flex h-16 items-center gap-4 border-b bg-background/80 px-4 backdrop-blur-sm md:px-6">
       <div className="flex items-center gap-2">
         
       </div>
      <div className="ml-auto flex items-center gap-4">
        <UserNav />
      </div>
    </header>
  );
}




====================================================================================================
FILE: components\dashboard\sidebar-nav.tsx
SIZE: 6.03 KB
====================================================================================================
"use client";

import Link from "next/link";
import { usePathname } from "next/navigation";
import {
  ListOrdered,
  PlusCircle,
  Search,
  BarChart2,
  Users,
  ShieldCheck,
  LogOut,
  ChevronDown,
  LayoutDashboard,
  ShieldAlert,
  Share2,
} from "lucide-react";
import { useAuth } from "@/hooks/use-auth";
import { Button } from "../ui/button";
import RoleGate from "../auth/role-gate";
import { Collapsible, CollapsibleContent, CollapsibleTrigger } from "@/components/ui/collapsible";
import { useState } from "react";
import { cn } from "@/lib/utils";
import { Avatar, AvatarFallback } from "../ui/avatar";
import { useToast } from "@/hooks/use-toast";

const dashboardItems = [
  { href: "/admin/dashboard/records", label: "Records", icon: ListOrdered },
  { href: "/admin/dashboard/search", label: "Search Pass", icon: Search },
  { href: "/admin/dashboard/statistics", label: "Statistics", icon: BarChart2 },
];

export default function SidebarNav() {
  const pathname = usePathname();
  const { user, handleSignOut } = useAuth();
  const [isDashboardOpen, setIsDashboardOpen] = useState(true);
  const { toast } = useToast();

  const getInitials = (name: string) => {
    const names = name.split(' ');
    if (names.length > 1) {
        return `${names[0][0]}${names[names.length - 1][0]}`.toUpperCase();
    }
    return name.substring(0, 2).toUpperCase();
  }

  const handleShare = async () => {
    const shareUrl = `${window.location.origin}/gate-guard`;
    if (navigator.share) {
      try {
        await navigator.share({
          title: 'Guardian Gate Guard',
          text: 'Access the gate guard verification page.',
          url: shareUrl,
        });
      } catch (error) {
        console.error('Error sharing:', error);
      }
    } else {
      navigator.clipboard.writeText(shareUrl).then(() => {
        toast({
          title: "Link Copied!",
          description: "The Gate Guard page link has been copied to your clipboard.",
        });
      });
    }
  };

  return (
    <div className="flex flex-col h-full">
      <div className="border-b p-4">
        <div className="flex items-center gap-2">
            <ShieldCheck className="w-8 h-8 text-primary" />
            <div>
                <p className="font-headline text-lg font-semibold">Guardian</p>
            </div>
        </div>
      </div>
      <div className="p-4 border-b">
         <p className="text-sm text-muted-foreground">Welcome, {user?.fullName}</p>
      </div>
      <nav className="flex-1 space-y-1 p-4">
        <Link href="/verifier">
          <button
            className={`w-full text-left rounded-md px-3 py-2 transition-colors flex items-center gap-3 font-medium ${
              pathname === '/verifier' ? 'bg-primary text-primary-foreground' : 'text-muted-foreground hover:text-foreground hover:bg-muted'
            }`}
          >
            <ShieldAlert className="h-4 w-4" />
            <span>Verifier</span>
          </button>
        </Link>

        <Link href="/admin/dashboard/generate">
          <button
            className={`w-full text-left rounded-md px-3 py-2 transition-colors flex items-center gap-3 font-medium ${
              pathname === '/admin/dashboard/generate' ? 'bg-primary text-primary-foreground' : 'text-muted-foreground hover:text-foreground hover:bg-muted'
            }`}
          >
            <PlusCircle className="h-4 w-4" />
            <span>Generate</span>
          </button>
        </Link>

        <Collapsible open={isDashboardOpen} onOpenChange={setIsDashboardOpen} className="space-y-2">
          <CollapsibleTrigger asChild>
             <Button variant="ghost" className="w-full justify-between">
                <div className="flex items-center gap-3">
                    <LayoutDashboard className="h-4 w-4" />
                    <span>Dashboard</span>
                </div>
                <ChevronDown className={cn("h-4 w-4 transition-transform", isDashboardOpen && "rotate-180")} />
            </Button>
          </CollapsibleTrigger>
          <CollapsibleContent className="space-y-1 pl-4">
            {dashboardItems.map((item) => {
                const isActive = pathname === item.href;
                return (
                   <Link key={item.href} href={item.href}>
                    <button
                      className={`w-full text-left rounded-md px-3 py-2 transition-colors flex items-center gap-3 ${
                        isActive ? "bg-primary text-primary-foreground" : "hover:bg-muted"
                      }`}
                    >
                      <item.icon className="h-4 w-4" />
                      <span>{item.label}</span>
                    </button>
                  </Link>
                );
            })}
          </CollapsibleContent>
        </Collapsible>

        <RoleGate allowedRoles={["admin", "owner"]}>
          <Link href="/admin/dashboard/users">
            <button
              className={`w-full text-left rounded-md px-3 py-2 transition-colors flex items-center gap-3 font-medium ${
                pathname === '/admin/dashboard/users' ? 'bg-primary text-primary-foreground' : 'text-muted-foreground hover:text-foreground hover:bg-muted'
              }`}
            >
              <Users className="h-4 w-4" />
              <span>Manage Users</span>
            </button>
          </Link>
        </RoleGate>

        <Button
          variant="ghost"
          onClick={handleShare}
          className="w-full justify-start font-medium text-muted-foreground hover:text-foreground hover:bg-muted"
        >
          <Share2 className="h-4 w-4 mr-3" />
          <span>Gate Guard</span>
        </Button>
      </nav>
      <div className="p-4 border-t mt-auto">
          <Button variant="ghost" onClick={handleSignOut} className="w-full justify-start">
            {user && (
                <Avatar className="h-6 w-6 mr-2">
                    <AvatarFallback className="text-xs">{getInitials(user.fullName)}</AvatarFallback>
                </Avatar>
            )}
            <LogOut className="mr-2 h-4 w-4" />
            Logout
          </Button>
      </div>
    </div>
  );
}




====================================================================================================
FILE: components\dashboard\user-nav.tsx
SIZE: 2.01 KB
====================================================================================================
"use client";

import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { Button } from "@/components/ui/button";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuGroup,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import { useAuth } from "@/hooks/use-auth";
import { LogOut, User as UserIcon } from "lucide-react";

export function UserNav() {
  const { user, handleSignOut } = useAuth();

  if (!user) return null;

  const getInitials = (name: string) => {
    const names = name.split(' ');
    if (names.length > 1) {
        return `${names[0][0]}${names[names.length - 1][0]}`.toUpperCase();
    }
    return name.substring(0, 2).toUpperCase();
  }

  return (
    <DropdownMenu>
      <DropdownMenuTrigger asChild>
        <Button variant="ghost" className="relative h-8 w-8 rounded-full">
          <Avatar className="h-8 w-8">
            <AvatarFallback>{getInitials(user.fullName)}</AvatarFallback>
          </Avatar>
        </Button>
      </DropdownMenuTrigger>
      <DropdownMenuContent className="w-56" align="end" forceMount>
        <DropdownMenuLabel className="font-normal">
          <div className="flex flex-col space-y-1">
            <p className="text-sm font-medium leading-none">{user.fullName}</p>
            <p className="text-xs leading-none text-muted-foreground">
              {user.email}
            </p>
          </div>
        </DropdownMenuLabel>
        <DropdownMenuSeparator />
        <DropdownMenuGroup>
          <DropdownMenuItem>
            <UserIcon className="mr-2 h-4 w-4" />
            <span>Profile</span>
          </DropdownMenuItem>
        </DropdownMenuGroup>
        <DropdownMenuSeparator />
        <DropdownMenuItem onClick={handleSignOut}>
          <LogOut className="mr-2 h-4 w-4" />
          <span>Log out</span>
        </DropdownMenuItem>
      </DropdownMenuContent>
    </DropdownMenu>
  );
}




====================================================================================================
FILE: components\error-boundary\error-boundary.tsx
SIZE: 2.05 KB
====================================================================================================
"use client";
import React from 'react';
import { AlertCircle } from 'lucide-react';

interface Props {
  children: React.ReactNode;
}

interface State {
  hasError: boolean;
  error: Error | null;
}

export class ErrorBoundary extends React.Component<Props, State> {
  constructor(props: Props) {
    super(props);
    this.state = { hasError: false, error: null };
  }

  static getDerivedStateFromError(error: Error): State {
    return { hasError: true, error };
  }

  componentDidCatch(error: Error, errorInfo: React.ErrorInfo) {
    // Log scanner errors but don't show them to users
    if (error.message?.includes('scanner') || error.message?.includes('Cannot stop')) {
      console.log('Scanner error caught (safe to ignore):', error.message);
      // Reset error state immediately for scanner errors
      setTimeout(() => {
        this.setState({ hasError: false, error: null });
      }, 0);
      return;
    }
    
    console.error('Error caught by boundary:', error, errorInfo);
  }

  render() {
    // Don't show error UI for scanner errors - they're harmless
    if (this.state.hasError && this.state.error?.message?.includes('Cannot stop')) {
      return this.props.children;
    }

    if (this.state.hasError) {
      return (
        <div className="min-h-screen bg-gray-50 flex items-center justify-center p-4">
          <div className="bg-white rounded-lg shadow-lg p-6 max-w-md w-full">
            <div className="flex items-center gap-3 text-red-600 mb-4">
              <AlertCircle className="w-6 h-6" />
              <h2 className="text-lg font-semibold">Something went wrong</h2>
            </div>
            <p className="text-gray-600 mb-4">
              An error occurred. Please refresh the page to continue.
            </p>
            <button
              onClick={() => window.location.reload()}
              className="w-full bg-green-600 text-white px-4 py-2 rounded-lg hover:bg-green-700"
            >
              Refresh Page
            </button>
          </div>
        </div>
      );
    }

    return this.props.children;
  }
}



====================================================================================================
FILE: components\forms\generate-batch-form.tsx
SIZE: 9.58 KB
====================================================================================================
"use client";

import { useState, useRef } from "react";
import { Button } from "@/components/ui/button";
import { useToast } from "@/hooks/use-toast";
import { UploadCloud, FileText, Download, FileUp, Loader2 } from 'lucide-react';
import { useAuth } from "@/hooks/use-auth";
import { format } from "date-fns";
import { collection, writeBatch, doc } from "firebase/firestore";
import { db } from "@/lib/firestore";
import { buildQrPayload } from "@/lib/qr";
import type { Pass } from "@/types";

export default function GenerateBatchForm() {
  const [file, setFile] = useState<File | null>(null);
  const [isProcessing, setIsProcessing] = useState(false);
  const { toast } = useToast();
  const fileInputRef = useRef<HTMLInputElement>(null);
  const { user } = useAuth();

  const handleFileChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    if (event.target.files) {
      const selectedFile = event.target.files[0];
      if (selectedFile && selectedFile.type === "text/csv") {
        setFile(selectedFile);
      } else {
        toast({
          variant: "destructive",
          title: "Invalid File Type",
          description: "Please select a valid .csv file.",
        });
        setFile(null);
      }
    }
  };
  
  const handleDownloadSample = () => {
    if (!user) {
      toast({
        variant: "destructive",
        title: "User not found",
        description: "You must be logged in to download the sample.",
      });
      return;
    }
    
    const locations = ["SEC 01", "SEC 02", "SEC 03", "SEC 04", "SEC 05", "SEC 06", "SEC 07", "SEC 08", "SEC 09", "SEC 10", "LD 01", "LD 02", "LD 03", "LD 04", "LD 05", "LD 06", "Pump Station"];

    const header = "type,plateAlpha,plateNum,ownerName,serial,ownerCompany,location,expiresAt,status,createdAt,createdBy,createdByName,createdByCompany\n";
    
    const comments = [
      `# Field 'type': Use 'standard' or 'visitor'`,
      `# Field 'status': Use 'active', 'expired', or 'revoked'`,
      `# Field 'location': Choose from: ${locations.join(', ')}`,
      `# Fields 'createdAt', 'createdBy', 'createdByName', 'createdByCompany' will be pre-filled from your session if left blank.`,
      `# Date format for 'expiresAt' and 'createdAt' should be YYYY-MM-DD`,
    ].join('\n') + '\n';
      
    const now = new Date();
    const expiryDate = new Date();
    expiryDate.setFullYear(expiryDate.getFullYear() + 1);

    const sampleRow1 = [
      'standard', 'ABC', '1234', 'John Doe', 'SN-12345', 'Acme Inc.', 'SEC 01', format(expiryDate, 'yyyy-MM-dd'), 'active', format(now, 'yyyy-MM-dd'), user.uid, user.fullName, user.company
    ].join(',');

    const sampleRow2 = [
        'visitor', 'XYZ', '9876', 'Jane Smith (Visitor)', ''/*serial*/, ''/*ownerCompany*/, 'SEC 02', format(now, 'yyyy-MM-dd'), 'active', format(now, 'yyyy-MM-dd'), user.uid, user.fullName, user.company
    ].join(',');
    
    const csvContent = comments + header + sampleRow1 + '\n' + sampleRow2 + '\n';

    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
    const link = document.createElement("a");
    const url = URL.createObjectURL(blob);
    link.setAttribute("href", url);
    link.setAttribute("download", "sample-batch.csv");
    link.style.visibility = 'hidden';
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
  };


  const handleSubmit = async (event: React.FormEvent) => {
    event.preventDefault();
    if (!file || !user) {
      toast({
        variant: "destructive",
        title: "Upload Failed",
        description: "Please select a .csv file and ensure you are logged in.",
      });
      return;
    }
    setIsProcessing(true);
    
    const reader = new FileReader();
    reader.onload = async (e) => {
        const text = e.target?.result;
        if (typeof text !== 'string') {
            toast({ variant: "destructive", title: "Error", description: "Could not read the file." });
            setIsProcessing(false);
            return;
        }

        const lines = text.split('\n').filter(line => line.trim() && !line.trim().startsWith('#'));
        const header = lines.shift()?.trim().split(',') || [];
        const passesRef = collection(db, "passes");
        const batch = writeBatch(db);

        let successCount = 0;
        let errorCount = 0;

        for (const line of lines) {
            const values = line.trim().split(',');
            if (values.length !== header.length) {
                errorCount++;
                continue;
            }

            const entry = header.reduce((obj, key, index) => {
                obj[key.trim()] = values[index].trim();
                return obj;
            }, {} as Record<string, string>);

            try {
                const passType = entry.type?.toLowerCase();
                if (passType !== 'standard' && passType !== 'visitor') {
                  errorCount++;
                  continue;
                }

                const expiryDate = new Date(entry.expiresAt);
                
                // Create new document reference with auto-generated ID
                const newDocRef = doc(passesRef);
                
                // Build qrPayload using the generated document ID
                const qrPayload = buildQrPayload(
                  newDocRef.id, 
                  entry.plateAlpha.toUpperCase(), 
                  entry.plateNum, 
                  expiryDate
                );

                const newPass: Partial<Pass> = {
                    type: passType,
                    plateAlpha: entry.plateAlpha.toUpperCase(),
                    plateNum: entry.plateNum,
                    location: entry.location,
                    expiresAt: expiryDate,
                    status: entry.status as any,
                    createdAt: entry.createdAt ? new Date(entry.createdAt) : new Date(),
                    createdBy: entry.createdBy || user.uid,
                    createdByName: entry.createdByName || user.fullName,
                    createdByCompany: entry.createdByCompany || user.company,
                    qrPayload: qrPayload, // FIX: Add qrPayload to each pass
                };

                if (passType === 'standard') {
                    (newPass as any).ownerName = entry.ownerName;
                    (newPass as any).serial = entry.serial;
                    (newPass as any).ownerCompany = entry.ownerCompany;
                } else { // visitor
                    (newPass as any).visitorName = entry.ownerName; // Using ownerName for visitor name as per sample
                    (newPass as any).personToVisit = 'N/A'; // Placeholder as not in CSV
                    (newPass as any).purpose = 'N/A'; // Placeholder as not in CSV
                }
                
                batch.set(newDocRef, newPass);
                successCount++;

            } catch (parseError) {
                console.error("Error parsing line:", line, parseError);
                errorCount++;
            }
        }

        if (successCount > 0) {
            await batch.commit();
        }

        toast({
            title: "Batch Processing Complete",
            description: `${successCount} passes created successfully. ${errorCount} rows failed.`,
        });

        setIsProcessing(false);
        setFile(null);
        if(fileInputRef.current) {
            fileInputRef.current.value = "";
        }
    };

    reader.onerror = () => {
        toast({ variant: "destructive", title: "Error", description: "Failed to read the file."});
        setIsProcessing(false);
    }
    
    reader.readAsText(file);
  };

  return (
    <div className="space-y-6">
        <div className="rounded-lg border-2 border-dashed border-muted-foreground/30 p-8 text-center">
            <UploadCloud className="mx-auto h-12 w-12 text-muted-foreground" />
            <h3 className="mt-4 text-lg font-semibold text-foreground">Upload Batch File</h3>
            <p className="mt-2 text-sm text-muted-foreground">
                Download the sample .csv file to see the required format and columns.
            </p>
            <div className="mt-6 flex flex-col sm:flex-row items-center justify-center gap-4">
                 <Button type="button" variant="outline" onClick={handleDownloadSample}>
                    <Download className="mr-2 h-4 w-4" />
                    Download Sample .csv
                </Button>
                <Button type="button" onClick={() => fileInputRef.current?.click()}>
                    <FileUp className="mr-2 h-4 w-4" />
                    Choose File
                </Button>
                 <input 
                    ref={fileInputRef}
                    type="file"
                    className="hidden"
                    accept=".csv,text/csv"
                    onChange={handleFileChange}
                 />
            </div>
            {file && (
                <div className="mt-4 flex items-center justify-center gap-2 text-sm font-medium text-foreground">
                    <FileText className="h-4 w-4" />
                    <span>{file.name}</span>
                </div>
            )}
        </div>

        <Button onClick={handleSubmit} type="submit" disabled={!file || isProcessing} className="w-full text-base py-6">
            {isProcessing ? <Loader2 className="mr-2 h-5 w-5 animate-spin" /> : <FileUp className="mr-2 h-5 w-5" />}
            {isProcessing ? "Processing Batch File..." : "Process Batch File"}
        </Button>
    </div>
  );
}



====================================================================================================
FILE: components\forms\generate-standard-form.tsx
SIZE: 10.66 KB
====================================================================================================
"use client";

import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import * as z from "zod";
import { addDoc, collection, updateDoc, serverTimestamp, query, where, getDocs } from "firebase/firestore";
import { db, passConverter } from "@/lib/firestore";
import { useAuth } from "@/hooks/use-auth";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { Popover, PopoverContent, PopoverTrigger } from "@/components/ui/popover";
import { CalendarIcon, Loader2 } from "lucide-react";
import { Calendar } from "@/components/ui/calendar";
import { cn } from "@/lib/utils";
import { format } from "date-fns";
import { useToast } from "@/hooks/use-toast";
import { buildQrPayload } from "@/lib/qr";
import { useState } from "react";
import PassPreviewDialog from "./pass-preview-dialog";
import type { StandardPass, Pass } from "@/types";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "../ui/select";

const formSchema = z.object({
  plateAlpha: z.string().min(1, "Required").max(4, "Max 4 chars").regex(/^[a-zA-Z]+$/, "Only letters allowed"),
  plateNum: z.string().min(1, "Required").max(5, "Max 5 digits").regex(/^\d+$/, "Only numbers"),
  ownerName: z.string().min(2, "Required"),
  serial: z.string().min(1, "Required"),
  ownerCompany: z.string().min(1, "Required"),
  location: z.string().min(1, "Required"),
  expiresAt: z.date({ required_error: "Expiry date is required." }),
});

const locations = ["SEC 01", "SEC 02", "SEC 03", "SEC 04", "SEC 05", "SEC 06", "SEC 07", "SEC 08", "SEC 09", "SEC 10", "LD 01", "LD 02", "LD 03", "LD 04", "LD 05", "LD 06", "Pump Station"];

export default function GenerateStandardForm() {
  const { user, loading: userLoading } = useAuth();
  const { toast } = useToast();
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [generatedPass, setGeneratedPass] = useState<Pass | null>(null);

  const form = useForm<z.infer<typeof formSchema>>({
    resolver: zodResolver(formSchema),
    defaultValues: {
      plateAlpha: "",
      plateNum: "",
      ownerName: "",
      serial: "",
      ownerCompany: "",
      location: "",
    },
  });

  async function onSubmit(values: z.infer<typeof formSchema>) {
    if (!user) {
      toast({ variant: "destructive", title: "Authentication Error", description: "You must be logged in to create a pass." });
      return;
    }
    setIsSubmitting(true);

    try {
      const plateAlphaUpper = values.plateAlpha.toUpperCase();
      
      // Check for existing passes with same plate
      const passCollection = collection(db, "passes").withConverter(passConverter);
      const duplicateQuery = query(
        passCollection,
        where("plateAlpha", "==", plateAlphaUpper),
        where("plateNum", "==", values.plateNum)
      );
      
      const existingPasses = await getDocs(duplicateQuery);
      
      // Check if any existing pass is active or not expired
      const now = new Date();
      const hasActivePass = existingPasses.docs.some(doc => {
        const pass = doc.data();
        if (pass.status === "revoked") return false;
        const expiryDate = pass.expiresAt.toDate();
        return expiryDate >= now; // Still active or not yet expired
      });
      
      if (hasActivePass) {
        toast({
          variant: "destructive",
          title: "Duplicate Pass",
          description: `An active pass already exists for plate ${plateAlphaUpper}-${values.plateNum}. Please wait until it expires or revoke it first.`,
        });
        setIsSubmitting(false);
        return;
      }

      const newPassData: Omit<StandardPass, 'id' | 'qrPayload'> = {
        type: "standard",
        plateAlpha: plateAlphaUpper,
        plateNum: values.plateNum,
        ownerName: values.ownerName,
        serial: values.serial,
        ownerCompany: values.ownerCompany,
        location: values.location,
        expiresAt: values.expiresAt,
        status: "active",
        createdAt: serverTimestamp(),
        createdBy: user.uid,
        createdByName: user.fullName,
        createdByCompany: user.company,
      };

      // Step 1: Create document in Firestore
      const docRef = await addDoc(passCollection, newPassData as any);

      // Step 2: Build qrPayload with the generated document ID
      const qrPayload = buildQrPayload(docRef.id, plateAlphaUpper, values.plateNum, values.expiresAt);

      // Step 3: Update Firestore document with qrPayload
      await updateDoc(docRef, { qrPayload });

      // Step 4: Prepare data for preview dialog
      const finalPassData = {
        ...newPassData,
        id: docRef.id,
        qrPayload: qrPayload,
        createdAt: new Date(),
        expiresAt: values.expiresAt,
      } as Pass;

      setGeneratedPass(finalPassData);
      form.reset();
      toast({
        title: "Pass Created",
        description: `Pass for ${plateAlphaUpper}-${values.plateNum} has been successfully created.`,
      });
    } catch (error) {
      console.error("Error creating pass:", error);
      toast({
        variant: "destructive",
        title: "Error",
        description: "Failed to create pass. Please try again.",
      });
    } finally {
      setIsSubmitting(false);
    }
  }

  if (userLoading) {
    return (
      <div className="flex items-center justify-center p-8">
        <Loader2 className="h-8 w-8 animate-spin text-primary" />
      </div>
    );
  }

  return (
    <>
      <Form {...form}>
        <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-6">
          <div className="grid grid-cols-1 gap-4 md:grid-cols-2">
            <FormField
              control={form.control}
              name="plateAlpha"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Plate Alpha</FormLabel>
                  <FormControl>
                    <Input
                      placeholder="ABC"
                      {...field}
                      onChange={(e) => field.onChange(e.target.value.toUpperCase())}
                      style={{ textTransform: 'uppercase' }}
                    />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            <FormField
              control={form.control}
              name="plateNum"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Plate Number</FormLabel>
                  <FormControl>
                    <Input placeholder="1234" {...field} />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
          </div>
          <FormField
            control={form.control}
            name="ownerName"
            render={({ field }) => (
              <FormItem>
                <FormLabel>Owner's Name</FormLabel>
                <FormControl>
                  <Input placeholder="John Doe" {...field} />
                </FormControl>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="serial"
            render={({ field }) => (
              <FormItem>
                <FormLabel>Serial</FormLabel>
                <FormControl>
                  <Input placeholder="SN-12345" {...field} />
                </FormControl>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="ownerCompany"
            render={({ field }) => (
              <FormItem>
                <FormLabel>Owner's Company</FormLabel>
                <FormControl>
                  <Input placeholder="Acme Inc." {...field} />
                </FormControl>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="location"
            render={({ field }) => (
              <FormItem>
                <FormLabel>Location</FormLabel>
                <Select onValueChange={field.onChange} defaultValue={field.value}>
                  <FormControl>
                    <SelectTrigger>
                      <SelectValue placeholder="Select a location" />
                    </SelectTrigger>
                  </FormControl>
                  <SelectContent>
                    {locations.map((loc) => (
                      <SelectItem key={loc} value={loc}>
                        {loc}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="expiresAt"
            render={({ field }) => (
              <FormItem className="flex flex-col">
                <FormLabel>Valid Until</FormLabel>
                <Popover>
                  <PopoverTrigger asChild>
                    <FormControl>
                      <Button
                        variant={"outline"}
                        className={cn(
                          "pl-3 text-left font-normal",
                          !field.value && "text-muted-foreground"
                        )}
                      >
                        {field.value ? format(field.value, "PPP") : <span>Pick a date</span>}
                        <CalendarIcon className="ml-auto h-4 w-4 opacity-50" />
                      </Button>
                    </FormControl>
                  </PopoverTrigger>
                  <PopoverContent className="w-auto p-0" align="start">
                    <Calendar
                      mode="single"
                      selected={field.value}
                      onSelect={field.onChange}
                      disabled={(date) => date < new Date()}
                      initialFocus
                    />
                  </PopoverContent>
                </Popover>
                <FormMessage />
              </FormItem>
            )}
          />
          <Button type="submit" className="w-full" disabled={isSubmitting}>
            {isSubmitting ? (
              <>
                <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                Creating Pass...
              </>
            ) : (
              "Create Pass"
            )}
          </Button>
        </form>
      </Form>
      {generatedPass && (
        <PassPreviewDialog
          pass={generatedPass}
          open={!!generatedPass}
          onOpenChange={(open) => !open && setGeneratedPass(null)}
        />
      )}
    </>
  );
}



====================================================================================================
FILE: components\forms\generate-visitor-form.tsx
SIZE: 8.07 KB
====================================================================================================
"use client";

import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import * as z from "zod";
import { addDoc, collection, updateDoc, serverTimestamp } from "firebase/firestore";
import { db, passConverter } from "@/lib/firestore";
import { useAuth } from "@/hooks/use-auth";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Popover, PopoverContent, PopoverTrigger } from "@/components/ui/popover";
import { CalendarIcon, Loader2 } from "lucide-react";
import { Calendar } from "@/components/ui/calendar";
import { cn } from "@/lib/utils";
import { format, endOfDay } from "date-fns";
import { useToast } from "@/hooks/use-toast";
import { buildQrPayload } from "@/lib/qr";
import { useState } from "react";
import PassPreviewDialog from "./pass-preview-dialog";
import type { VisitorPass, Pass } from "@/types";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "../ui/select";

const formSchema = z.object({
  plateAlpha: z.string().min(1, "Required").max(4, "Max 4 chars").regex(/^[a-zA-Z]+$/, "Only letters allowed"),
  plateNum: z.string().min(1, "Required").max(5, "Max 5 digits").regex(/^\d+$/, "Only numbers"),
  visitorName: z.string().min(2, "Required"),
  personToVisit: z.string().min(1, "Required"),
  purpose: z.string().min(1, "Required"),
  location: z.string().min(1, "Required"),
});

const locations = ["SEC 01", "SEC 02", "SEC 03", "SEC 04", "SEC 05", "SEC 06", "SEC 07", "SEC 08", "SEC 09", "SEC 10", "LD 01", "LD 02", "LD 03", "LD 04", "LD 05", "LD 06", "Pump Station"];


export default function GenerateVisitorForm() {
  const { user, loading: userLoading } = useAuth();
  const { toast } = useToast();
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [generatedPass, setGeneratedPass] = useState<Pass | null>(null);

  const form = useForm<z.infer<typeof formSchema>>({
    resolver: zodResolver(formSchema),
    defaultValues: {
      plateAlpha: "",
      plateNum: "",
      visitorName: "",
      personToVisit: "",
      purpose: "",
      location: "",
    },
  });

  async function onSubmit(values: z.infer<typeof formSchema>) {
    if (!user) {
      toast({ variant: "destructive", title: "Authentication Error", description: "You must be logged in to create a pass." });
      return;
    }
    setIsSubmitting(true);
    
    const expiresAt = endOfDay(new Date());

    try {
      const passCollection = collection(db, "passes").withConverter(passConverter);
      const newPassData: Omit<VisitorPass, 'id' | 'qrPayload'> = {
        type: "visitor",
        plateAlpha: values.plateAlpha.toUpperCase(),
        plateNum: values.plateNum,
        visitorName: values.visitorName,
        personToVisit: values.personToVisit,
        purpose: values.purpose,
        location: values.location,
        expiresAt: expiresAt,
        status: "active",
        createdAt: serverTimestamp(),
        createdBy: user.uid,
        createdByName: user.fullName,
        createdByCompany: user.company,
      };

      // Step 1: Create document in Firestore
      const docRef = await addDoc(passCollection, newPassData as any);

      // Step 2: Build qrPayload with the generated document ID
      const qrPayload = buildQrPayload(docRef.id, values.plateAlpha, values.plateNum, expiresAt);

      // Step 3: Update Firestore document with qrPayload
      await updateDoc(docRef, { qrPayload });

      // Step 4: Prepare data for preview dialog
      const finalPassData = {
        ...newPassData,
        id: docRef.id,
        qrPayload: qrPayload,
        createdAt: new Date(),
        expiresAt: expiresAt,
      };

      setGeneratedPass(finalPassData as Pass);
      toast({ title: "Success", description: "Visitor pass created successfully." });
      form.reset();

    } catch (error) {
      console.error("Error creating pass:", error);
      toast({ variant: "destructive", title: "Error", description: "Failed to create pass. Please try again." });
    } finally {
      setIsSubmitting(false);
    }
  }

  return (
    <>
      <Form {...form}>
        <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-6">
          <div className="grid grid-cols-1 gap-4 md:grid-cols-2">
              <FormField
              control={form.control}
              name="plateAlpha"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Plate Alpha</FormLabel>
                  <FormControl>
                    <Input placeholder="ABC" {...field} style={{textTransform: 'uppercase'}}/>
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
              <FormField
              control={form.control}
              name="plateNum"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Plate Number</FormLabel>
                  <FormControl>
                    <Input placeholder="1234" {...field} />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
          </div>
            <FormField
              control={form.control}
              name="visitorName"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Visitor's Name</FormLabel>
                  <FormControl>
                    <Input placeholder="Ali" {...field} />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
          <FormField
            control={form.control}
            name="personToVisit"
            render={({ field }) => (
              <FormItem>
                <FormLabel>Person to Visit</FormLabel>
                <FormControl>
                  <Input placeholder="Facility Manager" {...field} />
                </FormControl>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="purpose"
            render={({ field }) => (
              <FormItem>
                <FormLabel>Purpose</FormLabel>
                <FormControl>
                  <Input placeholder="Maintenance" {...field} />
                </FormControl>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="location"
            render={({ field }) => (
                <FormItem>
                    <FormLabel>Location</FormLabel>
                     <Select onValueChange={field.onChange} defaultValue={field.value}>
                        <FormControl>
                        <SelectTrigger>
                            <SelectValue placeholder="Select a location" />
                        </SelectTrigger>
                        </FormControl>
                        <SelectContent>
                             {locations.map(loc => (
                                <SelectItem key={loc} value={loc}>{loc}</SelectItem>
                            ))}
                        </SelectContent>
                    </Select>
                    <FormMessage />
                </FormItem>
            )}
          />

          <Button type="submit" disabled={isSubmitting || userLoading} className="w-full">
            {isSubmitting && <Loader2 className="mr-2 h-4 w-4 animate-spin" />}
            Create Pass
          </Button>
        </form>
      </Form>
      {generatedPass && (
        <PassPreviewDialog 
          pass={generatedPass} 
          open={!!generatedPass} 
          onOpenChange={() => setGeneratedPass(null)}
        />
      )}
    </>
  );
}



====================================================================================================
FILE: components\forms\login-form.tsx
SIZE: 3.36 KB
====================================================================================================
"use client";

import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import * as z from "zod";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card";
import { useAuth } from "@/hooks/use-auth";
import { Loader2 } from "lucide-react";
import Link from "next/link";
import { useToast } from "@/hooks/use-toast";
import { useState } from "react";

const formSchema = z.object({
  email: z.string().email("Invalid email address."),
  password: z.string().min(6, "Password must be at least 6 characters."),
});

export function LoginForm() {
  const { handleSignIn } = useAuth();
  const { toast } = useToast();
  const [loading, setLoading] = useState(false);

  const form = useForm<z.infer<typeof formSchema>>({
    resolver: zodResolver(formSchema),
    defaultValues: {
      email: "",
      password: "",
    },
  });

  async function onSubmit(values: z.infer<typeof formSchema>) {
    setLoading(true);
    const error = await handleSignIn(values.email, values.password);
    if (error) {
      toast({
        variant: "destructive",
        title: "Login Failed",
        description: error,
      });
      setLoading(false);
    }
  }

  return (
    <Card>
      <CardHeader>
        <CardTitle className="font-headline text-2xl">Admin Sign In</CardTitle>
        <CardDescription>Enter your credentials to access the dashboard.</CardDescription>
      </CardHeader>
      <Form {...form}>
        <form onSubmit={form.handleSubmit(onSubmit)}>
          <CardContent className="space-y-4">
            <FormField
              control={form.control}
              name="email"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Email</FormLabel>
                  <FormControl>
                    <Input placeholder="john@acme.com" {...field} />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            <FormField
              control={form.control}
              name="password"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Password</FormLabel>
                  <FormControl>
                    <Input type="password" placeholder="â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢" {...field} />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
          </CardContent>
          <CardFooter className="flex flex-col gap-4">
            <Button type="submit" className="w-full" disabled={loading}>
              {loading && <Loader2 className="mr-2 h-4 w-4 animate-spin" />}
              Sign In
            </Button>
            <p className="text-center text-sm text-muted-foreground">
                Don't have an account?{" "}
                <Button variant="link" asChild className="p-0 h-auto">
                    <Link href="/signup">Sign Up</Link>
                </Button>
            </p>
          </CardFooter>
        </form>
      </Form>
    </Card>
  );
}




====================================================================================================
FILE: components\forms\pass-preview-dialog.tsx
SIZE: 8.86 KB
====================================================================================================
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogDescription,
  DialogFooter,
} from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import type { Pass } from "@/types";
import { format } from "date-fns";
import QrCodeDisplay from "../ui/qr-code";
import { Share2, Download, Printer } from "lucide-react";
import { useToast } from "@/hooks/use-toast";
import { useRef, useCallback } from "react";
import { toPng } from 'html-to-image';

interface PassPreviewDialogProps {
  pass: Pass;
  open: boolean;
  onOpenChange: (open: boolean) => void;
}

export default function PassPreviewDialog({ pass, open, onOpenChange }: PassPreviewDialogProps) {
  const { toast } = useToast();
  const printRef = useRef<HTMLDivElement>(null);
  const cardRef = useRef<HTMLDivElement>(null);

  const handlePrint = async () => {
    if (!pass.qrPayload) {
      toast({
        variant: "destructive",
        title: "No QR Code",
        description: "This pass does not have a QR code to print.",
      });
      return;
    }

    toast({
      title: "Generating PDF",
      description: "Creating pass card...",
    });

    try {
      // Dynamic imports
      const { jsPDF } = await import("jspdf");
      const QRCode = (await import("qrcode")).default;

      const pdf = new jsPDF();
      
      // Card dimensions - 3x3 layout
      const cardWidth = 55;
      const cardHeight = 70;
      const margin = 15;
      
      // Center single card on page
      const pageWidth = pdf.internal.pageSize.getWidth();
      const pageHeight = pdf.internal.pageSize.getHeight();
      const x = (pageWidth - cardWidth) / 2;
      const y = (pageHeight - cardHeight) / 2;

      // Convert qrPayload to string if it's an object
      let qrString = pass.qrPayload;
      if (typeof qrString === 'object') {
        qrString = JSON.stringify(qrString);
      }
      
      const qrDataUrl = await QRCode.toDataURL(qrString, {
        width: 256,
        margin: 1,
        errorCorrectionLevel: 'M'
      });

      // Draw card border (rounded rectangle)
      pdf.setDrawColor(200, 200, 200); // Light gray border
      pdf.setLineWidth(0.5);
      pdf.setFillColor(255, 255, 255); // White background
      pdf.roundedRect(x, y, cardWidth, cardHeight, 3, 3, 'FD');

      // Add QR code (centered in upper portion of card)
      const qrSize = 35;
      const qrX = x + (cardWidth - qrSize) / 2;
      const qrY = y + 10;
      pdf.addImage(qrDataUrl, "PNG", qrX, qrY, qrSize, qrSize);

      // Add plate number (centered below QR code)
      pdf.setFontSize(12);
      pdf.setTextColor(0, 0, 0); // Black text
      pdf.setFont(undefined, 'normal');
      pdf.text(`${pass.plateAlpha}-${pass.plateNum}`, x + cardWidth / 2, qrY + qrSize + 10, { align: 'center' });

      // Auto-print
      pdf.autoPrint();
      window.open(pdf.output('bloburl'), '_blank');

      toast({
        title: "Print Ready",
        description: "Pass card opened in new window.",
      });
    } catch (error) {
      console.error("Print error:", error);
      toast({
        variant: "destructive",
        title: "Error",
        description: "Failed to generate print card.",
      });
    }
  };

  const exportCard = useCallback(async (): Promise<string | null> => {
    if (!cardRef.current) return null;
    try {
      return await toPng(cardRef.current, {
        cacheBust: true,
        skipFonts: true,
        pixelRatio: 2,
        style: {
          background: "white",
          fontFamily: "sans-serif",
        },
        filter: (node) => {
          if (node.tagName === "STYLE" || node.tagName === "LINK") {
            return false;
          }
          return true;
        },
      });
    } catch (err) {
      console.error("Failed to export card:", err);
      toast({ variant: "destructive", title: "Error", description: "Could not export pass card." });
      return null;
    }
  }, [cardRef, toast]);

  const handleDownload = useCallback(async () => {
    const dataUrl = await exportCard();
    if (!dataUrl) return;

    const link = document.createElement('a');
    link.download = `qr-pass-${pass.plateAlpha}-${pass.plateNum}.png`;
    link.href = dataUrl;
    link.click();
    toast({ title: "Success", description: "QR code card downloaded." });
  }, [exportCard, pass, toast]);

  const handleShare = async () => {
    const dataUrl = await exportCard();
    if (!dataUrl) return;

    try {
      const blob = await(await fetch(dataUrl)).blob();
      const file = new File([blob], `qr-pass-${pass.plateAlpha}-${pass.plateNum}.png`, { type: blob.type });

      if (navigator.share && navigator.canShare({ files: [file] })) {
          await navigator.share({
              title: 'Gate Pass',
              files: [file],
          });
          toast({ title: "Shared", description: "Pass details shared successfully." });
      } else {
        const win = window.open();
        if (win) {
            win.document.write(`<img src="${dataUrl}" alt="Pass QR Code" />`);
        } else {
            toast({ variant: "destructive", title: "Not Supported", description: "Web Share API for files is not supported in your browser." });
        }
      }
    } catch (error) {
        console.error('Share failed', error);
        toast({ variant: "destructive", title: "Error", description: "Could not share pass." });
    }
  };

  const getPassDate = (date: any): Date => {
    if (date.toDate) {
      return date.toDate();
    }
    return new Date(date);
  }

  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent className="sm:max-w-[425px]">
        <DialogHeader>
          <DialogTitle>Pass Generated Successfully</DialogTitle>
          <DialogDescription>
            Review the pass details below. You can print, share, or download the pass.
          </DialogDescription>
        </DialogHeader>

        <div id="print-area-dialog" ref={printRef} className="py-4">
             <div className="print-card text-center">
                 <h2 className="text-2xl font-bold font-headline text-center mb-4">
                    {pass.plateAlpha} {pass.plateNum}
                </h2>
                <div className="details grid grid-cols-[120px_1fr] gap-x-4 gap-y-2 text-sm text-left">
                    <span className="details-label font-semibold text-muted-foreground">Status:</span>
                    <span className="details-value status-active font-bold text-green-600 capitalize">{pass.status}</span>

                    <span className="details-label font-semibold text-muted-foreground">Type:</span>
                    <span className="details-value capitalize">{pass.type}</span>

                    {pass.type === "standard" && (
                        <>
                            <span className="details-label font-semibold text-muted-foreground">Owner:</span>
                            <span className="details-value">{pass.ownerName}</span>
                            <span className="details-label font-semibold text-muted-foreground">Company:</span>
                            <span className="details-value">{pass.ownerCompany}</span>
                        </>
                    )}

                    {pass.type === "visitor" && (
                         <>
                            <span className="details-label font-semibold text-muted-foreground">Visitor:</span>
                            <span className="details-value">{pass.visitorName}</span>
                            <span className="details-label font-semibold text-muted-foreground">Purpose:</span>
                            <span className="details-value">{pass.purpose}</span>
                        </>
                    )}

                    <span className="details-label font-semibold text-muted-foreground">Expires:</span>
                    <span className="details-value" style={{textTransform: 'none'}}>{format(getPassDate(pass.expiresAt), "PPP, p")}</span>
                </div>

                <div ref={cardRef} className="mt-6 flex justify-center p-2">
                    <QrCodeDisplay payload={pass.qrPayload} />
                </div>
            </div>
        </div>

        <DialogFooter className="sm:justify-between">
          <div className="flex items-center gap-2">
             <Button variant="outline" size="icon" onClick={handleShare}>
                <Share2 className="h-4 w-4" />
                <span className="sr-only">Share</span>
            </Button>
            <Button variant="outline" size="icon" onClick={handleDownload}>
                <Download className="h-4 w-4" />
                 <span className="sr-only">Download</span>
            </Button>
          </div>
          <div className="flex items-center gap-2 mt-4 sm:mt-0">
             <Button variant="outline" onClick={() => onOpenChange(false)}>Close</Button>
             <Button onClick={handlePrint}><Printer className="mr-2 h-4 w-4" />Print</Button>
          </div>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  );
}




====================================================================================================
FILE: components\forms\signup-form.tsx
SIZE: 6.88 KB
====================================================================================================
"use client";

import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import * as z from "zod";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card";
import { useAuth } from "@/hooks/use-auth";
import { Loader2 } from "lucide-react";
import Link from "next/link";
import { useToast } from "@/hooks/use-toast";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "../ui/select";

const formSchema = z.object({
  fullName: z.string().min(2, "Full name must be at least 2 characters."),
  email: z.string().email("Invalid email address."),
  password: z.string().min(6, "Password must be at least 6 characters."),
  phone: z.string().min(1, "Phone number is required."),
  company: z.string().min(2, "Company is required."),
  companyId: z.string().min(1, "Company ID is required."),
  workLocation: z.string().min(1, "Work location is required."),
});

const locations = ["SEC 01", "SEC 02", "SEC 03", "SEC 04", "SEC 05", "SEC 06", "SEC 07", "SEC 08", "SEC 09", "SEC 10", "LD 01", "LD 02", "LD 03", "LD 04", "LD 05", "LD 06", "Pump Station"];

export function SignupForm() {
  const { handleSignUp, loading } = useAuth();
  const { toast } = useToast();

  const form = useForm<z.infer<typeof formSchema>>({
    resolver: zodResolver(formSchema),
    defaultValues: {
      fullName: "",
      email: "",
      password: "",
      phone: "",
      company: "",
      companyId: "",
      workLocation: "",
    },
  });

  async function onSubmit(values: z.infer<typeof formSchema>) {
    const error = await handleSignUp(values);
    if (error) {
      toast({
        variant: "destructive",
        title: "Signup Failed",
        description: error,
      });
    } else {
        toast({
            title: "Account Created",
            description: "Your account is now pending approval from an administrator.",
        });
    }
  }

  return (
    <Card>
      <CardHeader>
        <CardTitle className="font-headline text-2xl">Create Account</CardTitle>
        <CardDescription>Enter your details to create a new account.</CardDescription>
      </CardHeader>
      <Form {...form}>
        <form onSubmit={form.handleSubmit(onSubmit)}>
          <CardContent className="space-y-4">
             <FormField
              control={form.control}
              name="fullName"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Full Name</FormLabel>
                  <FormControl>
                    <Input placeholder="John Doe" {...field} />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            <FormField
              control={form.control}
              name="email"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Email</FormLabel>
                  <FormControl>
                    <Input placeholder="john@acme.com" {...field} />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            <FormField
              control={form.control}
              name="password"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Password</FormLabel>
                  <FormControl>
                    <Input type="password" placeholder="â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢" {...field} />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
             <FormField
              control={form.control}
              name="phone"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Phone</FormLabel>
                  <FormControl>
                    <Input placeholder="+966..." {...field} />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            <div className="grid grid-cols-2 gap-4">
                 <FormField
                  control={form.control}
                  name="company"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Company</FormLabel>
                      <FormControl>
                        <Input placeholder="Petrojet" {...field} />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
                 <FormField
                  control={form.control}
                  name="companyId"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Company ID</FormLabel>
                      <FormControl>
                        <Input placeholder="PJ-001" {...field} />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
            </div>
             <FormField
              control={form.control}
              name="workLocation"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Work Location</FormLabel>
                  <Select onValueChange={field.onChange} defaultValue={field.value}>
                        <FormControl>
                        <SelectTrigger>
                            <SelectValue placeholder="Select a location" />
                        </SelectTrigger>
                        </FormControl>
                        <SelectContent>
                             {locations.map(loc => (
                                <SelectItem key={loc} value={loc}>{loc}</SelectItem>
                            ))}
                        </SelectContent>
                    </Select>
                  <FormMessage />
                </FormItem>
              )}
            />
          </CardContent>
          <CardFooter className="flex flex-col gap-4">
            <Button type="submit" className="w-full" disabled={loading}>
              {loading && <Loader2 className="mr-2 h-4 w-4 animate-spin" />}
              Sign Up
            </Button>
            <p className="text-center text-sm text-muted-foreground">
                Already have an account?{" "}
                <Button variant="link" asChild className="p-0 h-auto">
                    <Link href="/login">Sign In</Link>
                </Button>
            </p>
          </CardFooter>
        </form>
      </Form>
    </Card>
  );
}




====================================================================================================
FILE: components\tables\bulk-actions-bar.tsx
SIZE: 18.23 KB
====================================================================================================
"use client";

import { Button } from "@/components/ui/button";
import { Ban, Trash2, FileSpreadsheet, Printer, X } from "lucide-react";
import { useState } from "react";
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
} from "@/components/ui/alert-dialog";
import { useToast } from "@/hooks/use-toast";
import { doc, updateDoc, deleteDoc, writeBatch } from "firebase/firestore";
import { db } from "@/lib/firestore";
import type { Pass } from "@/types";
import { format } from "date-fns";
import * as XLSX from "xlsx";

interface BulkActionsBarProps {
  selectedPasses: Pass[];
  onClearSelection: () => void;
  onActionComplete: () => void;
}

export function BulkActionsBar({ selectedPasses, onClearSelection, onActionComplete }: BulkActionsBarProps) {
  const { toast } = useToast();
  const [showRevokeDialog, setShowRevokeDialog] = useState(false);
  const [showDeleteDialog, setShowDeleteDialog] = useState(false);
  const [isProcessing, setIsProcessing] = useState(false);

  const activePassCount = selectedPasses.filter(p => p.status === "active").length;
  const selectedCount = selectedPasses.length;

  const handleBulkRevoke = async () => {
    setIsProcessing(true);
    try {
      const batch = writeBatch(db);
      const activePasses = selectedPasses.filter(p => p.status === "active");
      
      activePasses.forEach((pass) => {
        const passRef = doc(db, "passes", pass.id);
        batch.update(passRef, { status: "revoked" });
      });

      await batch.commit();
      
      toast({
        title: "Passes Revoked",
        description: `Successfully revoked ${activePasses.length} pass(es).`,
      });
      
      onActionComplete();
      onClearSelection();
    } catch (error) {
      toast({
        variant: "destructive",
        title: "Error",
        description: "Failed to revoke passes.",
      });
    } finally {
      setIsProcessing(false);
      setShowRevokeDialog(false);
    }
  };

  const handleBulkDelete = async () => {
    setIsProcessing(true);
    try {
      const batch = writeBatch(db);
      
      selectedPasses.forEach((pass) => {
        const passRef = doc(db, "passes", pass.id);
        batch.delete(passRef);
      });

      await batch.commit();
      
      toast({
        title: "Passes Deleted",
        description: `Successfully deleted ${selectedCount} pass(es).`,
      });
      
      onActionComplete();
      onClearSelection();
    } catch (error) {
      toast({
        variant: "destructive",
        title: "Error",
        description: "Failed to delete passes.",
      });
    } finally {
      setIsProcessing(false);
      setShowDeleteDialog(false);
    }
  };

  const handleExportExcel = async () => {
    const now = new Date();
    const exportDate = format(now, "PPpp");
    
    // Helper to calculate actual status
    const getActualStatus = (pass: Pass): string => {
      if (pass.status === "revoked") return "REVOKED";
      const expiryDate = pass.expiresAt.toDate();
      return expiryDate < now ? "EXPIRED" : "ACTIVE";
    };
    
    // Calculate statistics using actual status
    const statusCounts = {
      active: selectedPasses.filter(p => getActualStatus(p) === "ACTIVE").length,
      expired: selectedPasses.filter(p => getActualStatus(p) === "EXPIRED").length,
      revoked: selectedPasses.filter(p => getActualStatus(p) === "REVOKED").length,
    };

    const typeCounts = {
      standard: selectedPasses.filter(p => p.type === "standard").length,
      visitor: selectedPasses.filter(p => p.type === "visitor").length,
    };

    // Import xlsx-style for styling support
    const XLSX_STYLE = await import("xlsx-js-style");

    // Create workbook
    const wb = XLSX_STYLE.utils.book_new();

    // SHEET 1: SUMMARY with formatting
    const summaryData = [
      ["GUARDIAN GATE - PASS RECORDS REPORT", ""],
      ["", ""],
      ["Report Generated:", exportDate],
      ["Total Records:", selectedCount],
      ["", ""],
      ["SUMMARY STATISTICS", ""],
      ["", ""],
      ["Status Breakdown", "Count"],
      ["Active Passes", statusCounts.active],
      ["Expired Passes", statusCounts.expired],
      ["Revoked Passes", statusCounts.revoked],
      ["", ""],
      ["Type Breakdown", "Count"],
      ["Standard Passes", typeCounts.standard],
      ["Visitor Passes", typeCounts.visitor],
    ];

    const wsSummary = XLSX_STYLE.utils.aoa_to_sheet(summaryData);

    // Style summary sheet
    const titleStyle = {
      font: { bold: true, sz: 16, color: { rgb: "FFFFFF" } },
      fill: { fgColor: { rgb: "4472C4" } },
      alignment: { horizontal: "center", vertical: "center" }
    };

    const headerStyle = {
      font: { bold: true, sz: 12, color: { rgb: "FFFFFF" } },
      fill: { fgColor: { rgb: "4472C4" } },
      alignment: { horizontal: "center", vertical: "center" },
      border: {
        top: { style: "thin", color: { rgb: "000000" } },
        bottom: { style: "thin", color: { rgb: "000000" } },
        left: { style: "thin", color: { rgb: "000000" } },
        right: { style: "thin", color: { rgb: "000000" } }
      }
    };

    const labelStyle = {
      font: { bold: true, sz: 11 },
      fill: { fgColor: { rgb: "D9E1F2" } },
      border: {
        top: { style: "thin", color: { rgb: "000000" } },
        bottom: { style: "thin", color: { rgb: "000000" } },
        left: { style: "thin", color: { rgb: "000000" } },
        right: { style: "thin", color: { rgb: "000000" } }
      }
    };

    const dataStyle = {
      border: {
        top: { style: "thin", color: { rgb: "000000" } },
        bottom: { style: "thin", color: { rgb: "000000" } },
        left: { style: "thin", color: { rgb: "000000" } },
        right: { style: "thin", color: { rgb: "000000" } }
      }
    };

    // Apply title style
    wsSummary['A1'].s = titleStyle;
    wsSummary['B1'].s = titleStyle;

    // Apply styles to summary headers and data
    ['A6', 'B6'].forEach(cell => { if (wsSummary[cell]) wsSummary[cell].s = titleStyle; });
    ['A8', 'B8'].forEach(cell => { if (wsSummary[cell]) wsSummary[cell].s = headerStyle; });
    ['A13', 'B13'].forEach(cell => { if (wsSummary[cell]) wsSummary[cell].s = headerStyle; });
    
    // Apply styles to data rows
    [9, 10, 11, 14, 15].forEach(row => {
      ['A', 'B'].forEach(col => {
        const cell = `${col}${row}`;
        if (wsSummary[cell]) wsSummary[cell].s = col === 'A' ? labelStyle : dataStyle;
      });
    });

    // Set column widths
    wsSummary['!cols'] = [{ wch: 30 }, { wch: 20 }];
    wsSummary['!merges'] = [{ s: { r: 0, c: 0 }, e: { r: 0, c: 1 } }];

    // SHEET 2: DETAILED RECORDS with formatting
    const headers = [
      "No.",
      "Plate Number",
      "Pass Type",
      "Owner/Visitor",
      "Company",
      "Status",
      "Location",
      "Serial",
      "Issue Date",
      "Expiry Date",
      "Created By",
      "Pass ID"
    ];

    const rows = selectedPasses.map((pass, index) => [
      index + 1,
      `${pass.plateAlpha}-${pass.plateNum}`,
      pass.type.charAt(0).toUpperCase() + pass.type.slice(1),
      pass.type === "standard" ? pass.ownerName : pass.visitorName,
      pass.type === "standard" ? pass.ownerCompany : pass.createdByCompany,
      getActualStatus(pass), // Use calculated status instead of pass.status
      pass.location,
      pass.type === "standard" ? pass.serial : "N/A",
      format(pass.createdAt.toDate(), "PP"),
      format(pass.expiresAt.toDate(), "PP"),
      pass.createdByName,
      pass.id,
    ]);

    const wsData = XLSX_STYLE.utils.aoa_to_sheet([headers, ...rows]);

    // Style header row
    const range = XLSX_STYLE.utils.decode_range(wsData['!ref'] || 'A1');
    for (let C = range.s.c; C <= range.e.c; ++C) {
      const address = XLSX_STYLE.utils.encode_col(C) + "1";
      if (!wsData[address]) continue;
      wsData[address].s = {
        font: { bold: true, sz: 11, color: { rgb: "FFFFFF" } },
        fill: { fgColor: { rgb: "4472C4" } },
        alignment: { horizontal: "center", vertical: "center" },
        border: {
          top: { style: "thin", color: { rgb: "000000" } },
          bottom: { style: "thin", color: { rgb: "000000" } },
          left: { style: "thin", color: { rgb: "000000" } },
          right: { style: "thin", color: { rgb: "000000" } }
        }
      };
    }

    // Style data rows with alternating colors and status color coding
    for (let R = range.s.r + 1; R <= range.e.r; ++R) {
      const isEvenRow = R % 2 === 0;
      const rowBgColor = isEvenRow ? "FFFFFF" : "F2F2F2";
      
      for (let C = range.s.c; C <= range.e.c; ++C) {
        const address = XLSX_STYLE.utils.encode_col(C) + (R + 1).toString();
        if (!wsData[address]) continue;

        let cellStyle: any = {
          fill: { fgColor: { rgb: rowBgColor } },
          border: {
            top: { style: "thin", color: { rgb: "D3D3D3" } },
            bottom: { style: "thin", color: { rgb: "D3D3D3" } },
            left: { style: "thin", color: { rgb: "D3D3D3" } },
            right: { style: "thin", color: { rgb: "D3D3D3" } }
          },
          alignment: { vertical: "center" }
        };

        // Status column (index 5) - color code based on status
        if (C === 5) {
          const status = wsData[address].v;
          if (status === "ACTIVE") {
            cellStyle.fill = { fgColor: { rgb: "C6EFCE" } };
            cellStyle.font = { color: { rgb: "006100" }, bold: true };
          } else if (status === "EXPIRED") {
            cellStyle.fill = { fgColor: { rgb: "FFC7CE" } };
            cellStyle.font = { color: { rgb: "9C0006" }, bold: true };
          } else if (status === "REVOKED") {
            cellStyle.fill = { fgColor: { rgb: "FFC7CE" } };
            cellStyle.font = { color: { rgb: "9C0006" }, bold: true };
          }
        }

        wsData[address].s = cellStyle;
      }
    }

    // Set column widths
    wsData['!cols'] = [
      { wch: 6 },  { wch: 15 }, { wch: 12 }, { wch: 20 },
      { wch: 25 }, { wch: 12 }, { wch: 12 }, { wch: 15 },
      { wch: 15 }, { wch: 15 }, { wch: 20 }, { wch: 25 }
    ];

    // Enable auto-filter
    wsData['!autofilter'] = { ref: `A1:L${rows.length + 1}` };

    // Add sheets to workbook
    XLSX_STYLE.utils.book_append_sheet(wb, wsSummary, "Summary");
    XLSX_STYLE.utils.book_append_sheet(wb, wsData, "Detailed Records");

    // Generate file
    XLSX_STYLE.writeFile(wb, `Guardian-Gate-Report-${format(now, "yyyy-MM-dd-HHmm")}.xlsx`);

    toast({
      title: "Excel Report Generated",
      description: `Exported ${selectedCount} pass record(s) with formatting.`,
    });
  };

  const handlePrintQRCodes = async () => {
    // Filter passes that have valid QR payloads
    const validPasses = selectedPasses.filter(pass => {
      return pass.qrPayload && 
             pass.qrPayload !== '' && 
             pass.qrPayload !== null && 
             pass.qrPayload !== undefined;
    });
    
    if (validPasses.length === 0) {
      toast({
        variant: "destructive",
        title: "No Valid QR Codes",
        description: "Selected passes do not have QR codes generated.",
      });
      return;
    }

    if (validPasses.length < selectedPasses.length) {
      const skipped = selectedPasses.length - validPasses.length;
      toast({
        title: "Notice",
        description: `${skipped} pass(es) skipped - no QR code data available.`,
      });
    }

    toast({
      title: "Generating PDF",
      description: `Creating ${validPasses.length} pass card(s)...`,
    });

    try {
      const { jsPDF } = await import("jspdf");
      const QRCode = (await import("qrcode")).default;

      const pdf = new jsPDF();
      const pageWidth = pdf.internal.pageSize.getWidth();
      const pageHeight = pdf.internal.pageSize.getHeight();
      
      // Card dimensions - 3x3 layout (9 cards per page)
      const cardWidth = 55;
      const cardHeight = 70;
      const margin = 15;
      const cols = 3;
      const rows = 3;
      const spacingX = (pageWidth - (2 * margin) - (cols * cardWidth)) / (cols - 1);
      const spacingY = (pageHeight - (2 * margin) - (rows * cardHeight)) / (rows - 1);

      let position = 0;

      for (const pass of validPasses) {
        if (position % (cols * rows) === 0 && position !== 0) {
          pdf.addPage();
        }

        const col = position % cols;
        const row = Math.floor((position % (cols * rows)) / cols);
        
        const x = margin + col * (cardWidth + spacingX);
        const y = margin + row * (cardHeight + spacingY);

        // Generate QR code with error handling
        try {
          // Convert qrPayload to string if it's an object
          let qrString = pass.qrPayload;
          if (typeof qrString === 'object') {
            qrString = JSON.stringify(qrString);
          }
          
          const qrDataUrl = await QRCode.toDataURL(qrString, {
            width: 256,
            margin: 1,
            errorCorrectionLevel: 'M'
          });

          // Draw card border (rounded rectangle effect with thin border)
          pdf.setDrawColor(200, 200, 200); // Light gray border
          pdf.setLineWidth(0.5);
          pdf.setFillColor(255, 255, 255); // White background
          pdf.roundedRect(x, y, cardWidth, cardHeight, 3, 3, 'FD'); // Filled and drawn with rounded corners

          // Add QR code (centered in upper portion of card)
          const qrSize = 35;
          const qrX = x + (cardWidth - qrSize) / 2;
          const qrY = y + 10;
          pdf.addImage(qrDataUrl, "PNG", qrX, qrY, qrSize, qrSize);

          // Add plate number (centered below QR code)
          pdf.setFontSize(12);
          pdf.setTextColor(0, 0, 0); // Black text
          pdf.setFont(undefined, 'normal');
          pdf.text(`${pass.plateAlpha}-${pass.plateNum}`, x + cardWidth / 2, qrY + qrSize + 10, { align: 'center' });

          position++;
        } catch (qrError) {
          console.error(`Failed to generate QR for ${pass.plateAlpha}-${pass.plateNum}:`, qrError);
          // Skip this QR code and continue
        }
      }

      if (position === 0) {
        throw new Error("No valid QR codes could be generated");
      }

      pdf.save(`Guardian-Gate-Passes-${format(new Date(), "yyyy-MM-dd")}.pdf`);

      toast({
        title: "PDF Generated",
        description: `Created PDF with ${position} pass card(s).`,
      });
    } catch (error) {
      console.error("PDF generation error:", error);
      toast({
        variant: "destructive",
        title: "Error",
        description: "Failed to generate PDF. Please try again.",
      });
    }
  };

  return (
    <>
      <div className="flex items-center justify-between rounded-lg border-2 border-primary/20 bg-gradient-to-r from-primary/5 to-primary/10 p-4 shadow-sm">
        <div className="flex items-center gap-4">
          <div className="flex items-center gap-2 rounded-md bg-primary px-3 py-1.5">
            <span className="text-sm font-semibold text-primary-foreground">
              {selectedCount} Selected
            </span>
          </div>
          <div className="flex gap-2">
            <Button
              size="sm"
              onClick={() => setShowRevokeDialog(true)}
              disabled={activePassCount === 0 || isProcessing}
              className="bg-orange-500 hover:bg-orange-600 text-white border-0"
            >
              <Ban className="mr-2 h-4 w-4" />
              Revoke ({activePassCount})
            </Button>
            <Button
              size="sm"
              onClick={() => setShowDeleteDialog(true)}
              disabled={isProcessing}
              className="bg-red-500 hover:bg-red-600 text-white border-0"
            >
              <Trash2 className="mr-2 h-4 w-4" />
              Delete
            </Button>
            <Button
              size="sm"
              onClick={handleExportExcel}
              disabled={isProcessing}
              className="bg-blue-500 hover:bg-blue-600 text-white border-0"
            >
              <FileSpreadsheet className="mr-2 h-4 w-4" />
              Export Excel
            </Button>
            <Button
              size="sm"
              onClick={handlePrintQRCodes}
              disabled={isProcessing}
              className="bg-green-500 hover:bg-green-600 text-white border-0"
            >
              <Printer className="mr-2 h-4 w-4" />
              Print QR
            </Button>
          </div>
        </div>
        <Button
          variant="ghost"
          size="sm"
          onClick={onClearSelection}
          className="hover:bg-destructive/10 hover:text-destructive"
        >
          <X className="h-4 w-4 mr-1" />
          Clear
        </Button>
      </div>

      <AlertDialog open={showRevokeDialog} onOpenChange={setShowRevokeDialog}>
        <AlertDialogContent>
          <AlertDialogHeader>
            <AlertDialogTitle>Revoke Selected Passes?</AlertDialogTitle>
            <AlertDialogDescription>
              This will revoke {activePassCount} active pass(es). Expired and already-revoked passes will be skipped.
            </AlertDialogDescription>
          </AlertDialogHeader>
          <AlertDialogFooter>
            <AlertDialogCancel disabled={isProcessing}>Cancel</AlertDialogCancel>
            <AlertDialogAction onClick={handleBulkRevoke} disabled={isProcessing} className="bg-orange-500 hover:bg-orange-600">
              {isProcessing ? "Revoking..." : "Revoke"}
            </AlertDialogAction>
          </AlertDialogFooter>
        </AlertDialogContent>
      </AlertDialog>

      <AlertDialog open={showDeleteDialog} onOpenChange={setShowDeleteDialog}>
        <AlertDialogContent>
          <AlertDialogHeader>
            <AlertDialogTitle>Delete Selected Passes?</AlertDialogTitle>
            <AlertDialogDescription>
              This will permanently delete {selectedCount} pass(es). This action cannot be undone.
            </AlertDialogDescription>
          </AlertDialogHeader>
          <AlertDialogFooter>
            <AlertDialogCancel disabled={isProcessing}>Cancel</AlertDialogCancel>
            <AlertDialogAction
              onClick={handleBulkDelete}
              disabled={isProcessing}
              className="bg-destructive text-destructive-foreground hover:bg-destructive/90"
            >
              {isProcessing ? "Deleting..." : "Delete"}
            </AlertDialogAction>
          </AlertDialogFooter>
        </AlertDialogContent>
      </AlertDialog>
    </>
  );
}




====================================================================================================
FILE: components\tables\records-table-actions.tsx
SIZE: 3.16 KB
====================================================================================================
"use client";
import { MoreHorizontal, Ban, Trash2, Eye } from "lucide-react";
import { Button } from "@/components/ui/button";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import { doc, updateDoc, deleteDoc } from "firebase/firestore";
import { db } from "@/lib/firestore";
import type { Pass, PassStatus } from "@/types";
import { useToast } from "@/hooks/use-toast";
import RoleGate from "../auth/role-gate";
import { useState } from "react";
import PassPreviewDialog from "../forms/pass-preview-dialog";

interface RecordsTableActionsProps {
  pass: Pass;
  actualStatus: PassStatus;
}

export function RecordsTableActions({ pass, actualStatus }: RecordsTableActionsProps) {
  const { toast } = useToast();
  const [showPreview, setShowPreview] = useState(false);

  const handleRevoke = async () => {
    if (pass.status === "revoked") return;
    try {
      const passRef = doc(db, "passes", pass.id);
      await updateDoc(passRef, { status: "revoked" });
      toast({
        title: "Pass Revoked",
        description: `Pass for plate ${pass.plateAlpha}-${pass.plateNum} has been revoked.`,
      });
    } catch (error) {
      toast({
        variant: "destructive",
        title: "Error",
        description: "Failed to revoke pass.",
      });
    }
  };

  const handleDelete = async () => {
    try {
      await deleteDoc(doc(db, "passes", pass.id));
      toast({
        title: "Pass Deleted",
        description: `Pass for plate ${pass.plateAlpha}-${pass.plateNum} has been permanently deleted.`,
      });
    } catch (error) {
       toast({
        variant: "destructive",
        title: "Error",
        description: "Failed to delete pass.",
      });
    }
  };

  return (
    <>
      <DropdownMenu>
        <DropdownMenuTrigger asChild>
          <Button variant="ghost" className="h-8 w-8 p-0">
            <span className="sr-only">Open menu</span>
            <MoreHorizontal className="h-4 w-4" />
          </Button>
        </DropdownMenuTrigger>
        <DropdownMenuContent align="end">
          <DropdownMenuLabel>Actions</DropdownMenuLabel>
          <DropdownMenuItem onClick={() => setShowPreview(true)}>
            <Eye className="mr-2 h-4 w-4" />
            View Details
          </DropdownMenuItem>
          <RoleGate allowedRoles={["admin", "owner", "user"]}>
            <DropdownMenuSeparator />
            <DropdownMenuItem 
              onClick={handleRevoke} 
              disabled={actualStatus === 'revoked' || actualStatus === 'expired'} 
              className="text-orange-600 focus:text-orange-600"
            >
              <Ban className="mr-2 h-4 w-4" />
              Revoke
            </DropdownMenuItem>
            <DropdownMenuItem onClick={handleDelete} className="text-destructive focus:text-destructive">
              <Trash2 className="mr-2 h-4 w-4" />
              Delete
            </DropdownMenuItem>
          </RoleGate>
        </DropdownMenuContent>
      </DropdownMenu>
      {showPreview && (
        <PassPreviewDialog pass={pass} open={showPreview} onOpenChange={setShowPreview} />
      )}
    </>
  );
}



====================================================================================================
FILE: components\tables\records-table.tsx
SIZE: 10.31 KB
====================================================================================================
"use client";

import { useState, useMemo } from "react";
import type { Pass, PassStatus } from "@/types";
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import { Button } from "@/components/ui/button";
import { format } from "date-fns";
import { Badge } from "@/components/ui/badge";
import { RecordsTableActions } from "./records-table-actions";
import { BulkActionsBar } from "./bulk-actions-bar";
import { Input } from "../ui/input";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "../ui/select";
import { Popover, PopoverContent, PopoverTrigger } from "../ui/popover";
import { Calendar } from "../ui/calendar";
import { CalendarIcon, Loader2, ChevronLeft, ChevronRight } from "lucide-react";
import { cn } from "@/lib/utils";
import { useData } from "@/context/data-provider";
import { Checkbox } from "@/components/ui/checkbox";

const PAGE_SIZE = 10;

// Helper to calculate actual status based on expiry
const getActualStatus = (pass: Pass): PassStatus => {
  if (pass.status === "revoked") return "revoked";
  const now = new Date();
  const expiryDate = pass.expiresAt.toDate();
  return expiryDate < now ? "expired" : "active";
};

export function RecordsTable() {
  const { passes: allPasses, users, loading: dataLoading } = useData();
  const [currentPage, setCurrentPage] = useState(1);
  const [rowSelection, setRowSelection] = useState<Record<string, boolean>>({});
  const [filters, setFilters] = useState({
    company: "",
    status: "all",
    createdAt: undefined as Date | undefined,
    expiresAt: undefined as Date | undefined,
  });

  const filteredPasses = useMemo(() => {
    return allPasses.filter(pass => {
      const actualStatus = getActualStatus(pass);
      if (filters.status !== 'all' && actualStatus !== filters.status) return false;

      const companyMatch = pass.type === 'standard' ? pass.ownerCompany : pass.createdByCompany;
      if (filters.company && !companyMatch?.toLowerCase().includes(filters.company.toLowerCase())) return false;

      if (filters.createdAt && pass.createdAt.toDate() < filters.createdAt) return false;
      if (filters.expiresAt && pass.expiresAt.toDate() > filters.expiresAt) return false;

      return true;
    })
  }, [allPasses, filters]);

  const totalPages = Math.ceil(filteredPasses.length / PAGE_SIZE);

  const paginatedPasses = useMemo(() => {
    const start = (currentPage - 1) * PAGE_SIZE;
    const end = start + PAGE_SIZE;
    return filteredPasses.slice(start, end);
  }, [filteredPasses, currentPage]);

  const selectedPasses = useMemo(() => {
    return allPasses.filter(pass => rowSelection[pass.id]);
  }, [allPasses, rowSelection]);

  const handleFilterChange = (key: keyof typeof filters, value: any) => {
      setCurrentPage(1);
      setFilters(prev => ({...prev, [key]: value}));
  }

  const handleSelectAll = (checked: boolean | 'indeterminate') => {
    const newSelection: Record<string, boolean> = {};
    if (checked === true) {
      paginatedPasses.forEach(pass => {
        newSelection[pass.id] = true;
      });
    }
    setRowSelection(newSelection);
  };

  const handleRowSelect = (passId: string, checked: boolean | 'indeterminate') => {
    setRowSelection(prev => ({
      ...prev,
      [passId]: checked === true,
    }));
  };

  const handleClearSelection = () => {
    setRowSelection({});
  };

  const isAllVisibleSelected = paginatedPasses.length > 0 && paginatedPasses.every(pass => rowSelection[pass.id]);

  const getStatusVariant = (status: PassStatus) => {
    switch (status) {
      case "active":
        return "default";
      case "expired":
        return "destructive";
      case "revoked":
        return "destructive";
      default:
        return "outline";
    }
  };

  return (
    <div className="space-y-4">
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
            <Input
                placeholder="Filter by company..."
                value={filters.company}
                onChange={(e) => handleFilterChange('company', e.target.value)}
            />
            <Select value={filters.status} onValueChange={(value) => handleFilterChange('status', value)}>
                <SelectTrigger>
                    <SelectValue placeholder="Filter by status..." />
                </SelectTrigger>
                <SelectContent>
                    <SelectItem value="all">All Statuses</SelectItem>
                    <SelectItem value="active">Active</SelectItem>
                    <SelectItem value="expired">Expired</SelectItem>
                    <SelectItem value="revoked">Revoked</SelectItem>
                </SelectContent>
            </Select>
            <Popover>
                <PopoverTrigger asChild>
                <Button variant={"outline"} className={cn("justify-start text-left font-normal", !filters.createdAt && "text-muted-foreground")}>
                    <CalendarIcon className="mr-2 h-4 w-4" />
                    {filters.createdAt ? format(filters.createdAt, "PPP") : <span>Created after...</span>}
                </Button>
                </PopoverTrigger>
                <PopoverContent className="w-auto p-0">
                <Calendar mode="single" selected={filters.createdAt} onSelect={(d) => handleFilterChange('createdAt', d)} initialFocus />
                </PopoverContent>
            </Popover>
            <Popover>
                <PopoverTrigger asChild>
                <Button variant={"outline"} className={cn("justify-start text-left font-normal", !filters.expiresAt && "text-muted-foreground")}>
                    <CalendarIcon className="mr-2 h-4 w-4" />
                    {filters.expiresAt ? format(filters.expiresAt, "PPP") : <span>Expires before...</span>}
                </Button>
                </PopoverTrigger>
                <PopoverContent className="w-auto p-0">
                <Calendar mode="single" selected={filters.expiresAt} onSelect={(d) => handleFilterChange('expiresAt', d)} initialFocus />
                </PopoverContent>
            </Popover>
        </div>

      {selectedPasses.length > 0 && (
        <BulkActionsBar
          selectedPasses={selectedPasses}
          onClearSelection={handleClearSelection}
          onActionComplete={() => {
            // Refresh will happen automatically via DataProvider
            handleClearSelection();
          }}
        />
      )}

      <div className="rounded-md border">
        <Table>
          <TableHeader>
            <TableRow>
              <TableHead className="w-[40px]">
                <Checkbox
                  checked={isAllVisibleSelected}
                  onCheckedChange={handleSelectAll}
                  aria-label="Select all"
                />
              </TableHead>
              <TableHead>Plate</TableHead>
              <TableHead>Owner / Visitor</TableHead>
              <TableHead>Company</TableHead>
              <TableHead>Status</TableHead>
              <TableHead>Expires At</TableHead>
              <TableHead>Created By</TableHead>
              <TableHead>
                <span className="sr-only">Actions</span>
              </TableHead>
            </TableRow>
          </TableHeader>
          <TableBody>
            {dataLoading ? (
              <TableRow>
                <TableCell colSpan={8} className="h-24 text-center">
                  <Loader2 className="mx-auto h-6 w-6 animate-spin text-primary" />
                </TableCell>
              </TableRow>
            ) : paginatedPasses.length > 0 ? (
              paginatedPasses.map((pass) => {
                const creator = users.find(u => u.uid === pass.createdBy);
                const actualStatus = getActualStatus(pass);
                return (
                  <TableRow key={pass.id} data-state={rowSelection[pass.id] && 'selected'}>
                    <TableCell>
                      <Checkbox
                        checked={rowSelection[pass.id] || false}
                        onCheckedChange={(checked) => handleRowSelect(pass.id, checked)}
                        aria-label="Select row"
                      />
                    </TableCell>
                    <TableCell className="font-medium">
                      {pass.plateAlpha}-{pass.plateNum}
                    </TableCell>
                    <TableCell>
                      {pass.type === "standard" ? pass.ownerName : pass.visitorName}
                    </TableCell>
                    <TableCell>
                      {pass.type === "standard" ? pass.ownerCompany : pass.createdByCompany}
                    </TableCell>
                    <TableCell>
                      <Badge variant={getStatusVariant(actualStatus)}>{actualStatus}</Badge>
                    </TableCell>
                    <TableCell>
                      {format(pass.expiresAt.toDate(), "PP")}
                    </TableCell>
                    <TableCell>
                      {creator?.fullName || "N/A"}
                    </TableCell>
                    <TableCell>
                      <RecordsTableActions pass={pass} actualStatus={actualStatus} />
                    </TableCell>
                  </TableRow>
                )
              })
            ) : (
              <TableRow>
                <TableCell colSpan={8} className="h-24 text-center">
                  No passes found.
                </TableCell>
              </TableRow>
            )}
          </TableBody>
        </Table>
      </div>
      
      {totalPages > 1 && (
        <div className="flex items-center justify-between">
          <div className="text-sm text-muted-foreground">
            Page {currentPage} of {totalPages} ({filteredPasses.length} total passes)
          </div>
          <div className="flex items-center gap-2">
            <Button
              variant="outline"
              size="sm"
              onClick={() => setCurrentPage(p => Math.max(1, p - 1))}
              disabled={currentPage === 1}
            >
              <ChevronLeft className="h-4 w-4 mr-1" />
              Previous
            </Button>
            <Button
              variant="outline"
              size="sm"
              onClick={() => setCurrentPage(p => Math.min(totalPages, p + 1))}
              disabled={currentPage === totalPages}
            >
              Next
              <ChevronRight className="h-4 w-4 ml-1" />
            </Button>
          </div>
        </div>
      )}
    </div>
  );
}




====================================================================================================
FILE: components\tables\users-table-actions.tsx
SIZE: 5.83 KB
====================================================================================================
"use client";

import { MoreHorizontal, Check, X, Shield, User, Mail } from "lucide-react";
import { Button } from "@/components/ui/button";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuSub,
  DropdownMenuSubContent,
  DropdownMenuSubTrigger,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import { doc, updateDoc, serverTimestamp } from "firebase/firestore";
import { db } from "@/lib/firestore";
import type { AppUser, Role } from "@/types";
import { useToast } from "@/hooks/use-toast";
import { useAuth } from "@/hooks/use-auth";
import { sendApprovalEmail } from "@/lib/email";

interface UsersTableActionsProps {
  user: AppUser;
}

export function UsersTableActions({ user: targetUser }: UsersTableActionsProps) {
  const { toast } = useToast();
  const { user: currentUser } = useAuth();
  
  const handleRoleChange = async (newRole: Role) => {
    if (currentUser?.uid === targetUser.uid) {
        toast({ 
          variant: "destructive", 
          title: "Error", 
          description: "You cannot change your own role."
        });
        return;
    }
    
    try {
      const userRef = doc(db, "users", targetUser.uid);
      
      // Update user role with approval metadata
      await updateDoc(userRef, { 
        role: newRole, 
        approvedBy: currentUser?.uid, 
        approvedAt: serverTimestamp() 
      });
      
      // Send email notification if user was approved from pending status
      if (targetUser.role === 'pending' && (newRole === 'user' || newRole === 'admin')) {
        // Send email asynchronously - don't wait for it
        sendApprovalEmail(
          targetUser.email,
          targetUser.fullName,
          newRole
        ).then((emailSent) => {
          if (emailSent) {
            console.log('âœ… Approval email sent to:', targetUser.email);
          }
        }).catch((error) => {
          console.error('Email sending failed (non-critical):', error);
        });
      }
      
      // Show success message with different text based on action
      if (newRole === 'rejected') {
        toast({
          variant: "destructive",
          title: "User Rejected",
          description: `${targetUser.fullName}'s account has been rejected.`,
        });
      } else if (targetUser.role === 'pending') {
        toast({
          title: "âœ… User Approved!",
          description: `${targetUser.fullName} has been approved as ${newRole}. They will receive an email notification.`,
          duration: 5000,
        });
      } else {
        toast({
          title: "Role Updated",
          description: `${targetUser.fullName}'s role has been changed to ${newRole}.`,
        });
      }
      
    } catch (error) {
      console.error("Error updating user role:", error);
      toast({
        variant: "destructive",
        title: "Error",
        description: "Failed to update user role. Please try again.",
      });
    }
  };

  return (
    <DropdownMenu>
      <DropdownMenuTrigger asChild>
        <Button variant="ghost" className="h-8 w-8 p-0">
          <span className="sr-only">Open menu</span>
          <MoreHorizontal className="h-4 w-4" />
        </Button>
      </DropdownMenuTrigger>
      <DropdownMenuContent align="end">
        <DropdownMenuLabel>Manage User</DropdownMenuLabel>
        <DropdownMenuSeparator />
        {targetUser.role === "pending" && (
            <>
                <DropdownMenuItem onClick={() => handleRoleChange('user')}>
                    <Check className="mr-2 h-4 w-4" />
                    Approve as User
                </DropdownMenuItem>
                <DropdownMenuItem onClick={() => handleRoleChange('admin')}>
                    <Shield className="mr-2 h-4 w-4" />
                    Approve as Admin
                </DropdownMenuItem>
                <DropdownMenuSeparator />
                <DropdownMenuItem 
                  onClick={() => handleRoleChange('rejected')} 
                  className="text-destructive focus:text-destructive"
                >
                    <X className="mr-2 h-4 w-4" />
                    Reject
                </DropdownMenuItem>
            </>
        )}
        {targetUser.role !== 'pending' && targetUser.role !== 'owner' && (
             <DropdownMenuSub>
                <DropdownMenuSubTrigger>
                    {targetUser.role === 'admin' ? <Shield className="mr-2 h-4 w-4" /> : <User className="mr-2 h-4 w-4" />}
                    <span>Change Role</span>
                </DropdownMenuSubTrigger>
                <DropdownMenuSubContent>
                    <DropdownMenuItem 
                      onClick={() => handleRoleChange('user')} 
                      disabled={targetUser.role === 'user'}
                    >
                        <User className="mr-2 h-4 w-4" />
                        User
                    </DropdownMenuItem>
                    <DropdownMenuItem 
                      onClick={() => handleRoleChange('admin')} 
                      disabled={targetUser.role === 'admin'}
                    >
                        <Shield className="mr-2 h-4 w-4" />
                        Admin
                    </DropdownMenuItem>
                    <DropdownMenuSeparator />
                    <DropdownMenuItem 
                      onClick={() => handleRoleChange('rejected')}
                      className="text-destructive focus:text-destructive"
                    >
                        <X className="mr-2 h-4 w-4" />
                        Revoke Access
                    </DropdownMenuItem>
                </DropdownMenuSubContent>
             </DropdownMenuSub>
        )}
      </DropdownMenuContent>
    </DropdownMenu>
  );
}



====================================================================================================
FILE: components\tables\users-table.tsx
SIZE: 3.07 KB
====================================================================================================
"use client";

import type { AppUser, Role } from "@/types";
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import { Badge } from "@/components/ui/badge";
import { UsersTableActions } from "./users-table-actions";
import { useAuth } from "@/hooks/use-auth";
import { Loader2 } from "lucide-react";
import { useData } from "@/context/data-provider";

export function UsersTable() {
  const { users, loading } = useData();
  const { user: currentUser } = useAuth();

  const getRoleBadgeClass = (role: Role) => {
    switch (role) {
      case "pending":
        return "bg-red-100 text-red-800 border-red-300 dark:bg-red-900 dark:text-red-200";
      case "user":
        return "bg-green-100 text-green-800 border-green-300 dark:bg-green-900 dark:text-green-200";
      case "admin":
        return "bg-blue-100 text-blue-800 border-blue-300 dark:bg-blue-900 dark:text-blue-200";
      case "owner":
        return "bg-purple-100 text-purple-800 border-purple-300 dark:bg-purple-900 dark:text-purple-200";
      case "rejected":
        return "bg-gray-100 text-gray-800 border-gray-300 dark:bg-gray-900 dark:text-gray-200";
      default:
        return "bg-gray-100 text-gray-800 border-gray-300";
    }
  };

  const displayUsers = users.filter(user => user.role !== 'owner');

  return (
    <div className="rounded-md border">
      <Table>
        <TableHeader>
          <TableRow>
            <TableHead>Full Name</TableHead>
            <TableHead>Email</TableHead>
            <TableHead>Company</TableHead>
            <TableHead>Role</TableHead>
            <TableHead>
              <span className="sr-only">Actions</span>
            </TableHead>
          </TableRow>
        </TableHeader>
        <TableBody>
          {loading ? (
            <TableRow>
              <TableCell colSpan={5} className="h-24 text-center">
                <Loader2 className="mx-auto h-6 w-6 animate-spin text-primary" />
              </TableCell>
            </TableRow>
          ) : displayUsers.length > 0 ? (
            displayUsers.map((user) => (
              <TableRow key={user.uid}>
                <TableCell className="font-medium">{user.fullName}</TableCell>
                <TableCell>{user.email}</TableCell>
                <TableCell>{user.company}</TableCell>
                <TableCell>
                  <Badge className={`capitalize ${getRoleBadgeClass(user.role)}`}>
                    {user.role}
                  </Badge>
                </TableCell>
                <TableCell>
                  {currentUser?.uid !== user.uid && user.role !== 'owner' && (
                    <UsersTableActions user={user} />
                  )}
                </TableCell>
              </TableRow>
            ))
          ) : (
            <TableRow>
              <TableCell colSpan={5} className="h-24 text-center">
                No users found.
              </TableCell>
            </TableRow>
          )}
        </TableBody>
      </Table>
    </div>
  );
}



====================================================================================================
FILE: components\ui\accordion.tsx
SIZE: 2 KB
====================================================================================================
"use client"

import * as React from "react"
import * as AccordionPrimitive from "@radix-ui/react-accordion"
import { ChevronDown } from "lucide-react"

import { cn } from "@/lib/utils"

const Accordion = AccordionPrimitive.Root

const AccordionItem = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>
>(({ className, ...props }, ref) => (
  <AccordionPrimitive.Item
    ref={ref}
    className={cn("border-b", className)}
    {...props}
  />
))
AccordionItem.displayName = "AccordionItem"

const AccordionTrigger = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Header className="flex">
    <AccordionPrimitive.Trigger
      ref={ref}
      className={cn(
        "flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180",
        className
      )}
      {...props}
    >
      {children}
      <ChevronDown className="h-4 w-4 shrink-0 transition-transform duration-200" />
    </AccordionPrimitive.Trigger>
  </AccordionPrimitive.Header>
))
AccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName

const AccordionContent = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Content
    ref={ref}
    className="overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down"
    {...props}
  >
    <div className={cn("pb-4 pt-0", className)}>{children}</div>
  </AccordionPrimitive.Content>
))

AccordionContent.displayName = AccordionPrimitive.Content.displayName

export { Accordion, AccordionItem, AccordionTrigger, AccordionContent }




====================================================================================================
FILE: components\ui\alert-dialog.tsx
SIZE: 4.47 KB
====================================================================================================
"use client"

import * as React from "react"
import * as AlertDialogPrimitive from "@radix-ui/react-alert-dialog"

import { cn } from "@/lib/utils"
import { buttonVariants } from "@/components/ui/button"

const AlertDialog = AlertDialogPrimitive.Root

const AlertDialogTrigger = AlertDialogPrimitive.Trigger

const AlertDialogPortal = AlertDialogPrimitive.Portal

const AlertDialogOverlay = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Overlay
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
    ref={ref}
  />
))
AlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName

const AlertDialogContent = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>
>(({ className, ...props }, ref) => (
  <AlertDialogPortal>
    <AlertDialogOverlay />
    <AlertDialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}
    />
  </AlertDialogPortal>
))
AlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName

const AlertDialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-2 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
AlertDialogHeader.displayName = "AlertDialogHeader"

const AlertDialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
AlertDialogFooter.displayName = "AlertDialogFooter"

const AlertDialogTitle = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold", className)}
    {...props}
  />
))
AlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName

const AlertDialogDescription = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
AlertDialogDescription.displayName =
  AlertDialogPrimitive.Description.displayName

const AlertDialogAction = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Action>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Action
    ref={ref}
    className={cn(buttonVariants(), className)}
    {...props}
  />
))
AlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName

const AlertDialogCancel = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Cancel
    ref={ref}
    className={cn(
      buttonVariants({ variant: "outline" }),
      "mt-2 sm:mt-0",
      className
    )}
    {...props}
  />
))
AlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName

export {
  AlertDialog,
  AlertDialogPortal,
  AlertDialogOverlay,
  AlertDialogTrigger,
  AlertDialogContent,
  AlertDialogHeader,
  AlertDialogFooter,
  AlertDialogTitle,
  AlertDialogDescription,
  AlertDialogAction,
  AlertDialogCancel,
}




====================================================================================================
FILE: components\ui\alert.tsx
SIZE: 1.6 KB
====================================================================================================
import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const alertVariants = cva(
  "relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground",
  {
    variants: {
      variant: {
        default: "bg-background text-foreground",
        destructive:
          "border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

const Alert = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>
>(({ className, variant, ...props }, ref) => (
  <div
    ref={ref}
    role="alert"
    className={cn(alertVariants({ variant }), className)}
    {...props}
  />
))
Alert.displayName = "Alert"

const AlertTitle = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLHeadingElement>
>(({ className, ...props }, ref) => (
  <h5
    ref={ref}
    className={cn("mb-1 font-medium leading-none tracking-tight", className)}
    {...props}
  />
))
AlertTitle.displayName = "AlertTitle"

const AlertDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("text-sm [&_p]:leading-relaxed", className)}
    {...props}
  />
))
AlertDescription.displayName = "AlertDescription"

export { Alert, AlertTitle, AlertDescription }




====================================================================================================
FILE: components\ui\avatar.tsx
SIZE: 1.43 KB
====================================================================================================
"use client"

import * as React from "react"
import * as AvatarPrimitive from "@radix-ui/react-avatar"

import { cn } from "@/lib/utils"

const Avatar = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Root
    ref={ref}
    className={cn(
      "relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full",
      className
    )}
    {...props}
  />
))
Avatar.displayName = AvatarPrimitive.Root.displayName

const AvatarImage = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Image>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Image
    ref={ref}
    className={cn("aspect-square h-full w-full", className)}
    {...props}
  />
))
AvatarImage.displayName = AvatarPrimitive.Image.displayName

const AvatarFallback = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Fallback>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Fallback
    ref={ref}
    className={cn(
      "flex h-full w-full items-center justify-center rounded-full bg-muted",
      className
    )}
    {...props}
  />
))
AvatarFallback.displayName = AvatarPrimitive.Fallback.displayName

export { Avatar, AvatarImage, AvatarFallback }




====================================================================================================
FILE: components\ui\badge.tsx
SIZE: 1.14 KB
====================================================================================================
import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const badgeVariants = cva(
  "inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2",
  {
    variants: {
      variant: {
        default:
          "border-transparent bg-primary text-primary-foreground hover:bg-primary/80",
        secondary:
          "border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80",
        destructive:
          "border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80",
        outline: "text-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

export interface BadgeProps
  extends React.HTMLAttributes<HTMLDivElement>,
    VariantProps<typeof badgeVariants> {}

function Badge({ className, variant, ...props }: BadgeProps) {
  return (
    <div className={cn(badgeVariants({ variant }), className)} {...props} />
  )
}

export { Badge, badgeVariants }




====================================================================================================
FILE: components\ui\button.tsx
SIZE: 1.85 KB
====================================================================================================
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50",
  {
    variants: {
      variant: {
        default: "bg-primary text-primary-foreground hover:bg-primary/90",
        destructive:
          "bg-destructive text-destructive-foreground hover:bg-destructive/90",
        outline:
          "border border-input bg-background hover:bg-accent hover:text-accent-foreground",
        secondary:
          "bg-secondary text-secondary-foreground hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-10 px-4 py-2",
        sm: "h-9 rounded-md px-3",
        lg: "h-11 rounded-md px-8",
        icon: "h-10 w-10",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button"
    return (
      <Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    )
  }
)
Button.displayName = "Button"

export { Button, buttonVariants }




====================================================================================================
FILE: components\ui\calendar.tsx
SIZE: 2.71 KB
====================================================================================================
"use client"

import * as React from "react"
import { ChevronLeft, ChevronRight } from "lucide-react"
import { DayPicker } from "react-day-picker"

import { cn } from "@/lib/utils"
import { buttonVariants } from "@/components/ui/button"

export type CalendarProps = React.ComponentProps<typeof DayPicker>

function Calendar({
  className,
  classNames,
  showOutsideDays = true,
  ...props
}: CalendarProps) {
  return (
    <DayPicker
      showOutsideDays={showOutsideDays}
      className={cn("p-3", className)}
      classNames={{
        months: "flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0",
        month: "space-y-4",
        caption: "flex justify-center pt-1 relative items-center",
        caption_label: "text-sm font-medium",
        nav: "space-x-1 flex items-center",
        nav_button: cn(
          buttonVariants({ variant: "outline" }),
          "h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100"
        ),
        nav_button_previous: "absolute left-1",
        nav_button_next: "absolute right-1",
        table: "w-full border-collapse space-y-1",
        head_row: "flex",
        head_cell:
          "text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]",
        row: "flex w-full mt-2",
        cell: "h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20",
        day: cn(
          buttonVariants({ variant: "ghost" }),
          "h-9 w-9 p-0 font-normal aria-selected:opacity-100"
        ),
        day_range_end: "day-range-end",
        day_selected:
          "bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground",
        day_today: "bg-accent text-accent-foreground",
        day_outside:
          "day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground",
        day_disabled: "text-muted-foreground opacity-50",
        day_range_middle:
          "aria-selected:bg-accent aria-selected:text-accent-foreground",
        day_hidden: "invisible",
        ...classNames,
      }}
      components={{
        IconLeft: ({ className, ...props }) => (
          <ChevronLeft className={cn("h-4 w-4", className)} {...props} />
        ),
        IconRight: ({ className, ...props }) => (
          <ChevronRight className={cn("h-4 w-4", className)} {...props} />
        ),
      }}
      {...props}
    />
  )
}
Calendar.displayName = "Calendar"

export { Calendar }




====================================================================================================
FILE: components\ui\card.tsx
SIZE: 1.89 KB
====================================================================================================
import * as React from "react"

import { cn } from "@/lib/utils"

const Card = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "rounded-lg border bg-card text-card-foreground shadow-sm",
      className
    )}
    {...props}
  />
))
Card.displayName = "Card"

const CardHeader = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex flex-col space-y-1.5 p-6", className)}
    {...props}
  />
))
CardHeader.displayName = "CardHeader"

const CardTitle = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "text-2xl font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
CardTitle.displayName = "CardTitle"

const CardDescription = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
CardDescription.displayName = "CardDescription"

const CardContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
))
CardContent.displayName = "CardContent"

const CardFooter = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex items-center p-6 pt-0", className)}
    {...props}
  />
))
CardFooter.displayName = "CardFooter"

export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }




====================================================================================================
FILE: components\ui\carousel.tsx
SIZE: 6.33 KB
====================================================================================================
"use client"

import * as React from "react"
import useEmblaCarousel, {
  type UseEmblaCarouselType,
} from "embla-carousel-react"
import { ArrowLeft, ArrowRight } from "lucide-react"

import { cn } from "@/lib/utils"
import { Button } from "@/components/ui/button"

type CarouselApi = UseEmblaCarouselType[1]
type UseCarouselParameters = Parameters<typeof useEmblaCarousel>
type CarouselOptions = UseCarouselParameters[0]
type CarouselPlugin = UseCarouselParameters[1]

type CarouselProps = {
  opts?: CarouselOptions
  plugins?: CarouselPlugin
  orientation?: "horizontal" | "vertical"
  setApi?: (api: CarouselApi) => void
}

type CarouselContextProps = {
  carouselRef: ReturnType<typeof useEmblaCarousel>[0]
  api: ReturnType<typeof useEmblaCarousel>[1]
  scrollPrev: () => void
  scrollNext: () => void
  canScrollPrev: boolean
  canScrollNext: boolean
} & CarouselProps

const CarouselContext = React.createContext<CarouselContextProps | null>(null)

function useCarousel() {
  const context = React.useContext(CarouselContext)

  if (!context) {
    throw new Error("useCarousel must be used within a <Carousel />")
  }

  return context
}

const Carousel = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement> & CarouselProps
>(
  (
    {
      orientation = "horizontal",
      opts,
      setApi,
      plugins,
      className,
      children,
      ...props
    },
    ref
  ) => {
    const [carouselRef, api] = useEmblaCarousel(
      {
        ...opts,
        axis: orientation === "horizontal" ? "x" : "y",
      },
      plugins
    )
    const [canScrollPrev, setCanScrollPrev] = React.useState(false)
    const [canScrollNext, setCanScrollNext] = React.useState(false)

    const onSelect = React.useCallback((api: CarouselApi) => {
      if (!api) {
        return
      }

      setCanScrollPrev(api.canScrollPrev())
      setCanScrollNext(api.canScrollNext())
    }, [])

    const scrollPrev = React.useCallback(() => {
      api?.scrollPrev()
    }, [api])

    const scrollNext = React.useCallback(() => {
      api?.scrollNext()
    }, [api])

    const handleKeyDown = React.useCallback(
      (event: React.KeyboardEvent<HTMLDivElement>) => {
        if (event.key === "ArrowLeft") {
          event.preventDefault()
          scrollPrev()
        } else if (event.key === "ArrowRight") {
          event.preventDefault()
          scrollNext()
        }
      },
      [scrollPrev, scrollNext]
    )

    React.useEffect(() => {
      if (!api || !setApi) {
        return
      }

      setApi(api)
    }, [api, setApi])

    React.useEffect(() => {
      if (!api) {
        return
      }

      onSelect(api)
      api.on("reInit", onSelect)
      api.on("select", onSelect)

      return () => {
        api?.off("select", onSelect)
      }
    }, [api, onSelect])

    return (
      <CarouselContext.Provider
        value={{
          carouselRef,
          api: api,
          opts,
          orientation:
            orientation || (opts?.axis === "y" ? "vertical" : "horizontal"),
          scrollPrev,
          scrollNext,
          canScrollPrev,
          canScrollNext,
        }}
      >
        <div
          ref={ref}
          onKeyDownCapture={handleKeyDown}
          className={cn("relative", className)}
          role="region"
          aria-roledescription="carousel"
          {...props}
        >
          {children}
        </div>
      </CarouselContext.Provider>
    )
  }
)
Carousel.displayName = "Carousel"

const CarouselContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const { carouselRef, orientation } = useCarousel()

  return (
    <div ref={carouselRef} className="overflow-hidden">
      <div
        ref={ref}
        className={cn(
          "flex",
          orientation === "horizontal" ? "-ml-4" : "-mt-4 flex-col",
          className
        )}
        {...props}
      />
    </div>
  )
})
CarouselContent.displayName = "CarouselContent"

const CarouselItem = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const { orientation } = useCarousel()

  return (
    <div
      ref={ref}
      role="group"
      aria-roledescription="slide"
      className={cn(
        "min-w-0 shrink-0 grow-0 basis-full",
        orientation === "horizontal" ? "pl-4" : "pt-4",
        className
      )}
      {...props}
    />
  )
})
CarouselItem.displayName = "CarouselItem"

const CarouselPrevious = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<typeof Button>
>(({ className, variant = "outline", size = "icon", ...props }, ref) => {
  const { orientation, scrollPrev, canScrollPrev } = useCarousel()

  return (
    <Button
      ref={ref}
      variant={variant}
      size={size}
      className={cn(
        "absolute  h-8 w-8 rounded-full",
        orientation === "horizontal"
          ? "-left-12 top-1/2 -translate-y-1/2"
          : "-top-12 left-1/2 -translate-x-1/2 rotate-90",
        className
      )}
      disabled={!canScrollPrev}
      onClick={scrollPrev}
      {...props}
    >
      <ArrowLeft className="h-4 w-4" />
      <span className="sr-only">Previous slide</span>
    </Button>
  )
})
CarouselPrevious.displayName = "CarouselPrevious"

const CarouselNext = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<typeof Button>
>(({ className, variant = "outline", size = "icon", ...props }, ref) => {
  const { orientation, scrollNext, canScrollNext } = useCarousel()

  return (
    <Button
      ref={ref}
      variant={variant}
      size={size}
      className={cn(
        "absolute h-8 w-8 rounded-full",
        orientation === "horizontal"
          ? "-right-12 top-1/2 -translate-y-1/2"
          : "-bottom-12 left-1/2 -translate-x-1/2 rotate-90",
        className
      )}
      disabled={!canScrollNext}
      onClick={scrollNext}
      {...props}
    >
      <ArrowRight className="h-4 w-4" />
      <span className="sr-only">Next slide</span>
    </Button>
  )
})
CarouselNext.displayName = "CarouselNext"

export {
  type CarouselApi,
  Carousel,
  CarouselContent,
  CarouselItem,
  CarouselPrevious,
  CarouselNext,
}




====================================================================================================
FILE: components\ui\chart.tsx
SIZE: 10.59 KB
====================================================================================================
"use client"

import * as React from "react"
import * as RechartsPrimitive from "recharts"

import { cn } from "@/lib/utils"

// Format: { THEME_NAME: CSS_SELECTOR }
const THEMES = { light: "", dark: ".dark" } as const

export type ChartConfig = {
  [k in string]: {
    label?: React.ReactNode
    icon?: React.ComponentType
  } & (
    | { color?: string; theme?: never }
    | { color?: never; theme: Record<keyof typeof THEMES, string> }
  )
}

type ChartContextProps = {
  config: ChartConfig
}

const ChartContext = React.createContext<ChartContextProps | null>(null)

function useChart() {
  const context = React.useContext(ChartContext)

  if (!context) {
    throw new Error("useChart must be used within a <ChartContainer />")
  }

  return context
}

const ChartContainer = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    config: ChartConfig
    children: React.ComponentProps<
      typeof RechartsPrimitive.ResponsiveContainer
    >["children"]
  }
>(({ id, className, children, config, ...props }, ref) => {
  const uniqueId = React.useId()
  const chartId = `chart-${id || uniqueId.replace(/:/g, "")}`

  return (
    <ChartContext.Provider value={{ config }}>
      <div
        data-chart={chartId}
        ref={ref}
        className={cn(
          "flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none",
          className
        )}
        {...props}
      >
        <ChartStyle id={chartId} config={config} />
        <RechartsPrimitive.ResponsiveContainer>
          {children}
        </RechartsPrimitive.ResponsiveContainer>
      </div>
    </ChartContext.Provider>
  )
})
ChartContainer.displayName = "Chart"

const ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {
  const colorConfig = Object.entries(config).filter(
    ([, config]) => config.theme || config.color
  )

  if (!colorConfig.length) {
    return null
  }

  return (
    <style
      dangerouslySetInnerHTML={{
        __html: Object.entries(THEMES)
          .map(
            ([theme, prefix]) => `
${prefix} [data-chart=${id}] {
${colorConfig
  .map(([key, itemConfig]) => {
    const color =
      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||
      itemConfig.color
    return color ? `  --color-${key}: ${color};` : null
  })
  .join("\n")}
}
`
          )
          .join("\n"),
      }}
    />
  )
}

const ChartTooltip = RechartsPrimitive.Tooltip

const ChartTooltipContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &
    React.ComponentProps<"div"> & {
      hideLabel?: boolean
      hideIndicator?: boolean
      indicator?: "line" | "dot" | "dashed"
      nameKey?: string
      labelKey?: string
    }
>(
  (
    {
      active,
      payload,
      className,
      indicator = "dot",
      hideLabel = false,
      hideIndicator = false,
      label,
      labelFormatter,
      labelClassName,
      formatter,
      color,
      nameKey,
      labelKey,
    },
    ref
  ) => {
    const { config } = useChart()

    const tooltipLabel = React.useMemo(() => {
      if (hideLabel || !payload?.length) {
        return null
      }

      const [item] = payload
      const key = `${labelKey || item.dataKey || item.name || "value"}`
      const itemConfig = getPayloadConfigFromPayload(config, item, key)
      const value =
        !labelKey && typeof label === "string"
          ? config[label as keyof typeof config]?.label || label
          : itemConfig?.label

      if (labelFormatter) {
        return (
          <div className={cn("font-medium", labelClassName)}>
            {labelFormatter(value, payload)}
          </div>
        )
      }

      if (!value) {
        return null
      }

      return <div className={cn("font-medium", labelClassName)}>{value}</div>
    }, [
      label,
      labelFormatter,
      payload,
      hideLabel,
      labelClassName,
      config,
      labelKey,
    ])

    if (!active || !payload?.length) {
      return null
    }

    const nestLabel = payload.length === 1 && indicator !== "dot"

    return (
      <div
        ref={ref}
        className={cn(
          "grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl",
          className
        )}
      >
        {!nestLabel ? tooltipLabel : null}
        <div className="grid gap-1.5">
          {payload.map((item, index) => {
            const key = `${nameKey || item.name || item.dataKey || "value"}`
            const itemConfig = getPayloadConfigFromPayload(config, item, key)
            const indicatorColor = color || item.payload.fill || item.color

            return (
              <div
                key={item.dataKey}
                className={cn(
                  "flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground",
                  indicator === "dot" && "items-center"
                )}
              >
                {formatter && item?.value !== undefined && item.name ? (
                  formatter(item.value, item.name, item, index, item.payload)
                ) : (
                  <>
                    {itemConfig?.icon ? (
                      <itemConfig.icon />
                    ) : (
                      !hideIndicator && (
                        <div
                          className={cn(
                            "shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]",
                            {
                              "h-2.5 w-2.5": indicator === "dot",
                              "w-1": indicator === "line",
                              "w-0 border-[1.5px] border-dashed bg-transparent":
                                indicator === "dashed",
                              "my-0.5": nestLabel && indicator === "dashed",
                            }
                          )}
                          style={
                            {
                              "--color-bg": indicatorColor,
                              "--color-border": indicatorColor,
                            } as React.CSSProperties
                          }
                        />
                      )
                    )}
                    <div
                      className={cn(
                        "flex flex-1 justify-between leading-none",
                        nestLabel ? "items-end" : "items-center"
                      )}
                    >
                      <div className="grid gap-1.5">
                        {nestLabel ? tooltipLabel : null}
                        <span className="text-muted-foreground">
                          {itemConfig?.label || item.name}
                        </span>
                      </div>
                      {item.value && (
                        <span className="font-mono font-medium tabular-nums text-foreground">
                          {item.value.toLocaleString()}
                        </span>
                      )}
                    </div>
                  </>
                )}
              </div>
            )
          })}
        </div>
      </div>
    )
  }
)
ChartTooltipContent.displayName = "ChartTooltip"

const ChartLegend = RechartsPrimitive.Legend

const ChartLegendContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> &
    Pick<RechartsPrimitive.LegendProps, "payload" | "verticalAlign"> & {
      hideIcon?: boolean
      nameKey?: string
    }
>(
  (
    { className, hideIcon = false, payload, verticalAlign = "bottom", nameKey },
    ref
  ) => {
    const { config } = useChart()

    if (!payload?.length) {
      return null
    }

    return (
      <div
        ref={ref}
        className={cn(
          "flex items-center justify-center gap-4",
          verticalAlign === "top" ? "pb-3" : "pt-3",
          className
        )}
      >
        {payload.map((item) => {
          const key = `${nameKey || item.dataKey || "value"}`
          const itemConfig = getPayloadConfigFromPayload(config, item, key)

          return (
            <div
              key={item.value}
              className={cn(
                "flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground"
              )}
            >
              {itemConfig?.icon && !hideIcon ? (
                <itemConfig.icon />
              ) : (
                <div
                  className="h-2 w-2 shrink-0 rounded-[2px]"
                  style={{
                    backgroundColor: item.color,
                  }}
                />
              )}
              {itemConfig?.label}
            </div>
          )
        })}
      </div>
    )
  }
)
ChartLegendContent.displayName = "ChartLegend"

// Helper to extract item config from a payload.
function getPayloadConfigFromPayload(
  config: ChartConfig,
  payload: unknown,
  key: string
) {
  if (typeof payload !== "object" || payload === null) {
    return undefined
  }

  const payloadPayload =
    "payload" in payload &&
    typeof payload.payload === "object" &&
    payload.payload !== null
      ? payload.payload
      : undefined

  let configLabelKey: string = key

  if (
    key in payload &&
    typeof payload[key as keyof typeof payload] === "string"
  ) {
    configLabelKey = payload[key as keyof typeof payload] as string
  } else if (
    payloadPayload &&
    key in payloadPayload &&
    typeof payloadPayload[key as keyof typeof payloadPayload] === "string"
  ) {
    configLabelKey = payloadPayload[
      key as keyof typeof payloadPayload
    ] as string
  }

  return configLabelKey in config
    ? config[configLabelKey]
    : config[key as keyof typeof config]
}

export {
  ChartContainer,
  ChartTooltip,
  ChartTooltipContent,
  ChartLegend,
  ChartLegendContent,
  ChartStyle,
}




====================================================================================================
FILE: components\ui\checkbox.tsx
SIZE: 1.07 KB
====================================================================================================
"use client"

import * as React from "react"
import * as CheckboxPrimitive from "@radix-ui/react-checkbox"
import { Check } from "lucide-react"

import { cn } from "@/lib/utils"

const Checkbox = React.forwardRef<
  React.ElementRef<typeof CheckboxPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>
>(({ className, ...props }, ref) => (
  <CheckboxPrimitive.Root
    ref={ref}
    className={cn(
      "peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground",
      className
    )}
    {...props}
  >
    <CheckboxPrimitive.Indicator
      className={cn("flex items-center justify-center text-current")}
    >
      <Check className="h-4 w-4" />
    </CheckboxPrimitive.Indicator>
  </CheckboxPrimitive.Root>
))
Checkbox.displayName = CheckboxPrimitive.Root.displayName

export { Checkbox }




====================================================================================================
FILE: components\ui\collapsible.tsx
SIZE: 0.33 KB
====================================================================================================
"use client"

import * as CollapsiblePrimitive from "@radix-ui/react-collapsible"

const Collapsible = CollapsiblePrimitive.Root

const CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger

const CollapsibleContent = CollapsiblePrimitive.CollapsibleContent

export { Collapsible, CollapsibleTrigger, CollapsibleContent }




====================================================================================================
FILE: components\ui\dialog.tsx
SIZE: 3.88 KB
====================================================================================================
"use client"

import * as React from "react"
import * as DialogPrimitive from "@radix-ui/react-dialog"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const Dialog = DialogPrimitive.Root

const DialogTrigger = DialogPrimitive.Trigger

const DialogPortal = DialogPrimitive.Portal

const DialogClose = DialogPrimitive.Close

const DialogOverlay = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Overlay
    ref={ref}
    className={cn(
      "fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
  />
))
DialogOverlay.displayName = DialogPrimitive.Overlay.displayName

const DialogContent = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DialogPortal>
    <DialogOverlay />
    <DialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}
    >
      {children}
      <DialogPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </DialogPrimitive.Close>
    </DialogPrimitive.Content>
  </DialogPortal>
))
DialogContent.displayName = DialogPrimitive.Content.displayName

const DialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-1.5 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
DialogHeader.displayName = "DialogHeader"

const DialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
DialogFooter.displayName = "DialogFooter"

const DialogTitle = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Title
    ref={ref}
    className={cn(
      "text-lg font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
DialogTitle.displayName = DialogPrimitive.Title.displayName

const DialogDescription = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
DialogDescription.displayName = DialogPrimitive.Description.displayName

export {
  Dialog,
  DialogPortal,
  DialogOverlay,
  DialogClose,
  DialogTrigger,
  DialogContent,
  DialogHeader,
  DialogFooter,
  DialogTitle,
  DialogDescription,
}




====================================================================================================
FILE: components\ui\dropdown-menu.tsx
SIZE: 7.45 KB
====================================================================================================
"use client"

import * as React from "react"
import * as DropdownMenuPrimitive from "@radix-ui/react-dropdown-menu"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const DropdownMenu = DropdownMenuPrimitive.Root

const DropdownMenuTrigger = DropdownMenuPrimitive.Trigger

const DropdownMenuGroup = DropdownMenuPrimitive.Group

const DropdownMenuPortal = DropdownMenuPrimitive.Portal

const DropdownMenuSub = DropdownMenuPrimitive.Sub

const DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup

const DropdownMenuSubTrigger = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <DropdownMenuPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto" />
  </DropdownMenuPrimitive.SubTrigger>
))
DropdownMenuSubTrigger.displayName =
  DropdownMenuPrimitive.SubTrigger.displayName

const DropdownMenuSubContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
DropdownMenuSubContent.displayName =
  DropdownMenuPrimitive.SubContent.displayName

const DropdownMenuContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <DropdownMenuPrimitive.Portal>
    <DropdownMenuPrimitive.Content
      ref={ref}
      sideOffset={sideOffset}
      className={cn(
        "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </DropdownMenuPrimitive.Portal>
))
DropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName

const DropdownMenuItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
DropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName

const DropdownMenuCheckboxItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <DropdownMenuPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.CheckboxItem>
))
DropdownMenuCheckboxItem.displayName =
  DropdownMenuPrimitive.CheckboxItem.displayName

const DropdownMenuRadioItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <DropdownMenuPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.RadioItem>
))
DropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName

const DropdownMenuLabel = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
DropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName

const DropdownMenuSeparator = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
DropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName

const DropdownMenuShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn("ml-auto text-xs tracking-widest opacity-60", className)}
      {...props}
    />
  )
}
DropdownMenuShortcut.displayName = "DropdownMenuShortcut"

export {
  DropdownMenu,
  DropdownMenuTrigger,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuCheckboxItem,
  DropdownMenuRadioItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuShortcut,
  DropdownMenuGroup,
  DropdownMenuPortal,
  DropdownMenuSub,
  DropdownMenuSubContent,
  DropdownMenuSubTrigger,
  DropdownMenuRadioGroup,
}




====================================================================================================
FILE: components\ui\form.tsx
SIZE: 4.2 KB
====================================================================================================
"use client"

import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { Slot } from "@radix-ui/react-slot"
import {
  Controller,
  FormProvider,
  useFormContext,
  type ControllerProps,
  type FieldPath,
  type FieldValues,
} from "react-hook-form"

import { cn } from "@/lib/utils"
import { Label } from "@/components/ui/label"

const Form = FormProvider

type FormFieldContextValue<
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>
> = {
  name: TName
}

const FormFieldContext = React.createContext<FormFieldContextValue>(
  {} as FormFieldContextValue
)

const FormField = <
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>
>({
  ...props
}: ControllerProps<TFieldValues, TName>) => {
  return (
    <FormFieldContext.Provider value={{ name: props.name }}>
      <Controller {...props} />
    </FormFieldContext.Provider>
  )
}

const useFormField = () => {
  const fieldContext = React.useContext(FormFieldContext)
  const itemContext = React.useContext(FormItemContext)
  const { getFieldState, formState } = useFormContext()

  const fieldState = getFieldState(fieldContext.name, formState)

  if (!fieldContext) {
    throw new Error("useFormField should be used within <FormField>")
  }

  const { id } = itemContext

  return {
    id,
    name: fieldContext.name,
    formItemId: `${id}-form-item`,
    formDescriptionId: `${id}-form-item-description`,
    formMessageId: `${id}-form-item-message`,
    ...fieldState,
  }
}

type FormItemContextValue = {
  id: string
}

const FormItemContext = React.createContext<FormItemContextValue>(
  {} as FormItemContextValue
)

const FormItem = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const id = React.useId()

  return (
    <FormItemContext.Provider value={{ id }}>
      <div ref={ref} className={cn("space-y-2", className)} {...props} />
    </FormItemContext.Provider>
  )
})
FormItem.displayName = "FormItem"

const FormLabel = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>
>(({ className, ...props }, ref) => {
  const { error, formItemId } = useFormField()

  return (
    <Label
      ref={ref}
      className={cn(error && "text-destructive", className)}
      htmlFor={formItemId}
      {...props}
    />
  )
})
FormLabel.displayName = "FormLabel"

const FormControl = React.forwardRef<
  React.ElementRef<typeof Slot>,
  React.ComponentPropsWithoutRef<typeof Slot>
>(({ ...props }, ref) => {
  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()

  return (
    <Slot
      ref={ref}
      id={formItemId}
      aria-describedby={
        !error
          ? `${formDescriptionId}`
          : `${formDescriptionId} ${formMessageId}`
      }
      aria-invalid={!!error}
      {...props}
    />
  )
})
FormControl.displayName = "FormControl"

const FormDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => {
  const { formDescriptionId } = useFormField()

  return (
    <p
      ref={ref}
      id={formDescriptionId}
      className={cn("text-sm text-muted-foreground", className)}
      {...props}
    />
  )
})
FormDescription.displayName = "FormDescription"

const FormMessage = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, children, ...props }, ref) => {
  const { error, formMessageId } = useFormField()
  const body = error ? String(error?.message ?? "") : children

  if (!body) {
    return null
  }

  return (
    <p
      ref={ref}
      id={formMessageId}
      className={cn("text-sm font-medium text-destructive", className)}
      {...props}
    >
      {body}
    </p>
  )
})
FormMessage.displayName = "FormMessage"

export {
  useFormField,
  Form,
  FormItem,
  FormLabel,
  FormControl,
  FormDescription,
  FormMessage,
  FormField,
}




====================================================================================================
FILE: components\ui\input.tsx
SIZE: 0.98 KB
====================================================================================================
"use client";

import * as React from "react";
import { cn } from "@/lib/utils";

export interface InputProps
  extends React.InputHTMLAttributes<HTMLInputElement> {}

const Input = React.forwardRef<HTMLInputElement, InputProps>(
  ({ className, type = "text", ...props }, ref) => {
    return (
      <input
        type={type}
        spellCheck={false}
        data-ms-editor="false"
        autoComplete="off"
        className={cn(
          "flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
          className
        )}
        ref={ref}
        {...props}
      />
    );
  }
);
Input.displayName = "Input";

export { Input };




====================================================================================================
FILE: components\ui\label.tsx
SIZE: 0.73 KB
====================================================================================================
"use client"

import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const labelVariants = cva(
  "text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
)

const Label = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &
    VariantProps<typeof labelVariants>
>(({ className, ...props }, ref) => (
  <LabelPrimitive.Root
    ref={ref}
    className={cn(labelVariants(), className)}
    {...props}
  />
))
Label.displayName = LabelPrimitive.Root.displayName

export { Label }




====================================================================================================
FILE: components\ui\menubar.tsx
SIZE: 8.56 KB
====================================================================================================
"use client"

import * as React from "react"
import * as MenubarPrimitive from "@radix-ui/react-menubar"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/lib/utils"

function MenubarMenu({
  ...props
}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {
  return <MenubarPrimitive.Menu {...props} />
}

function MenubarGroup({
  ...props
}: React.ComponentProps<typeof MenubarPrimitive.Group>) {
  return <MenubarPrimitive.Group {...props} />
}

function MenubarPortal({
  ...props
}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {
  return <MenubarPrimitive.Portal {...props} />
}

function MenubarRadioGroup({
  ...props
}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {
  return <MenubarPrimitive.RadioGroup {...props} />
}

function MenubarSub({
  ...props
}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {
  return <MenubarPrimitive.Sub data-slot="menubar-sub" {...props} />
}

const Menubar = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Root
    ref={ref}
    className={cn(
      "flex h-10 items-center space-x-1 rounded-md border bg-background p-1",
      className
    )}
    {...props}
  />
))
Menubar.displayName = MenubarPrimitive.Root.displayName

const MenubarTrigger = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Trigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground",
      className
    )}
    {...props}
  />
))
MenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName

const MenubarSubTrigger = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <MenubarPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto h-4 w-4" />
  </MenubarPrimitive.SubTrigger>
))
MenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName

const MenubarSubContent = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
MenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName

const MenubarContent = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>
>(
  (
    { className, align = "start", alignOffset = -4, sideOffset = 8, ...props },
    ref
  ) => (
    <MenubarPrimitive.Portal>
      <MenubarPrimitive.Content
        ref={ref}
        align={align}
        alignOffset={alignOffset}
        sideOffset={sideOffset}
        className={cn(
          "z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
          className
        )}
        {...props}
      />
    </MenubarPrimitive.Portal>
  )
)
MenubarContent.displayName = MenubarPrimitive.Content.displayName

const MenubarItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <MenubarPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
MenubarItem.displayName = MenubarPrimitive.Item.displayName

const MenubarCheckboxItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <MenubarPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <MenubarPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </MenubarPrimitive.ItemIndicator>
    </span>
    {children}
  </MenubarPrimitive.CheckboxItem>
))
MenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName

const MenubarRadioItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <MenubarPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <MenubarPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </MenubarPrimitive.ItemIndicator>
    </span>
    {children}
  </MenubarPrimitive.RadioItem>
))
MenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName

const MenubarLabel = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <MenubarPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
MenubarLabel.displayName = MenubarPrimitive.Label.displayName

const MenubarSeparator = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
MenubarSeparator.displayName = MenubarPrimitive.Separator.displayName

const MenubarShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn(
        "ml-auto text-xs tracking-widest text-muted-foreground",
        className
      )}
      {...props}
    />
  )
}
MenubarShortcut.displayname = "MenubarShortcut"

export {
  Menubar,
  MenubarMenu,
  MenubarTrigger,
  MenubarContent,
  MenubarItem,
  MenubarSeparator,
  MenubarLabel,
  MenubarCheckboxItem,
  MenubarRadioGroup,
  MenubarRadioItem,
  MenubarPortal,
  MenubarSubContent,
  MenubarSubTrigger,
  MenubarGroup,
  MenubarSub,
  MenubarShortcut,
}




====================================================================================================
FILE: components\ui\popover.tsx
SIZE: 1.25 KB
====================================================================================================
"use client"

import * as React from "react"
import * as PopoverPrimitive from "@radix-ui/react-popover"

import { cn } from "@/lib/utils"

const Popover = PopoverPrimitive.Root

const PopoverTrigger = PopoverPrimitive.Trigger

const PopoverContent = React.forwardRef<
  React.ElementRef<typeof PopoverPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>
>(({ className, align = "center", sideOffset = 4, ...props }, ref) => (
  <PopoverPrimitive.Portal>
    <PopoverPrimitive.Content
      ref={ref}
      align={align}
      sideOffset={sideOffset}
      className={cn(
        "z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </PopoverPrimitive.Portal>
))
PopoverContent.displayName = PopoverPrimitive.Content.displayName

export { Popover, PopoverTrigger, PopoverContent }




====================================================================================================
FILE: components\ui\progress.tsx
SIZE: 0.8 KB
====================================================================================================
"use client"

import * as React from "react"
import * as ProgressPrimitive from "@radix-ui/react-progress"

import { cn } from "@/lib/utils"

const Progress = React.forwardRef<
  React.ElementRef<typeof ProgressPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>
>(({ className, value, ...props }, ref) => (
  <ProgressPrimitive.Root
    ref={ref}
    className={cn(
      "relative h-4 w-full overflow-hidden rounded-full bg-secondary",
      className
    )}
    {...props}
  >
    <ProgressPrimitive.Indicator
      className="h-full w-full flex-1 bg-primary transition-all"
      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}
    />
  </ProgressPrimitive.Root>
))
Progress.displayName = ProgressPrimitive.Root.displayName

export { Progress }




====================================================================================================
FILE: components\ui\qr-code.tsx
SIZE: 2.5 KB
====================================================================================================
"use client";

import { useEffect, useRef } from "react";
import QRCode from "qrcode";

interface QrCodeDisplayProps {
  payload: any;
  size?: number;
}

export default function QrCodeDisplay({ payload, size = 200 }: QrCodeDisplayProps) {
  const canvasRef = useRef<HTMLCanvasElement>(null);

  useEffect(() => {
    const generateQR = async () => {
      if (!canvasRef.current) return;

      try {
        if (!payload || Object.keys(payload).length === 0) {
          console.error("QR payload is empty or undefined:", payload);
          
          const ctx = canvasRef.current.getContext('2d');
          if (ctx) {
            ctx.fillStyle = '#f0f0f0';
            ctx.fillRect(0, 0, size, size);
            ctx.fillStyle = '#666';
            ctx.font = '14px Arial';
            ctx.textAlign = 'center';
            ctx.fillText('QR Data Missing', size / 2, size / 2 - 10);
            ctx.fillText('Recreate this pass', size / 2, size / 2 + 10);
          }
          return;
        }

        const qrData = JSON.stringify(payload);
        console.log("Generating QR with data:", qrData);

        await QRCode.toCanvas(canvasRef.current, qrData, {
          width: size,
          margin: 2,
          errorCorrectionLevel: 'M',
          color: {
            dark: "#000000",
            light: "#FFFFFF",
          },
        });

        console.log("âœ“ QR code generated successfully");
      } catch (err) {
        console.error("Error generating QR code:", err);
        
        const ctx = canvasRef.current?.getContext('2d');
        if (ctx && canvasRef.current) {
          ctx.fillStyle = '#ffe0e0';
          ctx.fillRect(0, 0, size, size);
          ctx.fillStyle = '#cc0000';
          ctx.font = '14px Arial';
          ctx.textAlign = 'center';
          ctx.fillText('QR Generation Failed', size / 2, size / 2);
        }
      }
    };

    generateQR();
  }, [payload, size]);

  const plateNumber = payload?.pa && payload?.pn 
    ? `${payload.pa.toUpperCase()}-${payload.pn}` 
    : null;

  return (
    <div className="inline-flex flex-col items-center gap-4 p-6 bg-white border-[3px] border-gray-300 rounded-xl shadow-sm">
      <canvas 
        ref={canvasRef} 
        width={size} 
        height={size} 
        className="rounded-sm"
      />
      {plateNumber && (
        <div className="font-mono font-semibold text-xl tracking-widest text-gray-800">
          {plateNumber}
        </div>
      )}
    </div>
  );
}



====================================================================================================
FILE: components\ui\radio-group.tsx
SIZE: 1.49 KB
====================================================================================================
"use client"

import * as React from "react"
import * as RadioGroupPrimitive from "@radix-ui/react-radio-group"
import { Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const RadioGroup = React.forwardRef<
  React.ElementRef<typeof RadioGroupPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>
>(({ className, ...props }, ref) => {
  return (
    <RadioGroupPrimitive.Root
      className={cn("grid gap-2", className)}
      {...props}
      ref={ref}
    />
  )
})
RadioGroup.displayName = RadioGroupPrimitive.Root.displayName

const RadioGroupItem = React.forwardRef<
  React.ElementRef<typeof RadioGroupPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>
>(({ className, ...props }, ref) => {
  return (
    <RadioGroupPrimitive.Item
      ref={ref}
      className={cn(
        "aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      {...props}
    >
      <RadioGroupPrimitive.Indicator className="flex items-center justify-center">
        <Circle className="h-2.5 w-2.5 fill-current text-current" />
      </RadioGroupPrimitive.Indicator>
    </RadioGroupPrimitive.Item>
  )
})
RadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName

export { RadioGroup, RadioGroupItem }




====================================================================================================
FILE: components\ui\scroll-area.tsx
SIZE: 1.66 KB
====================================================================================================
"use client"

import * as React from "react"
import * as ScrollAreaPrimitive from "@radix-ui/react-scroll-area"

import { cn } from "@/lib/utils"

const ScrollArea = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>
>(({ className, children, ...props }, ref) => (
  <ScrollAreaPrimitive.Root
    ref={ref}
    className={cn("relative overflow-hidden", className)}
    {...props}
  >
    <ScrollAreaPrimitive.Viewport className="h-full w-full rounded-[inherit]">
      {children}
    </ScrollAreaPrimitive.Viewport>
    <ScrollBar />
    <ScrollAreaPrimitive.Corner />
  </ScrollAreaPrimitive.Root>
))
ScrollArea.displayName = ScrollAreaPrimitive.Root.displayName

const ScrollBar = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>
>(({ className, orientation = "vertical", ...props }, ref) => (
  <ScrollAreaPrimitive.ScrollAreaScrollbar
    ref={ref}
    orientation={orientation}
    className={cn(
      "flex touch-none select-none transition-colors",
      orientation === "vertical" &&
        "h-full w-2.5 border-l border-l-transparent p-[1px]",
      orientation === "horizontal" &&
        "h-2.5 flex-col border-t border-t-transparent p-[1px]",
      className
    )}
    {...props}
  >
    <ScrollAreaPrimitive.ScrollAreaThumb className="relative flex-1 rounded-full bg-border" />
  </ScrollAreaPrimitive.ScrollAreaScrollbar>
))
ScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName

export { ScrollArea, ScrollBar }




====================================================================================================
FILE: components\ui\select.tsx
SIZE: 5.65 KB
====================================================================================================
"use client"

import * as React from "react"
import * as SelectPrimitive from "@radix-ui/react-select"
import { Check, ChevronDown, ChevronUp } from "lucide-react"

import { cn } from "@/lib/utils"

const Select = SelectPrimitive.Root

const SelectGroup = SelectPrimitive.Group

const SelectValue = SelectPrimitive.Value

const SelectTrigger = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Trigger
    ref={ref}
    className={cn(
      "flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1",
      className
    )}
    {...props}
  >
    {children}
    <SelectPrimitive.Icon asChild>
      <ChevronDown className="h-4 w-4 opacity-50" />
    </SelectPrimitive.Icon>
  </SelectPrimitive.Trigger>
))
SelectTrigger.displayName = SelectPrimitive.Trigger.displayName

const SelectScrollUpButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollUpButton
    ref={ref}
    className={cn(
      "flex cursor-default items-center justify-center py-1",
      className
    )}
    {...props}
  >
    <ChevronUp className="h-4 w-4" />
  </SelectPrimitive.ScrollUpButton>
))
SelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName

const SelectScrollDownButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollDownButton
    ref={ref}
    className={cn(
      "flex cursor-default items-center justify-center py-1",
      className
    )}
    {...props}
  >
    <ChevronDown className="h-4 w-4" />
  </SelectPrimitive.ScrollDownButton>
))
SelectScrollDownButton.displayName =
  SelectPrimitive.ScrollDownButton.displayName

const SelectContent = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>
>(({ className, children, position = "popper", ...props }, ref) => (
  <SelectPrimitive.Portal>
    <SelectPrimitive.Content
      ref={ref}
      className={cn(
        "relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:-translate-y-1",
        position === "popper" &&
          "data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1",
        className
      )}
      position={position}
      {...props}
    >
      <SelectScrollUpButton />
      <SelectPrimitive.Viewport
        className={cn(
          "p-1",
          position === "popper" &&
            "h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]"
        )}
      >
        {children}
      </SelectPrimitive.Viewport>
      <SelectScrollDownButton />
    </SelectPrimitive.Content>
  </SelectPrimitive.Portal>
))
SelectContent.displayName = SelectPrimitive.Content.displayName

const SelectLabel = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Label
    ref={ref}
    className={cn("py-1.5 pl-8 pr-2 text-sm font-semibold", className)}
    {...props}
  />
))
SelectLabel.displayName = SelectPrimitive.Label.displayName

const SelectItem = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <SelectPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </SelectPrimitive.ItemIndicator>
    </span>

    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>
  </SelectPrimitive.Item>
))
SelectItem.displayName = SelectPrimitive.Item.displayName

const SelectSeparator = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
SelectSeparator.displayName = SelectPrimitive.Separator.displayName

export {
  Select,
  SelectGroup,
  SelectValue,
  SelectTrigger,
  SelectContent,
  SelectLabel,
  SelectItem,
  SelectSeparator,
  SelectScrollUpButton,
  SelectScrollDownButton,
}




====================================================================================================
FILE: components\ui\separator.tsx
SIZE: 0.78 KB
====================================================================================================
"use client"

import * as React from "react"
import * as SeparatorPrimitive from "@radix-ui/react-separator"

import { cn } from "@/lib/utils"

const Separator = React.forwardRef<
  React.ElementRef<typeof SeparatorPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>
>(
  (
    { className, orientation = "horizontal", decorative = true, ...props },
    ref
  ) => (
    <SeparatorPrimitive.Root
      ref={ref}
      decorative={decorative}
      orientation={orientation}
      className={cn(
        "shrink-0 bg-border",
        orientation === "horizontal" ? "h-[1px] w-full" : "h-full w-[1px]",
        className
      )}
      {...props}
    />
  )
)
Separator.displayName = SeparatorPrimitive.Root.displayName

export { Separator }




====================================================================================================
FILE: components\ui\sheet.tsx
SIZE: 4.32 KB
====================================================================================================
"use client"

import * as React from "react"
import * as SheetPrimitive from "@radix-ui/react-dialog"
import { cva, type VariantProps } from "class-variance-authority"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const Sheet = SheetPrimitive.Root

const SheetTrigger = SheetPrimitive.Trigger

const SheetClose = SheetPrimitive.Close

const SheetPortal = SheetPrimitive.Portal

const SheetOverlay = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Overlay
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
    ref={ref}
  />
))
SheetOverlay.displayName = SheetPrimitive.Overlay.displayName

const sheetVariants = cva(
  "fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500",
  {
    variants: {
      side: {
        top: "inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top",
        bottom:
          "inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom",
        left: "inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm",
        right:
          "inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm",
      },
    },
    defaultVariants: {
      side: "right",
    },
  }
)

interface SheetContentProps
  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,
    VariantProps<typeof sheetVariants> {}

const SheetContent = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Content>,
  SheetContentProps
>(({ side = "right", className, children, ...props }, ref) => (
  <SheetPortal>
    <SheetOverlay />
    <SheetPrimitive.Content
      ref={ref}
      className={cn(sheetVariants({ side }), className)}
      {...props}
    >
      {children}
      <SheetPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </SheetPrimitive.Close>
    </SheetPrimitive.Content>
  </SheetPortal>
))
SheetContent.displayName = SheetPrimitive.Content.displayName

const SheetHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-2 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
SheetHeader.displayName = "SheetHeader"

const SheetFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
SheetFooter.displayName = "SheetFooter"

const SheetTitle = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold text-foreground", className)}
    {...props}
  />
))
SheetTitle.displayName = SheetPrimitive.Title.displayName

const SheetDescription = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
SheetDescription.displayName = SheetPrimitive.Description.displayName

export {
  Sheet,
  SheetPortal,
  SheetOverlay,
  SheetTrigger,
  SheetClose,
  SheetContent,
  SheetHeader,
  SheetFooter,
  SheetTitle,
  SheetDescription,
}




====================================================================================================
FILE: components\ui\sidebar.tsx
SIZE: 23.58 KB
====================================================================================================
"use client"

import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { VariantProps, cva } from "class-variance-authority"
import { PanelLeft } from "lucide-react"

import { useIsMobile } from "@/hooks/use-mobile"
import { cn } from "@/lib/utils"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Separator } from "@/components/ui/separator"
import { Sheet, SheetContent } from "@/components/ui/sheet"
import { Skeleton } from "@/components/ui/skeleton"
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@/components/ui/tooltip"

const SIDEBAR_COOKIE_NAME = "sidebar_state"
const SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7
const SIDEBAR_WIDTH = "16rem"
const SIDEBAR_WIDTH_MOBILE = "18rem"
const SIDEBAR_WIDTH_ICON = "3rem"
const SIDEBAR_KEYBOARD_SHORTCUT = "b"

type SidebarContext = {
  state: "expanded" | "collapsed"
  open: boolean
  setOpen: (open: boolean) => void
  openMobile: boolean
  setOpenMobile: (open: boolean) => void
  isMobile: boolean
  toggleSidebar: () => void
}

const SidebarContext = React.createContext<SidebarContext | null>(null)

function useSidebar() {
  const context = React.useContext(SidebarContext)
  if (!context) {
    throw new Error("useSidebar must be used within a SidebarProvider.")
  }

  return context
}

const SidebarProvider = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    defaultOpen?: boolean
    open?: boolean
    onOpenChange?: (open: boolean) => void
  }
>(
  (
    {
      defaultOpen = true,
      open: openProp,
      onOpenChange: setOpenProp,
      className,
      style,
      children,
      ...props
    },
    ref
  ) => {
    const isMobile = useIsMobile()
    const [openMobile, setOpenMobile] = React.useState(false)

    // This is the internal state of the sidebar.
    // We use openProp and setOpenProp for control from outside the component.
    const [_open, _setOpen] = React.useState(defaultOpen)
    const open = openProp ?? _open
    const setOpen = React.useCallback(
      (value: boolean | ((value: boolean) => boolean)) => {
        const openState = typeof value === "function" ? value(open) : value
        if (setOpenProp) {
          setOpenProp(openState)
        } else {
          _setOpen(openState)
        }

        // This sets the cookie to keep the sidebar state.
        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`
      },
      [setOpenProp, open]
    )

    // Helper to toggle the sidebar.
    const toggleSidebar = React.useCallback(() => {
      return isMobile
        ? setOpenMobile((open) => !open)
        : setOpen((open) => !open)
    }, [isMobile, setOpen, setOpenMobile])

    // Adds a keyboard shortcut to toggle the sidebar.
    React.useEffect(() => {
      const handleKeyDown = (event: KeyboardEvent) => {
        if (
          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&
          (event.metaKey || event.ctrlKey)
        ) {
          event.preventDefault()
          toggleSidebar()
        }
      }

      window.addEventListener("keydown", handleKeyDown)
      return () => window.removeEventListener("keydown", handleKeyDown)
    }, [toggleSidebar])

    // We add a state so that we can do data-state="expanded" or "collapsed".
    // This makes it easier to style the sidebar with Tailwind classes.
    const state = open ? "expanded" : "collapsed"

    const contextValue = React.useMemo<SidebarContext>(
      () => ({
        state,
        open,
        setOpen,
        isMobile,
        openMobile,
        setOpenMobile,
        toggleSidebar,
      }),
      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]
    )

    return (
      <SidebarContext.Provider value={contextValue}>
        <TooltipProvider delayDuration={0}>
          <div
            style={
              {
                "--sidebar-width": SIDEBAR_WIDTH,
                "--sidebar-width-icon": SIDEBAR_WIDTH_ICON,
                ...style,
              } as React.CSSProperties
            }
            className={cn(
              "group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar",
              className
            )}
            ref={ref}
            {...props}
          >
            {children}
          </div>
        </TooltipProvider>
      </SidebarContext.Provider>
    )
  }
)
SidebarProvider.displayName = "SidebarProvider"

const Sidebar = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    side?: "left" | "right"
    variant?: "sidebar" | "floating" | "inset"
    collapsible?: "offcanvas" | "icon" | "none"
  }
>(
  (
    {
      side = "left",
      variant = "sidebar",
      collapsible = "offcanvas",
      className,
      children,
      ...props
    },
    ref
  ) => {
    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()

    if (collapsible === "none") {
      return (
        <div
          className={cn(
            "flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground",
            className
          )}
          ref={ref}
          {...props}
        >
          {children}
        </div>
      )
    }

    if (isMobile) {
      return (
        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>
          <SheetContent
            data-sidebar="sidebar"
            data-mobile="true"
            className="w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden"
            style={
              {
                "--sidebar-width": SIDEBAR_WIDTH_MOBILE,
              } as React.CSSProperties
            }
            side={side}
          >
            <div className="flex h-full w-full flex-col">{children}</div>
          </SheetContent>
        </Sheet>
      )
    }

    return (
      <div
        ref={ref}
        className="group peer hidden md:block text-sidebar-foreground"
        data-state={state}
        data-collapsible={state === "collapsed" ? collapsible : ""}
        data-variant={variant}
        data-side={side}
      >
        {/* This is what handles the sidebar gap on desktop */}
        <div
          className={cn(
            "duration-200 relative h-svh w-[--sidebar-width] bg-transparent transition-[width] ease-linear",
            "group-data-[collapsible=offcanvas]:w-0",
            "group-data-[side=right]:rotate-180",
            variant === "floating" || variant === "inset"
              ? "group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]"
              : "group-data-[collapsible=icon]:w-[--sidebar-width-icon]"
          )}
        />
        <div
          className={cn(
            "duration-200 fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] ease-linear md:flex",
            side === "left"
              ? "left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]"
              : "right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]",
            // Adjust the padding for floating and inset variants.
            variant === "floating" || variant === "inset"
              ? "p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]"
              : "group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l",
            className
          )}
          {...props}
        >
          <div
            data-sidebar="sidebar"
            className="flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow"
          >
            {children}
          </div>
        </div>
      </div>
    )
  }
)
Sidebar.displayName = "Sidebar"

const SidebarTrigger = React.forwardRef<
  React.ElementRef<typeof Button>,
  React.ComponentProps<typeof Button>
>(({ className, onClick, ...props }, ref) => {
  const { toggleSidebar } = useSidebar()

  return (
    <Button
      ref={ref}
      data-sidebar="trigger"
      variant="ghost"
      size="icon"
      className={cn("h-7 w-7", className)}
      onClick={(event) => {
        onClick?.(event)
        toggleSidebar()
      }}
      {...props}
    >
      <PanelLeft />
      <span className="sr-only">Toggle Sidebar</span>
    </Button>
  )
})
SidebarTrigger.displayName = "SidebarTrigger"

const SidebarRail = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button">
>(({ className, ...props }, ref) => {
  const { toggleSidebar } = useSidebar()

  return (
    <button
      ref={ref}
      data-sidebar="rail"
      aria-label="Toggle Sidebar"
      tabIndex={-1}
      onClick={toggleSidebar}
      title="Toggle Sidebar"
      className={cn(
        "absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex",
        "[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize",
        "[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize",
        "group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar",
        "[[data-side=left][data-collapsible=offcanvas]_&]:-right-2",
        "[[data-side=right][data-collapsible=offcanvas]_&]:-left-2",
        className
      )}
      {...props}
    />
  )
})
SidebarRail.displayName = "SidebarRail"

const SidebarInset = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"main">
>(({ className, ...props }, ref) => {
  return (
    <main
      ref={ref}
      className={cn(
        "relative flex min-h-svh flex-1 flex-col bg-background",
        "peer-data-[variant=inset]:min-h-[calc(100svh-theme(spacing.4))] md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow",
        className
      )}
      {...props}
    />
  )
})
SidebarInset.displayName = "SidebarInset"

const SidebarInput = React.forwardRef<
  React.ElementRef<typeof Input>,
  React.ComponentProps<typeof Input>
>(({ className, ...props }, ref) => {
  return (
    <Input
      ref={ref}
      data-sidebar="input"
      className={cn(
        "h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring",
        className
      )}
      {...props}
    />
  )
})
SidebarInput.displayName = "SidebarInput"

const SidebarHeader = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="header"
      className={cn("flex flex-col gap-2 p-2", className)}
      {...props}
    />
  )
})
SidebarHeader.displayName = "SidebarHeader"

const SidebarFooter = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="footer"
      className={cn("flex flex-col gap-2 p-2", className)}
      {...props}
    />
  )
})
SidebarFooter.displayName = "SidebarFooter"

const SidebarSeparator = React.forwardRef<
  React.ElementRef<typeof Separator>,
  React.ComponentProps<typeof Separator>
>(({ className, ...props }, ref) => {
  return (
    <Separator
      ref={ref}
      data-sidebar="separator"
      className={cn("mx-2 w-auto bg-sidebar-border", className)}
      {...props}
    />
  )
})
SidebarSeparator.displayName = "SidebarSeparator"

const SidebarContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="content"
      className={cn(
        "flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden",
        className
      )}
      {...props}
    />
  )
})
SidebarContent.displayName = "SidebarContent"

const SidebarGroup = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="group"
      className={cn("relative flex w-full min-w-0 flex-col p-2", className)}
      {...props}
    />
  )
})
SidebarGroup.displayName = "SidebarGroup"

const SidebarGroupLabel = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & { asChild?: boolean }
>(({ className, asChild = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "div"

  return (
    <Comp
      ref={ref}
      data-sidebar="group-label"
      className={cn(
        "duration-200 flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opa] ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0",
        "group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0",
        className
      )}
      {...props}
    />
  )
})
SidebarGroupLabel.displayName = "SidebarGroupLabel"

const SidebarGroupAction = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button"> & { asChild?: boolean }
>(({ className, asChild = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "button"

  return (
    <Comp
      ref={ref}
      data-sidebar="group-action"
      className={cn(
        "absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0",
        // Increases the hit area of the button on mobile.
        "after:absolute after:-inset-2 after:md:hidden",
        "group-data-[collapsible=icon]:hidden",
        className
      )}
      {...props}
    />
  )
})
SidebarGroupAction.displayName = "SidebarGroupAction"

const SidebarGroupContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    data-sidebar="group-content"
    className={cn("w-full text-sm", className)}
    {...props}
  />
))
SidebarGroupContent.displayName = "SidebarGroupContent"

const SidebarMenu = React.forwardRef<
  HTMLUListElement,
  React.ComponentProps<"ul">
>(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    data-sidebar="menu"
    className={cn("flex w-full min-w-0 flex-col gap-1", className)}
    {...props}
  />
))
SidebarMenu.displayName = "SidebarMenu"

const SidebarMenuItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentProps<"li">
>(({ className, ...props }, ref) => (
  <li
    ref={ref}
    data-sidebar="menu-item"
    className={cn("group/menu-item relative", className)}
    {...props}
  />
))
SidebarMenuItem.displayName = "SidebarMenuItem"

const sidebarMenuButtonVariants = cva(
  "peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0",
  {
    variants: {
      variant: {
        default: "hover:bg-sidebar-accent hover:text-sidebar-accent-foreground",
        outline:
          "bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]",
      },
      size: {
        default: "h-8 text-sm",
        sm: "h-7 text-xs",
        lg: "h-12 text-sm group-data-[collapsible=icon]:!p-0",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

const SidebarMenuButton = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button"> & {
    asChild?: boolean
    isActive?: boolean
    tooltip?: string | React.ComponentProps<typeof TooltipContent>
  } & VariantProps<typeof sidebarMenuButtonVariants>
>(
  (
    {
      asChild = false,
      isActive = false,
      variant = "default",
      size = "default",
      tooltip,
      className,
      ...props
    },
    ref
  ) => {
    const Comp = asChild ? Slot : "button"
    const { isMobile, state } = useSidebar()

    const button = (
      <Comp
        ref={ref}
        data-sidebar="menu-button"
        data-size={size}
        data-active={isActive}
        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}
        {...props}
      />
    )

    if (!tooltip) {
      return button
    }

    if (typeof tooltip === "string") {
      tooltip = {
        children: tooltip,
      }
    }

    return (
      <Tooltip>
        <TooltipTrigger asChild>{button}</TooltipTrigger>
        <TooltipContent
          side="right"
          align="center"
          hidden={state !== "collapsed" || isMobile}
          {...tooltip}
        />
      </Tooltip>
    )
  }
)
SidebarMenuButton.displayName = "SidebarMenuButton"

const SidebarMenuAction = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button"> & {
    asChild?: boolean
    showOnHover?: boolean
  }
>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "button"

  return (
    <Comp
      ref={ref}
      data-sidebar="menu-action"
      className={cn(
        "absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0",
        // Increases the hit area of the button on mobile.
        "after:absolute after:-inset-2 after:md:hidden",
        "peer-data-[size=sm]/menu-button:top-1",
        "peer-data-[size=default]/menu-button:top-1.5",
        "peer-data-[size=lg]/menu-button:top-2.5",
        "group-data-[collapsible=icon]:hidden",
        showOnHover &&
          "group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0",
        className
      )}
      {...props}
    />
  )
})
SidebarMenuAction.displayName = "SidebarMenuAction"

const SidebarMenuBadge = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    data-sidebar="menu-badge"
    className={cn(
      "absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground select-none pointer-events-none",
      "peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground",
      "peer-data-[size=sm]/menu-button:top-1",
      "peer-data-[size=default]/menu-button:top-1.5",
      "peer-data-[size=lg]/menu-button:top-2.5",
      "group-data-[collapsible=icon]:hidden",
      className
    )}
    {...props}
  />
))
SidebarMenuBadge.displayName = "SidebarMenuBadge"

const SidebarMenuSkeleton = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    showIcon?: boolean
  }
>(({ className, showIcon = false, ...props }, ref) => {
  // Random width between 50 to 90%.
  const width = React.useMemo(() => {
    return `${Math.floor(Math.random() * 40) + 50}%`
  }, [])

  return (
    <div
      ref={ref}
      data-sidebar="menu-skeleton"
      className={cn("rounded-md h-8 flex gap-2 px-2 items-center", className)}
      {...props}
    >
      {showIcon && (
        <Skeleton
          className="size-4 rounded-md"
          data-sidebar="menu-skeleton-icon"
        />
      )}
      <Skeleton
        className="h-4 flex-1 max-w-[--skeleton-width]"
        data-sidebar="menu-skeleton-text"
        style={
          {
            "--skeleton-width": width,
          } as React.CSSProperties
        }
      />
    </div>
  )
})
SidebarMenuSkeleton.displayName = "SidebarMenuSkeleton"

const SidebarMenuSub = React.forwardRef<
  HTMLUListElement,
  React.ComponentProps<"ul">
>(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    data-sidebar="menu-sub"
    className={cn(
      "mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5",
      "group-data-[collapsible=icon]:hidden",
      className
    )}
    {...props}
  />
))
SidebarMenuSub.displayName = "SidebarMenuSub"

const SidebarMenuSubItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentProps<"li">
>(({ ...props }, ref) => <li ref={ref} {...props} />)
SidebarMenuSubItem.displayName = "SidebarMenuSubItem"

const SidebarMenuSubButton = React.forwardRef<
  HTMLAnchorElement,
  React.ComponentProps<"a"> & {
    asChild?: boolean
    size?: "sm" | "md"
    isActive?: boolean
  }
>(({ asChild = false, size = "md", isActive, className, ...props }, ref) => {
  const Comp = asChild ? Slot : "a"

  return (
    <Comp
      ref={ref}
      data-sidebar="menu-sub-button"
      data-size={size}
      data-active={isActive}
      className={cn(
        "flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground",
        "data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground",
        size === "sm" && "text-xs",
        size === "md" && "text-sm",
        "group-data-[collapsible=icon]:hidden",
        className
      )}
      {...props}
    />
  )
})
SidebarMenuSubButton.displayName = "SidebarMenuSubButton"

export {
  Sidebar,
  SidebarContent,
  SidebarFooter,
  SidebarGroup,
  SidebarGroupAction,
  SidebarGroupContent,
  SidebarGroupLabel,
  SidebarHeader,
  SidebarInput,
  SidebarInset,
  SidebarMenu,
  SidebarMenuAction,
  SidebarMenuBadge,
  SidebarMenuButton,
  SidebarMenuItem,
  SidebarMenuSkeleton,
  SidebarMenuSub,
  SidebarMenuSubButton,
  SidebarMenuSubItem,
  SidebarProvider,
  SidebarRail,
  SidebarSeparator,
  SidebarTrigger,
  useSidebar,
}




====================================================================================================
FILE: components\ui\skeleton.tsx
SIZE: 0.27 KB
====================================================================================================
import { cn } from "@/lib/utils"

function Skeleton({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) {
  return (
    <div
      className={cn("animate-pulse rounded-md bg-muted", className)}
      {...props}
    />
  )
}

export { Skeleton }




====================================================================================================
FILE: components\ui\slider.tsx
SIZE: 1.09 KB
====================================================================================================
"use client"

import * as React from "react"
import * as SliderPrimitive from "@radix-ui/react-slider"

import { cn } from "@/lib/utils"

const Slider = React.forwardRef<
  React.ElementRef<typeof SliderPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>
>(({ className, ...props }, ref) => (
  <SliderPrimitive.Root
    ref={ref}
    className={cn(
      "relative flex w-full touch-none select-none items-center",
      className
    )}
    {...props}
  >
    <SliderPrimitive.Track className="relative h-2 w-full grow overflow-hidden rounded-full bg-secondary">
      <SliderPrimitive.Range className="absolute h-full bg-primary" />
    </SliderPrimitive.Track>
    <SliderPrimitive.Thumb className="block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50" />
  </SliderPrimitive.Root>
))
Slider.displayName = SliderPrimitive.Root.displayName

export { Slider }




====================================================================================================
FILE: components\ui\switch.tsx
SIZE: 1.15 KB
====================================================================================================
"use client"

import * as React from "react"
import * as SwitchPrimitives from "@radix-ui/react-switch"

import { cn } from "@/lib/utils"

const Switch = React.forwardRef<
  React.ElementRef<typeof SwitchPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>
>(({ className, ...props }, ref) => (
  <SwitchPrimitives.Root
    className={cn(
      "peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input",
      className
    )}
    {...props}
    ref={ref}
  >
    <SwitchPrimitives.Thumb
      className={cn(
        "pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0"
      )}
    />
  </SwitchPrimitives.Root>
))
Switch.displayName = SwitchPrimitives.Root.displayName

export { Switch }




====================================================================================================
FILE: components\ui\table.tsx
SIZE: 2.81 KB
====================================================================================================
import * as React from "react"

import { cn } from "@/lib/utils"

const Table = React.forwardRef<
  HTMLTableElement,
  React.HTMLAttributes<HTMLTableElement>
>(({ className, ...props }, ref) => (
  <div className="relative w-full overflow-auto">
    <table
      ref={ref}
      className={cn("w-full caption-bottom text-sm", className)}
      {...props}
    />
  </div>
))
Table.displayName = "Table"

const TableHeader = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <thead ref={ref} className={cn("[&_tr]:border-b", className)} {...props} />
))
TableHeader.displayName = "TableHeader"

const TableBody = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <tbody
    ref={ref}
    className={cn("[&_tr:last-child]:border-0", className)}
    {...props}
  />
))
TableBody.displayName = "TableBody"

const TableFooter = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <tfoot
    ref={ref}
    className={cn(
      "border-t bg-muted/50 font-medium [&>tr]:last:border-b-0",
      className
    )}
    {...props}
  />
))
TableFooter.displayName = "TableFooter"

const TableRow = React.forwardRef<
  HTMLTableRowElement,
  React.HTMLAttributes<HTMLTableRowElement>
>(({ className, ...props }, ref) => (
  <tr
    ref={ref}
    className={cn(
      "border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted",
      className
    )}
    {...props}
  />
))
TableRow.displayName = "TableRow"

const TableHead = React.forwardRef<
  HTMLTableCellElement,
  React.ThHTMLAttributes<HTMLTableCellElement>
>(({ className, ...props }, ref) => (
  <th
    ref={ref}
    className={cn(
      "h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0",
      className
    )}
    {...props}
  />
))
TableHead.displayName = "TableHead"

const TableCell = React.forwardRef<
  HTMLTableCellElement,
  React.TdHTMLAttributes<HTMLTableCellElement>
>(({ className, ...props }, ref) => (
  <td
    ref={ref}
    className={cn("p-4 align-middle [&:has([role=checkbox])]:pr-0", className)}
    {...props}
  />
))
TableCell.displayName = "TableCell"

const TableCaption = React.forwardRef<
  HTMLTableCaptionElement,
  React.HTMLAttributes<HTMLTableCaptionElement>
>(({ className, ...props }, ref) => (
  <caption
    ref={ref}
    className={cn("mt-4 text-sm text-muted-foreground", className)}
    {...props}
  />
))
TableCaption.displayName = "TableCaption"

export {
  Table,
  TableHeader,
  TableBody,
  TableFooter,
  TableHead,
  TableRow,
  TableCell,
  TableCaption,
}




====================================================================================================
FILE: components\ui\tabs.tsx
SIZE: 1.91 KB
====================================================================================================
"use client"

import * as React from "react"
import * as TabsPrimitive from "@radix-ui/react-tabs"

import { cn } from "@/lib/utils"

const Tabs = TabsPrimitive.Root

const TabsList = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.List
    ref={ref}
    className={cn(
      "inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground",
      className
    )}
    {...props}
  />
))
TabsList.displayName = TabsPrimitive.List.displayName

const TabsTrigger = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Trigger
    ref={ref}
    className={cn(
      "inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm",
      className
    )}
    {...props}
  />
))
TabsTrigger.displayName = TabsPrimitive.Trigger.displayName

const TabsContent = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Content
    ref={ref}
    className={cn(
      "mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2",
      className
    )}
    {...props}
  />
))
TabsContent.displayName = TabsPrimitive.Content.displayName

export { Tabs, TabsList, TabsTrigger, TabsContent }




====================================================================================================
FILE: components\ui\textarea.tsx
SIZE: 0.71 KB
====================================================================================================
import * as React from 'react';

import {cn} from '@/lib/utils';

const Textarea = React.forwardRef<HTMLTextAreaElement, React.ComponentProps<'textarea'>>(
  ({className, ...props}, ref) => {
    return (
      <textarea
        className={cn(
          'flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm',
          className
        )}
        ref={ref}
        {...props}
      />
    );
  }
);
Textarea.displayName = 'Textarea';

export {Textarea};




====================================================================================================
FILE: components\ui\toast.tsx
SIZE: 4.87 KB
====================================================================================================
"use client"

import * as React from "react"
import * as ToastPrimitives from "@radix-ui/react-toast"
import { cva, type VariantProps } from "class-variance-authority"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const ToastProvider = ToastPrimitives.Provider

const ToastViewport = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Viewport>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Viewport
    ref={ref}
    className={cn(
      "fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]",
      className
    )}
    {...props}
  />
))
ToastViewport.displayName = ToastPrimitives.Viewport.displayName

const toastVariants = cva(
  "group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full",
  {
    variants: {
      variant: {
        default: "border bg-background text-foreground",
        destructive:
          "destructive group border-destructive bg-destructive text-destructive-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

const Toast = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &
    VariantProps<typeof toastVariants>
>(({ className, variant, ...props }, ref) => {
  return (
    <ToastPrimitives.Root
      ref={ref}
      className={cn(toastVariants({ variant }), className)}
      {...props}
    />
  )
})
Toast.displayName = ToastPrimitives.Root.displayName

const ToastAction = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Action>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Action
    ref={ref}
    className={cn(
      "inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive",
      className
    )}
    {...props}
  />
))
ToastAction.displayName = ToastPrimitives.Action.displayName

const ToastClose = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Close>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Close
    ref={ref}
    className={cn(
      "absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600",
      className
    )}
    toast-close=""
    {...props}
  >
    <X className="h-4 w-4" />
  </ToastPrimitives.Close>
))
ToastClose.displayName = ToastPrimitives.Close.displayName

const ToastTitle = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Title>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Title
    ref={ref}
    className={cn("text-sm font-semibold", className)}
    {...props}
  />
))
ToastTitle.displayName = ToastPrimitives.Title.displayName

const ToastDescription = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Description>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Description
    ref={ref}
    className={cn("text-sm opacity-90", className)}
    {...props}
  />
))
ToastDescription.displayName = ToastPrimitives.Description.displayName

type ToastProps = React.ComponentPropsWithoutRef<typeof Toast>

type ToastActionElement = React.ReactElement<typeof ToastAction>

export {
  type ToastProps,
  type ToastActionElement,
  ToastProvider,
  ToastViewport,
  Toast,
  ToastTitle,
  ToastDescription,
  ToastClose,
  ToastAction,
}




====================================================================================================
FILE: components\ui\toaster.tsx
SIZE: 0.8 KB
====================================================================================================
"use client"

import { useToast } from "@/hooks/use-toast"
import {
  Toast,
  ToastClose,
  ToastDescription,
  ToastProvider,
  ToastTitle,
  ToastViewport,
} from "@/components/ui/toast"

export function Toaster() {
  const { toasts } = useToast()

  return (
    <ToastProvider>
      {toasts.map(function ({ id, title, description, action, ...props }) {
        return (
          <Toast key={id} {...props}>
            <div className="grid gap-1">
              {title && <ToastTitle>{title}</ToastTitle>}
              {description && (
                <ToastDescription>{description}</ToastDescription>
              )}
            </div>
            {action}
            <ToastClose />
          </Toast>
        )
      })}
      <ToastViewport />
    </ToastProvider>
  )
}




====================================================================================================
FILE: components\ui\tooltip.tsx
SIZE: 1.16 KB
====================================================================================================
"use client"

import * as React from "react"
import * as TooltipPrimitive from "@radix-ui/react-tooltip"

import { cn } from "@/lib/utils"

const TooltipProvider = TooltipPrimitive.Provider

const Tooltip = TooltipPrimitive.Root

const TooltipTrigger = TooltipPrimitive.Trigger

const TooltipContent = React.forwardRef<
  React.ElementRef<typeof TooltipPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <TooltipPrimitive.Content
    ref={ref}
    sideOffset={sideOffset}
    className={cn(
      "z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
TooltipContent.displayName = TooltipPrimitive.Content.displayName

export { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }




====================================================================================================
FILE: components\verifier\manual-search-offline.tsx
SIZE: 4.31 KB
====================================================================================================
"use client";

import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import * as z from "zod";
import { useState } from "react";
import { searchPassLocally } from "@/lib/local-db";
import type { Pass } from "@/types";
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { Loader2, Search } from "lucide-react";
import PassDetails from "./pass-details";
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from "@/components/ui/dialog";

const formSchema = z.object({
  plateAlpha: z.string().min(1, "Required").max(4, "Max 4 chars").regex(/^[a-zA-Z]+$/, "Only letters allowed"),
  plateNum: z.string().min(1, "Required").max(5, "Max 5 digits").regex(/^\d+$/, "Only numbers"),
});

export default function ManualSearchOffline() {
  const [isLoading, setIsLoading] = useState(false);
  const [passResult, setPassResult] = useState<Pass | "not_found" | null>(null);

  const form = useForm<z.infer<typeof formSchema>>({
    resolver: zodResolver(formSchema),
    defaultValues: { plateAlpha: "", plateNum: "" },
  });

  async function onSubmit(values: z.infer<typeof formSchema>)  {
    setIsLoading(true);
    setPassResult(null);

    try {
      console.log("[ManualSearch] Searching local database for:", values.plateAlpha, values.plateNum);
      
      // Search local IndexedDB database
      const passData = await searchPassLocally(
        values.plateAlpha.toUpperCase(),
        values.plateNum
      );

      if (!passData) {
        console.log("[ManualSearch] No pass found in local database");
        setPassResult("not_found");
      } else {
        console.log("[ManualSearch] Pass found:", passData.id);
        setPassResult(passData);
      }
    } catch (error) {
      console.error("Error searching for pass:", error);
      setPassResult("not_found");
    } finally {
      setIsLoading(false);
    }
  }

  const handleReset = () => {
    form.reset();
    setPassResult(null);
  }

  return (
    <div className="space-y-6">
      <Form {...form}>
        <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4">
          <div className="grid grid-cols-2 gap-4">
            <FormField
              control={form.control}
              name="plateAlpha"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Plate Alpha</FormLabel>
                  <FormControl>
                    <Input placeholder="ABC" {...field} style={{textTransform: 'uppercase'}} />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            <FormField
              control={form.control}
              name="plateNum"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Plate Number</FormLabel>
                  <FormControl>
                    <Input placeholder="1234" {...field} />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
          </div>
          <div className="flex gap-2">
            <Button type="submit" disabled={isLoading} className="flex-1">
              {isLoading ? (
                <Loader2 className="mr-2 h-4 w-4 animate-spin" />
              ) : (
                <Search className="mr-2 h-4 w-4" />
              )}
              Search
            </Button>
            <Button type="button" variant="destructive" onClick={handleReset} className="flex-1">
                Reset
            </Button>
          </div>
        </form>
      </Form>
      
      {isLoading && (
          <div className="flex justify-center p-8">
              <Loader2 className="h-8 w-8 animate-spin text-primary"/>
          </div>
      )}

      <Dialog open={!!passResult} onOpenChange={(open) => !open && setPassResult(null)}>
        <DialogContent>
          <DialogHeader>
            <DialogTitle>Verification Result</DialogTitle>
            <DialogDescription>
              The access status for the pass is shown below.
            </DialogDescription>
          </DialogHeader>
          {passResult && <PassDetails pass={passResult} />}
        </DialogContent>
      </Dialog>
    </div>
  );
}




====================================================================================================
FILE: components\verifier\manual-search.tsx
SIZE: 4.65 KB
====================================================================================================
"use client";

import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import * as z from "zod";
import { useState } from "react";
import { collection, query, where, limit, getDocs } from "firebase/firestore";
import { db, passConverter } from "@/lib/firestore";
import type { Pass } from "@/types";
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { Loader2, Search } from "lucide-react";
import PassDetails from "./pass-details";
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from "@/components/ui/dialog";

const formSchema = z.object({
  plateAlpha: z.string().min(1, "Required").max(4, "Max 4 chars").regex(/^[a-zA-Z]+$/, "Only letters allowed"),
  plateNum: z.string().min(1, "Required").max(5, "Max 5 digits").regex(/^\d+$/, "Only numbers"),
});

interface ManualSearchProps {
    isAdminSearch?: boolean;
}

export default function ManualSearch({ isAdminSearch = false }: ManualSearchProps) {
  const [isLoading, setIsLoading] = useState(false);
  const [passResult, setPassResult] = useState<Pass | "not_found" | null>(null);

  const form = useForm<z.infer<typeof formSchema>>({
    resolver: zodResolver(formSchema),
    defaultValues: { plateAlpha: "", plateNum: "" },
  });

  async function onSubmit(values: z.infer<typeof formSchema>) {
    setIsLoading(true);
    setPassResult(null);

    try {
      const q = query(
        collection(db, "passes"),
        where("plateAlpha", "==", values.plateAlpha.toUpperCase()),
        where("plateNum", "==", values.plateNum),
        ...(!isAdminSearch ? [where("status", "==", "active")] : []),
        limit(1)
      ).withConverter(passConverter);

      const querySnapshot = await getDocs(q);

      if (querySnapshot.empty) {
        setPassResult("not_found");
      } else {
        const pass = querySnapshot.docs[0].data();
        setPassResult(pass);
      }
    } catch (error) {
      console.error("Error searching for pass:", error);
      setPassResult("not_found");
    } finally {
      setIsLoading(false);
    }
  }

  const handleReset = () => {
    form.reset();
    setPassResult(null);
  }

  return (
    <div className="space-y-6">
      <Form {...form}>
        <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4">
          <div className="grid grid-cols-2 gap-4">
            <FormField
              control={form.control}
              name="plateAlpha"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Plate Alpha</FormLabel>
                  <FormControl>
                    <Input placeholder="ABC" {...field} style={{textTransform: 'uppercase'}} />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            <FormField
              control={form.control}
              name="plateNum"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Plate Number</FormLabel>
                  <FormControl>
                    <Input placeholder="1234" {...field} />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
          </div>
          <div className="flex gap-2">
            <Button type="submit" disabled={isLoading} className="flex-1">
              {isLoading ? (
                <Loader2 className="mr-2 h-4 w-4 animate-spin" />
              ) : (
                <Search className="mr-2 h-4 w-4" />
              )}
              Search
            </Button>
            <Button type="button" variant="destructive" onClick={handleReset} className="flex-1">
                Reset
            </Button>
          </div>
        </form>
      </Form>
      
      {isLoading && (
          <div className="flex justify-center p-8">
              <Loader2 className="h-8 w-8 animate-spin text-primary"/>
          </div>
      )}

      <Dialog open={!!passResult} onOpenChange={(open) => !open && setPassResult(null)}>
        <DialogContent>
          <DialogHeader>
            <DialogTitle>Verification Result</DialogTitle>
            <DialogDescription>
              The access status for the scanned pass is shown below.
            </DialogDescription>
          </DialogHeader>
          {passResult && <PassDetails pass={passResult} isAdminSearch={isAdminSearch} />}
        </DialogContent>
      </Dialog>
    </div>
  );
}




====================================================================================================
FILE: components\verifier\pass-details.tsx
SIZE: 7.34 KB
====================================================================================================
"use client";

import { Card, CardContent, CardHeader, CardTitle, CardDescription } from "@/components/ui/card";
import { CheckCircle2, XCircle, Clock, ShieldQuestion } from "lucide-react";
import type { Pass } from "@/types";
import { format } from "date-fns";
import Image from "next/image";
import { useEffect } from "react";

interface PassDetailsProps {
  pass: Pass | "not_found";
  isAdminSearch?: boolean;
}

// Helper function to convert various date formats to JavaScript Date
function getDateFromField(dateField: any): Date {
  // If it's a Firebase Timestamp with toDate method
  if (dateField && typeof dateField.toDate === 'function') {
    return dateField.toDate();
  }
  // If it's already a Date object
  if (dateField instanceof Date) {
    return dateField;
  }
  // If it's an ISO string
  if (typeof dateField === 'string') {
    return new Date(dateField);
  }
  // If it's a timestamp number
  if (typeof dateField === 'number') {
    return new Date(dateField);
  }
  // Fallback to current date
  return new Date();
}

export default function PassDetails({ pass, isAdminSearch = false }: PassDetailsProps) {
  const isPassObject = pass !== "not_found";
  const isExpired = isPassObject && getDateFromField(pass.expiresAt) < new Date();
  const isAllowed = isPassObject && pass.status === "active" && !isExpired;

useEffect(() => {
  if (isAdminSearch) return;

  let audio: HTMLAudioElement | null = null;
  let isCleaningUp = false;

  if (isPassObject) {
    audio = new Audio(isAllowed ? '/success.mp3' : '/denied.mp3');
    
    const playPromise = audio.play();
    if (playPromise !== undefined) {
      playPromise
        .then(() => {
          // Audio started playing successfully
        })
        .catch(error => {
          // Silently handle autoplay restrictions
          if (error.name !== 'AbortError') {
            console.log("Audio playback blocked by browser");
          }
        });
    }
  }

  return () => {
    isCleaningUp = true;
    if (audio) {
      audio.pause();
      audio.src = ''; // Release resources
      audio = null;
    }
  };
}, [pass, isAllowed, isAdminSearch, isPassObject]);

  if (pass === "not_found") {
    return (
       <Card className="border-red-500 bg-red-50 dark:bg-red-950/50">
        <CardHeader>
            <div className="flex items-center justify-between gap-3">
                <div>
                    <CardTitle className="text-red-700 dark:text-red-400">Pass Not Found</CardTitle>
                    <CardDescription className="text-red-600 dark:text-red-400/80">
                        No active pass found for this plate number. Please check the details and try again.
                    </CardDescription>
                </div>
                {!isAdminSearch && <Image src="/Closing Gate.gif" alt="Access Denied" width={96} height={96} unoptimized />}
            </div>
        </CardHeader>
      </Card>
    );
  }
  
  if (!isAdminSearch && !isAllowed) {
     return (
       <Card className="border-red-500 bg-red-50 dark:bg-red-950/50">
        <CardHeader>
            <div className="flex items-center justify-between gap-3">
                <div>
                    <CardTitle className="text-red-700 dark:text-red-400">Access Denied</CardTitle>
                    <CardDescription className="text-red-600 dark:text-red-400/80">
                        This pass is not currently active or has expired.
                    </CardDescription>
                </div>
                {!isAdminSearch && <Image src="/Closing Gate.gif" alt="Access Denied" width={96} height={96} unoptimized />}
            </div>
        </CardHeader>
      </Card>
    );
  }

  const getStatusInfo = () => {
    if (isAllowed) {
        return { variant: "default", icon: CheckCircle2, title: "Access Granted", message: "This pass is valid for entry." };
    }
    if (isExpired) {
        return { variant: "destructive", icon: Clock, title: "Access Denied: Expired", message: "This pass has expired." };
    }
    if (pass.status === "revoked") {
        return { variant: "destructive", icon: XCircle, title: "Access Denied: Revoked", message: "This pass has been revoked." };
    }
    return { variant: "destructive", icon: ShieldQuestion, title: "Status Unknown", message: "Pass status could not be determined." };
  }

  const statusInfo = getStatusInfo();

  return (
    <Card className={isAllowed ? "border-green-500 bg-green-50 dark:bg-green-950/50" : "border-red-500 bg-red-50 dark:bg-red-950/50"}>
       <CardHeader>
        <div className="flex items-center justify-between gap-3">
            <div>
                 <CardTitle className={isAllowed ? 'text-green-700 dark:text-green-400' : 'text-red-700 dark:text-red-400'}>{statusInfo.title}</CardTitle>
                 <CardDescription className={isAllowed ? 'text-green-600 dark:text-green-400/80' : 'text-red-600 dark:text-red-400/80'}>{statusInfo.message}</CardDescription>
            </div>
            {!isAdminSearch && isAllowed && (
                <Image src="/Opening Gate.gif" alt="Access Granted" width={96} height={96} unoptimized />
            )}
            {!isAdminSearch && !isAllowed && (
                <Image src="/Closing Gate.gif" alt="Access Denied" width={96} height={96} unoptimized />
            )}
        </div>
      </CardHeader>
      <CardContent className="space-y-4">
        <div className="space-y-2 text-sm">
            <div className="flex justify-between">
                <span className="font-semibold text-muted-foreground">Plate:</span>
                <span className="font-mono font-bold">{pass.plateAlpha}-{pass.plateNum}</span>
            </div>
             <div className="flex justify-between">
                <span className="font-semibold text-muted-foreground">Type:</span>
                <span className="capitalize">{pass.type}</span>
            </div>
            {pass.type === "standard" && (
                <>
                    <div className="flex justify-between">
                        <span className="font-semibold text-muted-foreground">Owner:</span>
                        <span>{pass.ownerName}</span>
                    </div>
                     <div className="flex justify-between">
                        <span className="font-semibold text-muted-foreground">Company:</span>
                        <span>{pass.ownerCompany}</span>
                    </div>
                </>
            )}
            {pass.type === "visitor" && (
                <>
                     <div className="flex justify-between">
                        <span className="font-semibold text-muted-foreground">Visitor:</span>
                        <span>{pass.visitorName}</span>
                    </div>
                     <div className="flex justify-between">
                        <span className="font-semibold text-muted-foreground">Purpose:</span>
                        <span>{pass.purpose}</span>
                    </div>
                </>
            )}
             <div className="flex justify-between">
                <span className="font-semibold text-muted-foreground">Location:</span>
                <span>{pass.location}</span>
            </div>
             <div className="flex justify-between">
                <span className="font-semibold text-muted-foreground">Expires At:</span>
                <span>{format(getDateFromField(pass.expiresAt), "PPP p")}</span>
            </div>
        </div>
      </CardContent>
    </Card>
  );
}




====================================================================================================
FILE: components\verifier\qr-scanner.tsx
SIZE: 2.44 KB
====================================================================================================
"use client";
import { useEffect, useRef, useState } from "react";
import { Html5Qrcode } from "html5-qrcode";

interface QrScannerProps {
  onScanSuccess: (decodedText: string) => void;
  onScanError?: (error: string) => void;
}

export default function QrScanner({ onScanSuccess, onScanError }: QrScannerProps) {
  const [isScanning, setIsScanning] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const scannerRef = useRef<Html5Qrcode | null>(null);
  const qrCodeRegionId = "qr-reader";

  useEffect(() => {
    let mounted = true;
    
    const startScanner = async () => {
      try {
        setIsScanning(true);
        setError(null);
        
        // Initialize scanner
        scannerRef.current = new Html5Qrcode(qrCodeRegionId);
        
        // Start scanning
        await scannerRef.current.start(
          { facingMode: "environment" },
          {
            fps: 10,
            qrbox: { width: 250, height: 250 },
          },
          (decodedText) => {
            if (mounted) {
              console.log("QR Code scanned:", decodedText);
              onScanSuccess(decodedText);
            }
          },
          (errorMessage) => {
            // Ignore continuous scan errors
          }
        );
      } catch (err: any) {
        const errorMsg = err?.message || "Failed to access camera";
        console.error("Scanner error:", errorMsg);
        setError(errorMsg);
        if (onScanError) onScanError(errorMsg);
      }
    };

    startScanner();

    // Cleanup
    return () => {
      mounted = false;
      
      // Delay stop to allow React to finish unmounting
      setTimeout(() => {
        if (scannerRef.current) {
          scannerRef.current.stop()
            .then(() => console.log("Scanner stopped"))
            .catch(() => {}); // Silently ignore all errors
        }
      }, 100);
    };
  }, [onScanSuccess, onScanError]);

  return (
    <div className="space-y-4">
      <div id={qrCodeRegionId} className="w-full" />
      {error && (
        <div className="bg-red-50 text-red-600 p-4 rounded-lg">
          <p className="font-semibold">Camera Error</p>
          <p className="text-sm">{error}</p>
          <p className="text-sm mt-2">Please allow camera access in your browser settings.</p>
        </div>
      )}
      {isScanning && !error && (
        <p className="text-center text-sm text-gray-600">
          Point your camera at the QR code
        </p>
      )}
    </div>
  );
}



====================================================================================================
FILE: context\auth-provider.tsx
SIZE: 4.7 KB
====================================================================================================
"use client";

import {
  createContext,
  useState,
  useEffect,
  type ReactNode,
} from "react";
import { useRouter } from "next/navigation";
import { onAuthStateChanged, createUserWithEmailAndPassword, signInWithEmailAndPassword, signOut, type User } from "firebase/auth";
import { doc, getDoc, setDoc, serverTimestamp } from "firebase/firestore";
import { auth, db, userConverter } from "@/lib/firestore";
import type { AppUser, Role } from "@/types";

interface AuthContextType {
  user: AppUser | null;
  loading: boolean;
  role: Role | null;
  handleSignUp: (data: any) => Promise<string | null>;
  handleSignIn: (email: string, pass: string) => Promise<string | null>;
  handleSignOut: () => void;
}

export const AuthContext = createContext<AuthContextType | undefined>(undefined);

export function AuthProvider({ children }: { children: ReactNode }) {
  const [user, setUser] = useState<AppUser | null>(null);
  const [role, setRole] = useState<Role | null>(null);
  const [loading, setLoading] = useState(true);
  const router = useRouter();

  useEffect(() => {
    const unsubscribe = onAuthStateChanged(auth, async (firebaseUser: User | null) => {
      if (firebaseUser) {
        try {
          const userDocRef = doc(db, "users", firebaseUser.uid).withConverter(userConverter);
          const userDocSnap = await getDoc(userDocRef);
          
          if (userDocSnap.exists()) {
            const userData = userDocSnap.data();
            
            if (userData.role === 'pending' || userData.role === 'rejected') {
               await signOut(auth);
               setUser(null);
               setRole(null);
               router.replace("/login?pending=1");
            } else {
              setUser(userData);
              setRole(userData.role);
              const currentPath = window.location.pathname;
              if (currentPath === '/login' || currentPath === '/signup' || currentPath === '/') {
                  router.replace("/admin/dashboard");
              }
            }
          } else {
              await signOut(auth);
              setUser(null);
              setRole(null);
          }
        } catch (error: any) {
          console.log('[Auth] Offline - working in offline mode:', error.message);
          setUser(null);
          setRole(null);
        }
      } else {
        setUser(null);
        setRole(null);
      }
      setLoading(false);
    });
    return () => unsubscribe();
  }, [router]);

  const handleSignUp = async (data: any) => {
    setLoading(true);
    try {
      const { email, password, fullName, phone, company, companyId, workLocation } = data;
      
      const metaRef = doc(db, "app", "config");
      const metaSnap = await getDoc(metaRef);
      const isFirstUser = !metaSnap.exists() || metaSnap.data().ownerSet !== true;
      const newUserRole = isFirstUser ? 'owner' : 'pending';
      
      const userCredential = await createUserWithEmailAndPassword(auth, email, password);
      const uid = userCredential.user.uid;

      const userProfile: Omit<AppUser, 'uid'> = {
        email,
        fullName,
        phone: phone || "",
        company: company || "",
        companyId: companyId || "",
        workLocation: workLocation || "",
        role: newUserRole,
        createdAt: serverTimestamp(),
        approvedBy: null,
        approvedAt: null,
      };

      await setDoc(doc(db, "users", uid), userProfile);
      
      if (isFirstUser) {
        await setDoc(metaRef, { ownerSet: true }, { merge: true });
        setUser({ uid, ...userProfile } as AppUser);
        setRole(newUserRole);
      }
      
      if (newUserRole === 'pending') {
          await signOut(auth);
          router.push("/login?pending=1");
      }
      
      return null;
    } catch (error: any) {
      console.error("Signup error:", error);
      if (error.code === 'auth/email-already-in-use') {
        return 'An account with this email already exists. Please try logging in or use the reset script if this is a development environment.';
      }
      return error.message || "An unknown error occurred.";
    } finally {
      setLoading(false);
    }
  };

  const handleSignIn = async (email: string, pass: string) => {
    try {
      await signInWithEmailAndPassword(auth, email, pass);
      return null;
    } catch (error: any) {
      console.error("Signin error:", error);
      return error.message || "An unknown error occurred.";
    } 
  };

  const handleSignOut = async () => {
    setLoading(true);
    await signOut(auth);
    setUser(null);
    setRole(null);
    router.push("/login");
    setLoading(false);
  };

  const value = { user, loading, role, handleSignUp, handleSignIn, handleSignOut };

  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;
}



====================================================================================================
FILE: context\data-provider.tsx
SIZE: 3.65 KB
====================================================================================================
"use client";
import {
  createContext,
  useState,
  useEffect,
  type ReactNode,
  useContext,
} from "react";
import { collection, query, orderBy, onSnapshot, writeBatch, doc } from "firebase/firestore";
import { db, passConverter, userConverter } from "@/lib/firestore";
import type { AppUser, Pass } from "@/types";
import { useAuth } from "@/hooks/use-auth";

interface DataContextType {
  passes: Pass[];
  users: AppUser[];
  loading: boolean;
  refreshData: () => void;
}

const DataContext = createContext<DataContextType | undefined>(undefined);

export function DataProvider({ children }: { children: ReactNode }) {
  const { user } = useAuth();
  const [passes, setPasses] = useState<Pass[]>([]);
  const [users, setUsers] = useState<AppUser[]>([]);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    if (!user) {
      setPasses([]);
      setUsers([]);
      setLoading(false);
      return;
    }

    setLoading(true);

    try {
      // Real-time listener for passes
      const passesQuery = query(
        collection(db, "passes"),
        orderBy("createdAt", "desc")
      ).withConverter(passConverter);

      const unsubscribePasses = onSnapshot(
        passesQuery,
        async (snapshot) => {
          const passesData = snapshot.docs.map((doc) => doc.data());
          
          // Update expired passes in Firestore (background operation)
          const now = new Date();
          const batch = writeBatch(db);
          let updateCount = 0;
          
          snapshot.docs.forEach((docSnap) => {
            const pass = docSnap.data();
            // Check if pass is active but expired
            if (pass.status === "active" && pass.expiresAt.toDate() < now) {
              const passRef = doc(db, "passes", pass.id);
              batch.update(passRef, { status: "expired" });
              updateCount++;
            }
          });
          
          // Commit batch if there are updates
          if (updateCount > 0) {
            try {
              await batch.commit();
              console.log('Auto-updated ' + updateCount + ' expired pass(es) in Firestore');
            } catch (error) {
              console.error("Failed to update expired passes:", error);
            }
          }
          
          setPasses(passesData);
          setLoading(false);
        },
        (error) => {
          console.log('[Data] Offline or error fetching passes:', error.message);
          setLoading(false);
        }
      );

      // Real-time listener for users
      const usersQuery = query(
        collection(db, "users"),
        orderBy("createdAt", "desc")
      ).withConverter(userConverter);

      const unsubscribeUsers = onSnapshot(
        usersQuery,
        (snapshot) => {
          const usersData = snapshot.docs.map((doc) => doc.data());
          setUsers(usersData);
        },
        (error) => {
          console.log('[Data] Offline or error fetching users:', error.message);
        }
      );

      // Cleanup listeners on unmount
      return () => {
        unsubscribePasses();
        unsubscribeUsers();
      };
    } catch (error: any) {
      console.log('[Data] Error setting up Firestore listeners (offline):', error.message);
      setLoading(false);
    }
  }, [user]);

  const refreshData = () => {
    console.log("Data is real-time, no manual refresh needed");
  };

  const value = { passes, users, loading, refreshData };

  return <DataContext.Provider value={value}>{children}</DataContext.Provider>;
}

export const useData = () => {
  const context = useContext(DataContext);
  if (context === undefined) {
    throw new Error("useData must be used within a DataProvider");
  }
  return context;
};



====================================================================================================
FILE: hooks\use-auth.ts
SIZE: 0.31 KB
====================================================================================================
"use client";

import { useContext } from "react";
import { AuthContext } from "@/context/auth-provider";

export const useAuth = () => {
  const context = useContext(AuthContext);
  if (context === undefined) {
    throw new Error("useAuth must be used within an AuthProvider");
  }
  return context;
};




====================================================================================================
FILE: hooks\use-mobile.tsx
SIZE: 0.57 KB
====================================================================================================
import * as React from "react"

const MOBILE_BREAKPOINT = 768

export function useIsMobile() {
  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)

  React.useEffect(() => {
    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)
    const onChange = () => {
      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
    }
    mql.addEventListener("change", onChange)
    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
    return () => mql.removeEventListener("change", onChange)
  }, [])

  return !!isMobile
}




====================================================================================================
FILE: hooks\use-toast.ts
SIZE: 4.04 KB
====================================================================================================
"use client"

// Inspired by react-hot-toast library
import * as React from "react"

import type {
  ToastActionElement,
  ToastProps,
} from "@/components/ui/toast"

const TOAST_LIMIT = 1
const TOAST_REMOVE_DELAY = 1000000

type ToasterToast = ToastProps & {
  id: string
  title?: React.ReactNode
  description?: React.ReactNode
  action?: ToastActionElement
}

const actionTypes = {
  ADD_TOAST: "ADD_TOAST",
  UPDATE_TOAST: "UPDATE_TOAST",
  DISMISS_TOAST: "DISMISS_TOAST",
  REMOVE_TOAST: "REMOVE_TOAST",
} as const

let count = 0

function genId() {
  count = (count + 1) % Number.MAX_SAFE_INTEGER
  return count.toString()
}

type ActionType = typeof actionTypes

type Action =
  | {
      type: ActionType["ADD_TOAST"]
      toast: ToasterToast
    }
  | {
      type: ActionType["UPDATE_TOAST"]
      toast: Partial<ToasterToast>
    }
  | {
      type: ActionType["DISMISS_TOAST"]
      toastId?: ToasterToast["id"]
    }
  | {
      type: ActionType["REMOVE_TOAST"]
      toastId?: ToasterToast["id"]
    }

interface State {
  toasts: ToasterToast[]
}

const toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()

const addToRemoveQueue = (toastId: string) => {
  if (toastTimeouts.has(toastId)) {
    return
  }

  const timeout = setTimeout(() => {
    toastTimeouts.delete(toastId)
    dispatch({
      type: "REMOVE_TOAST",
      toastId: toastId,
    })
  }, TOAST_REMOVE_DELAY)

  toastTimeouts.set(toastId, timeout)
}

export const reducer = (state: State, action: Action): State => {
  switch (action.type) {
    case "ADD_TOAST":
      return {
        ...state,
        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),
      }

    case "UPDATE_TOAST":
      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === action.toast.id ? { ...t, ...action.toast } : t
        ),
      }

    case "DISMISS_TOAST": {
      const { toastId } = action

      // ! Side effects ! - This could be extracted into a dismissToast() action,
      // but I'll keep it here for simplicity
      if (toastId) {
        addToRemoveQueue(toastId)
      } else {
        state.toasts.forEach((toast) => {
          addToRemoveQueue(toast.id)
        })
      }

      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === toastId || toastId === undefined
            ? {
                ...t,
                open: false,
              }
            : t
        ),
      }
    }
    case "REMOVE_TOAST":
      if (action.toastId === undefined) {
        return {
          ...state,
          toasts: [],
        }
      }
      return {
        ...state,
        toasts: state.toasts.filter((t) => t.id !== action.toastId),
      }
  }
}

const listeners: Array<(state: State) => void> = []

let memoryState: State = { toasts: [] }

function dispatch(action: Action) {
  memoryState = reducer(memoryState, action)
  listeners.forEach((listener) => {
    listener(memoryState)
  })
}

type Toast = Omit<ToasterToast, "id">

function toast({ ...props }: Toast) {
  const id = genId()

  const update = (props: ToasterToast) =>
    dispatch({
      type: "UPDATE_TOAST",
      toast: { ...props, id },
    })
  const dismiss = () => dispatch({ type: "DISMISS_TOAST", toastId: id })

  dispatch({
    type: "ADD_TOAST",
    toast: {
      ...props,
      id,
      open: true,
      onOpenChange: (open) => {
        if (!open) dismiss()
      },
    },
  })

  return {
    id: id,
    dismiss,
    update,
  }
}

function useToast() {
  const [state, setState] = React.useState<State>(memoryState)

  React.useEffect(() => {
    listeners.push(setState)
    return () => {
      const index = listeners.indexOf(setState)
      if (index > -1) {
        listeners.splice(index, 1)
      }
    }
  }, [state])

  return {
    ...state,
    toast,
    dismiss: (toastId?: string) => dispatch({ type: "DISMISS_TOAST", toastId }),
  }
}

export { useToast, toast }




====================================================================================================
FILE: lib\constants.ts
SIZE: 1.12 KB
====================================================================================================
import {
  LayoutDashboard,
  ListOrdered,
  CirclePlus,
  Search,
  ChartNoAxesColumn,
  Users,
  ScanLine,
  Share2
} from 'lucide-react';

export const NAV_LINKS = [
  {
    label: 'Verifier',
    href: '/verifier',
    icon: ScanLine,
  },
  {
    label: 'Generate',
    href: '/admin/dashboard/generate',
    icon: CirclePlus,
  },
  {
    label: 'Dashboard',
    icon: LayoutDashboard,
    submenu: [
      {
        label: 'Records',
        href: '/admin/dashboard/records',
        icon: ListOrdered,
      },
      {
        label: 'Search Pass',
        href: '/admin/dashboard/search',
        icon: Search,
      },
      {
        label: 'Statistics',
        href: '/admin/dashboard/statistics',
        icon: ChartNoAxesColumn,
      },
    ],
  },
  {
    label: 'Manage Users',
    href: '/admin/dashboard/users',
    icon: Users,
  },
  {
    label: 'Gate Guard',
    href: '/gate-guard',
    icon: Share2,
  },
];

export const LOCATIONS = [
  'SEC 01', 'SEC 02', 'SEC 03', 'SEC 04', 'SEC 05',
  'SEC 06', 'SEC 07', 'SEC 08', 'SEC 09', 'SEC 10',
  'LD 01', 'LD 02', 'LD 03', 'LD 04', 'LD 05', 'LD 06',
  'Pump Station',
];




====================================================================================================
FILE: lib\email.ts
SIZE: 2.03 KB
====================================================================================================
/**
 * Email Notification Service for Gate Pass Management System
 * 
 * Sends automated emails to users when their accounts are approved.
 * Uses EmailJS - a free email service that doesn't require a backend.
 * 
 * Setup: https://www.emailjs.com
 */

import emailjs from '@emailjs/browser';

// ============================================
// 🔑 YOUR EMAILJS CREDENTIALS
// ============================================
const EMAILJS_SERVICE_ID = 'service_s3kl4pg';
const EMAILJS_TEMPLATE_ID = 'template_lievm0n';
const EMAILJS_PUBLIC_KEY = 'LT7Fsfg_39olLwVSz';

// ============================================
// 📧 EMAIL SENDING FUNCTION
// ============================================

/**
 * Sends an approval email to a user
 * 
 * @param userEmail - The user's email address (where to send)
 * @param userName - The user's full name
 * @param userRole - The role assigned (user, admin, etc.)
 * @returns Promise<boolean> - true if email sent successfully
 */
export async function sendApprovalEmail(
  userEmail: string,
  userName: string,
  userRole: string
): Promise<boolean> {
  
  try {
    console.log('📧 Sending approval email to:', userEmail);
    
    // Send email via EmailJS
    // IMPORTANT: Only send the 3 core parameters
    const response = await emailjs.send(
      EMAILJS_SERVICE_ID,
      EMAILJS_TEMPLATE_ID,
      {
        to_name: userName,           // For email greeting
        to_email: userEmail,         // Recipient email address
        user_role: userRole,         // Their role (user/admin)
      },
      EMAILJS_PUBLIC_KEY
    );
    
    console.log('✅ Email sent successfully:', response.status, response.text);
    return true;
    
  } catch (error: any) {
    console.error('❌ Failed to send email:', error);
    
    // Log specific error details for debugging
    if (error.text) {
      console.error('Error details:', error.text);
    }
    if (error.status) {
      console.error('Error status:', error.status);
    }
    
    // Don't throw error - email failure shouldn't block approval
    return false;
  }
}



====================================================================================================
FILE: lib\firestore.ts
SIZE: 3.29 KB
====================================================================================================
import { initializeApp, getApps, getApp } from "firebase/app";
import { getAuth } from "firebase/auth";
import { getFirestore, serverTimestamp, Timestamp, type DocumentData, type FirestoreDataConverter, type QueryDocumentSnapshot, type SnapshotOptions } from "firebase/firestore";
import type { AppUser, Pass, Role } from "@/types";

const firebaseConfig = {
  apiKey: "AIzaSyDzcqs6xqG9yoz6gIjStQLQOX7K00gG41E",
  authDomain: "guardian-e6f28.firebaseapp.com",
  projectId: "guardian-e6f28",
  storageBucket: "guardian-e6f28.firebasestorage.app",
  messagingSenderId: "820767061705",
  appId: "1:820767061705:web:fb36dd35ae9e53df25ff18",
  measurementId: "G-VZSVZKZE0K"
};

export const app = !getApps().length ? initializeApp(firebaseConfig) : getApp();
export const auth = getAuth(app);
export const db = getFirestore(app);
export const ts = serverTimestamp;

export const userConverter: FirestoreDataConverter<AppUser> = {
  toFirestore: (user: AppUser): DocumentData => {
    return { ...user };
  },
  fromFirestore: (snapshot: QueryDocumentSnapshot, options: SnapshotOptions): AppUser => {
    const data = snapshot.data(options);
    return {
      uid: snapshot.id,
      email: data.email,
      fullName: data.fullName,
      phone: data.phone,
      company: data.company,
      companyId: data.companyId,
      workLocation: data.workLocation,
      role: data.role as Role,
      createdAt: data.createdAt,
      approvedBy: data.approvedBy,
      approvedAt: data.approvedAt,
    };
  },
};

export const passConverter: FirestoreDataConverter<Pass> = {
    toFirestore: (pass: Pass): DocumentData => {
      const { id, ...data } = pass;
      return data;
    },
    fromFirestore: (snapshot: QueryDocumentSnapshot, options: SnapshotOptions): Pass => {
        const data = snapshot.data(options);
        
        // Helper function to safely convert timestamps
        const toTimestamp = (value: any): Timestamp => {
          if (!value) return Timestamp.now(); // Default to now if null/undefined
          if (value instanceof Timestamp) return value;
          if (value.seconds !== undefined && value.nanoseconds !== undefined) {
            return new Timestamp(value.seconds, value.nanoseconds);
          }
          return Timestamp.now(); // Fallback
        };
        
        const baseData = {
            id: snapshot.id,
            type: data.type,
            plateAlpha: data.plateAlpha,
            plateNum: data.plateNum,
            location: data.location,
            expiresAt: toTimestamp(data.expiresAt),
            status: data.status,
            createdAt: toTimestamp(data.createdAt),
            createdBy: data.createdBy,
            createdByName: data.createdByName,
            createdByCompany: data.createdByCompany,
            qrPayload: data.qrPayload,
        };

        if (data.type === 'standard') {
            return {
                ...baseData,
                type: 'standard',
                ownerName: data.ownerName,
                serial: data.serial,
                ownerCompany: data.ownerCompany,
            };
        } else {
             return {
                ...baseData,
                type: 'visitor',
                visitorName: data.visitorName,
                personToVisit: data.personToVisit,
                purpose: data.purpose,
            };
        }
    },
};




====================================================================================================
FILE: lib\local-db.ts
SIZE: 6.83 KB
====================================================================================================
// Local Database Manager for Gate Guard App
// This module handles all interactions with IndexedDB for offline pass storage

const DB_NAME = 'GateGuardDB';
const DB_VERSION = 1;
const PASSES_STORE = 'passes';

/**
 * Initialize the IndexedDB database
 * This creates the database structure if it doesn't exist
 * and sets up indexes for fast searching
 */
export async function initDatabase(): Promise<IDBDatabase> {
  return new Promise((resolve, reject) => {
    const request = indexedDB.open(DB_NAME, DB_VERSION);

    // This runs only when the database is created for the first time
    // or when the version number is increased
    request.onupgradeneeded = (event: any) => {
      const db = event.target.result;
      
      // Delete old store if it exists (for clean upgrades)
      if (db.objectStoreNames.contains(PASSES_STORE)) {
        db.deleteObjectStore(PASSES_STORE);
      }

      // Create the passes object store
      // We use the pass ID as the primary key
      const passesStore = db.createObjectStore(PASSES_STORE, { 
        keyPath: 'id' 
      });

      // Create indexes for fast searching
      // Index on plate number combination for quick lookups
      passesStore.createIndex('plateSearch', ['plateAlpha', 'plateNum'], { 
        unique: false 
      });

      // Index on status for filtering active passes
      passesStore.createIndex('status', 'status', { 
        unique: false 
      });

      // Index on expiration date for finding expired passes
      passesStore.createIndex('expiresAt', 'expiresAt', { 
        unique: false 
      });

      console.log('[LocalDB] Database structure created successfully');
    };

    request.onsuccess = (event: any) => {
      console.log('[LocalDB] Database opened successfully');
      resolve(event.target.result);
    };

    request.onerror = (event: any) => {
      console.error('[LocalDB] Database error:', event.target.error);
      reject(event.target.error);
    };
  });
}

/**
 * Store multiple passes in IndexedDB
 * This replaces all existing passes with the new data from Firebase
 */
export async function storePasses(passes: any[]): Promise<void> {
  const db = await initDatabase();
  
  return new Promise((resolve, reject) => {
    const transaction = db.transaction([PASSES_STORE], 'readwrite');
    const store = transaction.objectStore(PASSES_STORE);

    // Clear all existing passes first
    const clearRequest = store.clear();
    
    clearRequest.onsuccess = () => {
      console.log('[LocalDB] Cleared old passes, adding new data...');
      
      // Add all new passes
      let addedCount = 0;
      passes.forEach(pass => {
        // Convert Firestore Timestamp to regular date for storage
        const passData = {
          ...pass,
          expiresAt: pass.expiresAt?.toDate?.() || pass.expiresAt,
          createdAt: pass.createdAt?.toDate?.() || pass.createdAt,
        };
        
        store.add(passData);
        addedCount++;
      });

      console.log(`[LocalDB] Added ${addedCount} passes to local database`);
    };

    transaction.oncomplete = () => {
      console.log('[LocalDB] All passes stored successfully');
      db.close();
      resolve();
    };

    transaction.onerror = (event: any) => {
      console.error('[LocalDB] Transaction error:', event.target.error);
      db.close();
      reject(event.target.error);
    };
  });
}

/**
 * Search for a pass by plate number in local database
 * This is what gets called when offline
 */
export async function searchPassLocally(
  plateAlpha: string, 
  plateNum: string
): Promise<any | null> {
  const db = await initDatabase();
  
  return new Promise((resolve, reject) => {
    const transaction = db.transaction([PASSES_STORE], 'readonly');
    const store = transaction.objectStore(PASSES_STORE);
    const index = store.index('plateSearch');

    // Search using the compound index
    const request = index.get([plateAlpha.toUpperCase(), plateNum]);

    request.onsuccess = (event: any) => {
      const pass = event.target.result;
      
      if (pass) {
        console.log('[LocalDB] Pass found in local database:', pass.id);
        
        // Check if pass has expired
        const now = new Date();
        const expiresAt = new Date(pass.expiresAt);
        
        if (expiresAt < now) {
          pass.expired = true;
        }
        
        resolve(pass);
      } else {
        console.log('[LocalDB] No pass found for plate:', plateAlpha, plateNum);
        resolve(null);
      }
      
      db.close();
    };

    request.onerror = (event: any) => {
      console.error('[LocalDB] Search error:', event.target.error);
      db.close();
      reject(event.target.error);
    };
  });
}

/**
 * Get a pass by ID from local database
 * Used when scanning QR codes offline
 */
export async function getPassById(passId: string): Promise<any | null> {
  const db = await initDatabase();
  
  return new Promise((resolve, reject) => {
    const transaction = db.transaction([PASSES_STORE], 'readonly');
    const store = transaction.objectStore(PASSES_STORE);
    const request = store.get(passId);

    request.onsuccess = (event: any) => {
      const pass = event.target.result;
      
      if (pass) {
        console.log('[LocalDB] Pass found by ID:', passId);
        
        // Check expiration
        const now = new Date();
        const expiresAt = new Date(pass.expiresAt);
        
        if (expiresAt < now) {
          pass.expired = true;
        }
        
        resolve(pass);
      } else {
        console.log('[LocalDB] No pass found with ID:', passId);
        resolve(null);
      }
      
      db.close();
    };

    request.onerror = (event: any) => {
      console.error('[LocalDB] Get by ID error:', event.target.error);
      db.close();
      reject(event.target.error);
    };
  });
}

/**
 * Get count of passes stored locally
 * Useful for showing sync status to users
 */
export async function getPassCount(): Promise<number> {
  const db = await initDatabase();
  
  return new Promise((resolve, reject) => {
    const transaction = db.transaction([PASSES_STORE], 'readonly');
    const store = transaction.objectStore(PASSES_STORE);
    const request = store.count();

    request.onsuccess = (event: any) => {
      const count = event.target.result;
      console.log(`[LocalDB] Total passes in local database: ${count}`);
      db.close();
      resolve(count);
    };

    request.onerror = (event: any) => {
      console.error('[LocalDB] Count error:', event.target.error);
      db.close();
      reject(event.target.error);
    };
  });
}

/**
 * Get the last sync timestamp from localStorage
 */
export function getLastSyncTime(): Date | null {
  const timestamp = localStorage.getItem('lastSyncTime');
  return timestamp ? new Date(timestamp) : null;
}

/**
 * Update the last sync timestamp
 */
export function setLastSyncTime(): void {
  localStorage.setItem('lastSyncTime', new Date().toISOString());
}




====================================================================================================
FILE: lib\placeholder-images.json
SIZE: 0.03 KB
====================================================================================================
{
  "placeholderImages": []
}



====================================================================================================
FILE: lib\placeholder-images.ts
SIZE: 0.24 KB
====================================================================================================
import data from './placeholder-images.json';

export type ImagePlaceholder = {
  id: string;
  description: string;
  imageUrl: string;
  imageHint: string;
};

export const PlaceHolderImages: ImagePlaceholder[] = data.placeholderImages;




====================================================================================================
FILE: lib\qr.ts
SIZE: 0.27 KB
====================================================================================================
export const buildQrPayload = (passId: string, plateAlpha: string, plateNum: string, expiresAt: Date) => {
    return {
        v: 1,
        pid: passId,
        pa: plateAlpha,
        pn: plateNum,
        exp: Math.floor(expiresAt.getTime() / 1000)
    };
};




====================================================================================================
FILE: lib\sync-manager.ts
SIZE: 3.85 KB
====================================================================================================
// Sync Manager for Gate Guard App
// Handles synchronizing pass data between Firebase and local IndexedDB

import { collection, getDocs, query, where } from 'firebase/firestore';
import { db, passConverter } from '@/lib/firestore';
import { storePasses, setLastSyncTime, getPassCount } from './local-db';

/**
 * Download all active passes from Firebase and store them locally
 * This function should be called whenever the app comes online
 */
export async function syncPassesFromFirebase(): Promise<{
  success: boolean;
  passCount: number;
  error?: string;
}> {
  console.log('[Sync] Starting pass synchronization from Firebase...');
  
  try {
    // Query Firebase for all active passes
    // We only sync active passes to save space and improve performance
    const passesQuery = query(
      collection(db, 'passes'),
      where('status', '==', 'active')
    ).withConverter(passConverter);

    console.log('[Sync] Fetching passes from Firebase...');
    const querySnapshot = await getDocs(passesQuery);

    // Convert Firestore documents to plain objects
    const passes = querySnapshot.docs.map(doc => ({
      id: doc.id,
      ...doc.data()
    }));

    console.log(`[Sync] Downloaded ${passes.length} passes from Firebase`);

    // Store all passes in IndexedDB
    await storePasses(passes);

    // Update the last sync timestamp
    setLastSyncTime();

    // Get final count to confirm storage
    const storedCount = await getPassCount();

    console.log(`[Sync] Sync completed successfully. ${storedCount} passes stored locally.`);

    return {
      success: true,
      passCount: storedCount
    };

  } catch (error: any) {
    console.error('[Sync] Synchronization failed:', error);
    
    return {
      success: false,
      passCount: 0,
      error: error.message || 'Unknown sync error'
    };
  }
}

/**
 * Check if we have any passes stored locally
 * Used to determine if we need an initial sync
 */
export async function hasLocalData(): Promise<boolean> {
  try {
    const count = await getPassCount();
    return count > 0;
  } catch (error) {
    console.error('[Sync] Error checking local data:', error);
    return false;
  }
}

/**
 * Initialize sync manager and set up automatic syncing
 * This should be called when the app loads
 */
export function initializeSyncManager(
  onSyncComplete?: (result: { success: boolean; passCount: number }) => void
): void {
  console.log('[Sync] Initializing sync manager...');

  // Perform initial sync if online
  if (navigator.onLine) {
    console.log('[Sync] Device is online, performing initial sync...');
    syncPassesFromFirebase().then(result => {
      if (onSyncComplete) {
        onSyncComplete(result);
      }
    });
  } else {
    console.log('[Sync] Device is offline, sync will occur when connection is restored');
  }

  // Listen for online event - fires when device connects to network
  window.addEventListener('online', () => {
    console.log('[Sync] Device came online, triggering automatic sync...');
    
    syncPassesFromFirebase().then(result => {
      if (result.success) {
        console.log(`[Sync] Auto-sync successful: ${result.passCount} passes updated`);
        
        // Show notification to user
        if ('Notification' in window && Notification.permission === 'granted') {
          new Notification('Gate Guard', {
            body: `Pass database updated: ${result.passCount} passes synced`,
            icon: '/icon-192.png'
          });
        }
      } else {
        console.error('[Sync] Auto-sync failed:', result.error);
      }
      
      if (onSyncComplete) {
        onSyncComplete(result);
      }
    });
  });

  // Listen for offline event - fires when device loses network
  window.addEventListener('offline', () => {
    console.log('[Sync] Device went offline, will use local database');
  });

  console.log('[Sync] Sync manager initialized, listening for network changes');
}




====================================================================================================
FILE: lib\utils.ts
SIZE: 0.17 KB
====================================================================================================
import { clsx, type ClassValue } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}




====================================================================================================
FILE: types\index.ts
SIZE: 1.24 KB
====================================================================================================
import type { Timestamp } from "firebase/firestore";

export type Role = 'owner' | 'admin' | 'user' | 'pending' | 'rejected';
export type PassStatus = 'active' | 'expired' | 'revoked';
export type PassType = 'standard' | 'visitor';

export interface AppUser {
  uid: string;
  email: string;
  fullName: string;
  phone?: string;
  company?: string;
  companyId?: string;
  workLocation?: string;
  role: Role;
  createdAt: any;
  approvedBy?: string | null;
  approvedAt?: Timestamp | null;
}

export interface QrPayload {
    v: 1;
    pid: string;
    pa: string;
    pn: string;
    exp: number;
}

export interface BasePass {
  id: string;
  type: PassType;
  plateAlpha: string;
  plateNum: string;
  location: string;
  expiresAt: Timestamp;
  status: PassStatus;
  createdAt: any;
  createdBy: string;
  createdByName: string;
  createdByCompany?: string;
  qrPayload: QrPayload;
}

export interface StandardPass extends BasePass {
  type: 'standard';
  ownerName: string;
  serial: string;
  ownerCompany: string;
}

export interface VisitorPass extends BasePass {
  type: 'visitor';
  visitorName: string;
  personToVisit: string;
  purpose: string;
}

export type Pass = StandardPass | VisitorPass;




